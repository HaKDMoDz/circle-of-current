
clock_radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00005200  00005274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000488  00800174  00005274  000052e8  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000573  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f38  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f6c  00000000  00000000  00009873  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003027  00000000  00000000  0000a7df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000d808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a07  00000000  00000000  0000dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002bb0  00000000  00000000  0000e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  0001126f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__ctors_end>
       4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
       8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
       c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      14:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      18:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      1c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      20:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      24:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      2c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_11>
      30:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      3c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      44:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      48:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      4c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      50:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__vector_20>
      54:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      58:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__vector_22>
      5c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      60:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      64:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      68:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      6c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>

00000070 <__c.2394>:
      70:	45 72 72 6f 72 20 3d 20 25 64 0a 00                 Error = %d..

0000007c <__c.2392>:
      7c:	44 69 73 6b 20 45 72 72 6f 72 0a 00                 Disk Error..

00000088 <__c.2388>:
      88:	25 73 0a 00                                         %s..

0000008c <__c.2386>:
      8c:	43 75 72 72 65 6e 74 20 53 6f 6e 67 3a 0a 00        Current Song:..

0000009b <__c.2384>:
      9b:	61 25 64 20 63 25 64 0a 00                          a%d c%d..

000000a4 <__c.2310>:
      a4:	20 3e 20 4f 6e 20 20 20 20 20 20 20 20 20 00         > On         .

000000b3 <__c.2308>:
      b3:	20 3e 20 4f 66 66 20 20 20 20 20 20 20 20 20 00      > Off         .

000000c3 <__c.2306>:
      c3:	49 6e 76 65 72 74 20 20 4f 75 74 70 75 74 20 00     Invert  Output .

000000d3 <__c.2304>:
      d3:	20 3e 20 4d 69 6e 75 74 65 3a 20 25 64 20 20 00      > Minute: %d  .

000000e3 <__c.2302>:
      e3:	20 3e 20 48 6f 75 72 3a 20 25 64 20 20 20 20 00      > Hour: %d    .

000000f3 <__c.2300>:
      f3:	20 3e 20 44 61 79 3a 20 25 73 20 20 20 20 20 00      > Day: %s     .

00000103 <__c.2297>:
     103:	20 43 75 72 72 65 6e 74 20 54 69 6d 65 20 00         Current Time .

00000112 <__c.2295>:
     112:	20 3e 20 4d 69 6e 75 74 65 3a 20 25 64 20 20 00      > Minute: %d  .

00000122 <__c.2293>:
     122:	20 3e 20 48 6f 75 72 3a 20 25 64 20 20 20 20 00      > Hour: %d    .

00000132 <__c.2291>:
     132:	20 3e 20 4f 6e 20 20 20 20 20 20 20 20 20 00         > On         .

00000141 <__c.2289>:
     141:	20 3e 20 4f 66 66 20 20 20 20 20 20 20 20 00         > Off        .

00000150 <__c.2287>:
     150:	20 25 73 20 41 6c 61 72 6d 20 20 20 20 20 20 00      %s Alarm      .

00000160 <__c.2283>:
     160:	20 53 68 75 66 66 6c 65 20 20 20 20 20 20 00         Shuffle      .

0000016f <__c.2281>:
     16f:	20 4c 6f 6f 70 20 20 20 20 20 20 20 20 20 00         Loop         .

0000017e <__c.2279>:
     17e:	20 4e 6f 72 6d 61 6c 20 20 20 20 20 20 20 00         Normal       .

0000018d <__c.2277>:
     18d:	20 4d 6f 64 65 20 20 20 20 20 20 20 20 20 00         Mode         .

0000019c <__c.2274>:
     19c:	61 25 64 20 63 25 64 20 6d 25 64 20 73 25 64 0a     a%d c%d m%d s%d.
	...

000001ad <__c.2272>:
     1ad:	20 53 68 75 66 66 6c 65 20 20 20 20 20 20 00         Shuffle      .

000001bc <__c.2270>:
     1bc:	20 4c 6f 6f 70 20 20 20 20 20 20 20 20 20 00         Loop         .

000001cb <__c.2268>:
     1cb:	20 4e 6f 72 6d 61 6c 20 20 20 20 20 20 20 00         Normal       .

000001da <__c.2266>:
     1da:	20 4d 6f 64 65 20 20 20 20 20 20 20 20 20 00         Mode         .

000001e9 <__c.2230>:
     1e9:	25 73 0a 00                                         %s..

000001ed <__c.2227>:
     1ed:	25 73 0a 00                                         %s..

000001f1 <__c.2219>:
     1f1:	50 72 65 76 69 6f 75 73 20 53 6f 6e 67 3a 0a 00     Previous Song:..

00000201 <__c.2194>:
     201:	53 68 75 66 66 6c 69 6e 67 0a 00                    Shuffling..

0000020c <__c.2178>:
     20c:	25 73 0a 00                                         %s..

00000210 <__c.2175>:
     210:	4e 65 78 74 20 53 6f 6e 67 3a 0a 00                 Next Song:..

0000021c <upperlinechar>:
     21c:	1f 1f 1f 00 00 00 00 00                             ........

00000224 <lowerlinechar>:
     224:	00 00 00 00 00 1f 1f 1f                             ........

0000022c <bothlinechar>:
     22c:	1f 1f 00 00 00 00 1f 1f                             ........

00000234 <largecolonleftchar>:
     234:	00 00 01 03 03 01 00 00                             ........

0000023c <largecolonrightchar>:
     23c:	00 00 10 18 18 10 00 00                             ........

00000244 <upchar>:
     244:	00 04 0e 15 04 04 04 00                             ........

0000024c <downchar>:
     24c:	00 04 04 04 15 0e 04 00                             ........

00000254 <numchar>:
     254:	ff 00 ff ff 01 ff 00 ff 20 01 ff 01 00 02 ff ff     ........ .......
     264:	01 01 00 02 ff 01 01 ff ff 01 ff 20 20 ff ff 02     ...........  ...
     274:	00 01 01 ff ff 02 00 ff 01 ff 00 00 ff 20 20 ff     .............  .
     284:	ff 02 ff ff 01 ff ff 02 ff 01 01 ff                 ............

00000290 <__c.1780>:
     290:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000002a2 <__ctors_end>:
     2a2:	11 24       	eor	r1, r1
     2a4:	1f be       	out	0x3f, r1	; 63
     2a6:	cf ef       	ldi	r28, 0xFF	; 255
     2a8:	d0 e1       	ldi	r29, 0x10	; 16
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	cd bf       	out	0x3d, r28	; 61

000002ae <__do_copy_data>:
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f2 e5       	ldi	r31, 0x52	; 82
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <.do_copy_data_start>

000002ba <.do_copy_data_loop>:
     2ba:	05 90       	lpm	r0, Z+
     2bc:	0d 92       	st	X+, r0

000002be <.do_copy_data_start>:
     2be:	a4 37       	cpi	r26, 0x74	; 116
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <.do_copy_data_loop>

000002c4 <__do_clear_bss>:
     2c4:	15 e0       	ldi	r17, 0x05	; 5
     2c6:	a4 e7       	ldi	r26, 0x74	; 116
     2c8:	b1 e0       	ldi	r27, 0x01	; 1
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	ac 3f       	cpi	r26, 0xFC	; 252
     2d0:	b1 07       	cpc	r27, r17
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>
     2d4:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
     2d8:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <_exit>

000002dc <__bad_interrupt>:
     2dc:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_default>

000002e0 <__vector_default>:
volatile unsigned char BL_mode;
#define BL_on_speed 0
#define BL_off_speed 2

ISR(BADISR_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
}
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <timer_init>:

	disk_timerproc();
}

void timer_init()
{
     2f4:	10 92 ee 04 	sts	0x04EE, r1
     2f8:	10 92 ef 04 	sts	0x04EF, r1
     2fc:	10 92 f0 04 	sts	0x04F0, r1
     300:	10 92 f1 04 	sts	0x04F1, r1
	BL_timer = 0;
	BL_mode = 1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 f2 04 	sts	0x04F2, r24
	fade_timer = 0;
     30a:	10 92 ea 04 	sts	0x04EA, r1
     30e:	10 92 eb 04 	sts	0x04EB, r1
     312:	10 92 ec 04 	sts	0x04EC, r1
     316:	10 92 ed 04 	sts	0x04ED, r1
	ovf_cnt = 0;
     31a:	10 92 e6 04 	sts	0x04E6, r1
     31e:	10 92 e7 04 	sts	0x04E7, r1
     322:	10 92 e8 04 	sts	0x04E8, r1
     326:	10 92 e9 04 	sts	0x04E9, r1
	song_timer = 0;
     32a:	10 92 de 04 	sts	0x04DE, r1
     32e:	10 92 df 04 	sts	0x04DF, r1
     332:	10 92 e0 04 	sts	0x04E0, r1
     336:	10 92 e1 04 	sts	0x04E1, r1
	clk_timer = 0;
     33a:	10 92 e2 04 	sts	0x04E2, r1
     33e:	10 92 e3 04 	sts	0x04E3, r1
     342:	10 92 e4 04 	sts	0x04E4, r1
     346:	10 92 e5 04 	sts	0x04E5, r1
	TCCR2A = 0b10000011;
     34a:	83 e8       	ldi	r24, 0x83	; 131
     34c:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = 0;
     350:	10 92 b3 00 	sts	0x00B3, r1
	TCCR2B = 0b00000101;
     354:	85 e0       	ldi	r24, 0x05	; 5
     356:	80 93 b1 00 	sts	0x00B1, r24
	sbi(TIMSK2, TOIE2);
     35a:	e0 e7       	ldi	r30, 0x70	; 112
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
}
     364:	08 95       	ret

00000366 <get_fattime>:
		abort();
	}
}

DWORD get_fattime()
{
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	08 95       	ret

00000370 <BL_on>:
	return 0;
}

void BL_on()
{
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 f2 04 	sts	0x04F2, r24
	BL_mode = 1;
	BL_timer = 0;
     376:	10 92 ee 04 	sts	0x04EE, r1
     37a:	10 92 ef 04 	sts	0x04EF, r1
     37e:	10 92 f0 04 	sts	0x04F0, r1
     382:	10 92 f1 04 	sts	0x04F1, r1
}
     386:	08 95       	ret

00000388 <menu>:
	free(p);
	return f_lseek(&(mf->fh), 0);
}

unsigned char menu(OP_STRUCT * o, MP3File * mf)
{
     388:	2f 92       	push	r2
     38a:	3f 92       	push	r3
     38c:	4f 92       	push	r4
     38e:	5f 92       	push	r5
     390:	6f 92       	push	r6
     392:	7f 92       	push	r7
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	df 93       	push	r29
     3a8:	cf 93       	push	r28
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	a0 97       	sbiw	r28, 0x20	; 32
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	6c 01       	movw	r12, r24
	unsigned char a = 0;
     3bc:	19 82       	std	Y+1, r1	; 0x01
	unsigned char c = 255;

	unsigned char mode = 0;
	unsigned char submode = 0;

	LCDSetPos(1, 1);
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	LCDSend(127, 1);
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	8f e7       	ldi	r24, 0x7F	; 127
     3ca:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSetPos(1, 2);
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	LCDSend(upcharaddr, 1);
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>

	//               23456789012345
	LCDPrint_P(PSTR(" Mode         "), 2, 1);
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	8a ed       	ldi	r24, 0xDA	; 218
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>
	if(o->mode == 0)
     3ea:	d6 01       	movw	r26, r12
     3ec:	11 96       	adiw	r26, 0x01	; 1
     3ee:	8c 91       	ld	r24, X
     3f0:	88 23       	and	r24, r24
     3f2:	29 f4       	brne	.+10     	; 0x3fe <menu+0x76>
	{
		//               23456789012345
		LCDPrint_P(PSTR(" Normal       "), 2, 2);
     3f4:	42 e0       	ldi	r20, 0x02	; 2
     3f6:	62 e0       	ldi	r22, 0x02	; 2
     3f8:	8b ec       	ldi	r24, 0xCB	; 203
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0d c0       	rjmp	.+26     	; 0x418 <menu+0x90>
	}
	else if(o->mode == 1)
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	29 f4       	brne	.+10     	; 0x40c <menu+0x84>
	{
		//               23456789012345
		LCDPrint_P(PSTR(" Loop         "), 2, 2);
     402:	42 e0       	ldi	r20, 0x02	; 2
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	8c eb       	ldi	r24, 0xBC	; 188
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	06 c0       	rjmp	.+12     	; 0x418 <menu+0x90>
	}
	else if(o->mode == 2)
     40c:	82 30       	cpi	r24, 0x02	; 2
     40e:	31 f4       	brne	.+12     	; 0x41c <menu+0x94>
	{
		//               23456789012345
		LCDPrint_P(PSTR(" Shuffle      "), 2, 2);
     410:	42 e0       	ldi	r20, 0x02	; 2
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	8d ea       	ldi	r24, 0xAD	; 173
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>
	}

	LCDSetPos(16, 2);
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	LCDSend(downcharaddr, 1);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSetPos(16, 1);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	80 e1       	ldi	r24, 0x10	; 16
     430:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	LCDSend(126, 1);
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	8e e7       	ldi	r24, 0x7E	; 126
     438:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
     43c:	bb 24       	eor	r11, r11
     43e:	aa 24       	eor	r10, r10
	return 0;
}

void BL_on()
{
	BL_mode = 1;
     440:	77 24       	eor	r7, r7
     442:	73 94       	inc	r7
						}
					}
			
					LCDSetPos(2, 2);
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Minute: %d  "), o->cur_m);
     444:	65 e0       	ldi	r22, 0x05	; 5
     446:	86 2e       	mov	r8, r22
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	96 2e       	mov	r9, r22
					}
					else if(c == DOWNCMD)
					{
						if(o->cur_m == 0)
						{
							o->cur_m = 59;
     44c:	5b e3       	ldi	r21, 0x3B	; 59
     44e:	65 2e       	mov	r6, r21
						}
					}
			
					LCDSetPos(2, 2);
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Hour: %d    "), o->cur_h);
     450:	43 ee       	ldi	r20, 0xE3	; 227
     452:	44 2e       	mov	r4, r20
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	54 2e       	mov	r5, r20
			
					char * day_name = day_array[o->cur_day];

					LCDSetPos(2, 2);
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Day: %s     "), day_name);
     458:	33 ef       	ldi	r19, 0xF3	; 243
     45a:	23 2e       	mov	r2, r19
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	33 2e       	mov	r3, r19
	LCDSetPos(16, 1);
	LCDSend(126, 1);

	while(1)
	{
		c = serRx(&a);
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 46 23 	call	0x468c	; 0x468c <serRx>
     468:	08 2f       	mov	r16, r24
     46a:	70 92 f2 04 	sts	0x04F2, r7
	BL_timer = 0;
     46e:	10 92 ee 04 	sts	0x04EE, r1
     472:	10 92 ef 04 	sts	0x04EF, r1
     476:	10 92 f0 04 	sts	0x04F0, r1
     47a:	10 92 f1 04 	sts	0x04F1, r1
		BL_on();
		
		if(a > 0)
     47e:	29 81       	ldd	r18, Y+1	; 0x01
     480:	22 23       	and	r18, r18
     482:	09 f4       	brne	.+2      	; 0x486 <menu+0xfe>
     484:	1a c2       	rjmp	.+1076   	; 0x8ba <menu+0x532>
		{
			fprintf_P(&serstdout, PSTR("a%d c%d m%d s%d\n"), a, c, mode, submode);
     486:	8a 2d       	mov	r24, r10
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	8b 2d       	mov	r24, r11
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	80 2f       	mov	r24, r16
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	82 2f       	mov	r24, r18
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	ec e9       	ldi	r30, 0x9C	; 156
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	ff 93       	push	r31
     4ac:	ef 93       	push	r30
     4ae:	83 e1       	ldi	r24, 0x13	; 19
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>

			if(c == PREVCMD)
     4ba:	ad b7       	in	r26, 0x3d	; 61
     4bc:	be b7       	in	r27, 0x3e	; 62
     4be:	1c 96       	adiw	r26, 0x0c	; 12
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	be bf       	out	0x3e, r27	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	ad bf       	out	0x3d, r26	; 61
     4ca:	02 30       	cpi	r16, 0x02	; 2
     4cc:	39 f4       	brne	.+14     	; 0x4dc <menu+0x154>
			{
				if(mode == 0)
     4ce:	bb 20       	and	r11, r11
     4d0:	19 f4       	brne	.+6      	; 0x4d8 <menu+0x150>
     4d2:	29 e0       	ldi	r18, 0x09	; 9
     4d4:	b2 2e       	mov	r11, r18
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <menu+0x16c>
				{
					mode = 9;
				}
				else
				{
					mode--;
     4d8:	ba 94       	dec	r11
     4da:	0c c0       	rjmp	.+24     	; 0x4f4 <menu+0x16c>
				}
			}
			else if(c == NEXTCMD)
     4dc:	01 30       	cpi	r16, 0x01	; 1
     4de:	39 f4       	brne	.+14     	; 0x4ee <menu+0x166>
			{
				if(mode == 9)
     4e0:	b9 e0       	ldi	r27, 0x09	; 9
     4e2:	bb 16       	cp	r11, r27
     4e4:	11 f4       	brne	.+4      	; 0x4ea <menu+0x162>
     4e6:	bb 24       	eor	r11, r11
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <menu+0x16c>
				{
					mode = 0;
				}
				else
				{
					mode++;
     4ea:	b3 94       	inc	r11
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <menu+0x16c>
				}
			}
			else if(c == MENUCMD)
     4ee:	05 30       	cpi	r16, 0x05	; 5
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <menu+0x16c>
     4f2:	ef c1       	rjmp	.+990    	; 0x8d2 <menu+0x54a>
			{
				break;
			}

			LCDSetPos(1, 1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
			LCDSend(127, 1);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	8f e7       	ldi	r24, 0x7F	; 127
     500:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
			LCDSetPos(1, 2);
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
			LCDSend(upcharaddr, 1);
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>

			if(mode == 0)
     514:	bb 20       	and	r11, r11
     516:	b9 f5       	brne	.+110    	; 0x586 <menu+0x1fe>
			{
				//               23456789012345
				LCDPrint_P(PSTR(" Mode         "), 2, 1);
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	8d e8       	ldi	r24, 0x8D	; 141
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>

				if(c == UPCMD || c == PLAYCMD)
     524:	03 30       	cpi	r16, 0x03	; 3
     526:	11 f0       	breq	.+4      	; 0x52c <menu+0x1a4>
     528:	00 23       	and	r16, r16
     52a:	41 f4       	brne	.+16     	; 0x53c <menu+0x1b4>
				{
					if(o->mode == 2)
     52c:	f6 01       	movw	r30, r12
     52e:	81 81       	ldd	r24, Z+1	; 0x01
     530:	82 30       	cpi	r24, 0x02	; 2
     532:	11 f4       	brne	.+4      	; 0x538 <menu+0x1b0>
					{
						o->mode = 0;
     534:	11 82       	std	Z+1, r1	; 0x01
     536:	0f c0       	rjmp	.+30     	; 0x556 <menu+0x1ce>
					}
					else
					{
						o->mode++;
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	0a c0       	rjmp	.+20     	; 0x550 <menu+0x1c8>
					}
				}
				else if(c == DOWNCMD)
     53c:	04 30       	cpi	r16, 0x04	; 4
     53e:	59 f4       	brne	.+22     	; 0x556 <menu+0x1ce>
				{
					if(o->mode == 0)
     540:	f6 01       	movw	r30, r12
     542:	81 81       	ldd	r24, Z+1	; 0x01
     544:	88 23       	and	r24, r24
     546:	19 f4       	brne	.+6      	; 0x54e <menu+0x1c6>
					{
						o->mode = 2;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	81 83       	std	Z+1, r24	; 0x01
     54c:	04 c0       	rjmp	.+8      	; 0x556 <menu+0x1ce>
					}
					else
					{
						o->mode--;
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	d6 01       	movw	r26, r12
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	8c 93       	st	X, r24
					}
				}

				if(o->mode == normalmode)
     556:	f6 01       	movw	r30, r12
     558:	81 81       	ldd	r24, Z+1	; 0x01
     55a:	88 23       	and	r24, r24
     55c:	29 f4       	brne	.+10     	; 0x568 <menu+0x1e0>
				{
					//               23456789012345
					LCDPrint_P(PSTR(" Normal       "), 2, 2);
     55e:	42 e0       	ldi	r20, 0x02	; 2
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	8e e7       	ldi	r24, 0x7E	; 126
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	97 c1       	rjmp	.+814    	; 0x896 <menu+0x50e>
				}
				else if(o->mode == loopmode)
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	29 f4       	brne	.+10     	; 0x576 <menu+0x1ee>
				{
					//               23456789012345
					LCDPrint_P(PSTR(" Loop         "), 2, 2);
     56c:	42 e0       	ldi	r20, 0x02	; 2
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	8f e6       	ldi	r24, 0x6F	; 111
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	90 c1       	rjmp	.+800    	; 0x896 <menu+0x50e>
				}
				else if(o->mode == shufflemode)
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	09 f0       	breq	.+2      	; 0x57c <menu+0x1f4>
     57a:	8f c1       	rjmp	.+798    	; 0x89a <menu+0x512>
				{
					//               23456789012345
					LCDPrint_P(PSTR(" Shuffle      "), 2, 2);
     57c:	42 e0       	ldi	r20, 0x02	; 2
     57e:	62 e0       	ldi	r22, 0x02	; 2
     580:	80 e6       	ldi	r24, 0x60	; 96
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	88 c1       	rjmp	.+784    	; 0x896 <menu+0x50e>
				}
			}
			else if(mode >= 1 && mode < 1 + 7)
     586:	eb 2d       	mov	r30, r11
     588:	e1 50       	subi	r30, 0x01	; 1
     58a:	e7 30       	cpi	r30, 0x07	; 7
     58c:	08 f0       	brcs	.+2      	; 0x590 <menu+0x208>
     58e:	9f c0       	rjmp	.+318    	; 0x6ce <menu+0x346>
			{
				unsigned char daycnt = mode - 1;
				char * day_name = day_array[daycnt];
     590:	ee 2e       	mov	r14, r30
     592:	ff 24       	eor	r15, r15
     594:	f7 01       	movw	r30, r14
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	e0 5c       	subi	r30, 0xC0	; 192
     59c:	fe 4f       	sbci	r31, 0xFE	; 254
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	98 a3       	std	Y+32, r25	; 0x20
     5a4:	8f 8f       	std	Y+31, r24	; 0x1f

				LCDSetPos(2, 1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
				//                          23456789012345
				fprintf_P(&LCDstdout, PSTR(" %s Alarm      "), day_name);
     5ae:	af 8d       	ldd	r26, Y+31	; 0x1f
     5b0:	b8 a1       	ldd	r27, Y+32	; 0x20
     5b2:	bf 93       	push	r27
     5b4:	af 93       	push	r26
     5b6:	e0 e5       	ldi	r30, 0x50	; 80
     5b8:	f1 e0       	ldi	r31, 0x01	; 1
     5ba:	ff 93       	push	r31
     5bc:	ef 93       	push	r30
     5be:	9f 92       	push	r9
     5c0:	8f 92       	push	r8
     5c2:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>

				if(c == PLAYCMD)
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	06 96       	adiw	r24, 0x06	; 6
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	9e bf       	out	0x3e, r25	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	8d bf       	out	0x3d, r24	; 61
     5d6:	00 23       	and	r16, r16
     5d8:	31 f4       	brne	.+12     	; 0x5e6 <menu+0x25e>
				{
					submode++;
					submode %= 3;
     5da:	8a 2d       	mov	r24, r10
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	63 e0       	ldi	r22, 0x03	; 3
     5e0:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
     5e4:	a9 2e       	mov	r10, r25
				}

				if(submode == 0)
     5e6:	aa 20       	and	r10, r10
     5e8:	e9 f4       	brne	.+58     	; 0x624 <menu+0x29c>
				{
					if(c == UPCMD || c == DOWNCMD)
     5ea:	03 50       	subi	r16, 0x03	; 3
     5ec:	02 30       	cpi	r16, 0x02	; 2
     5ee:	48 f4       	brcc	.+18     	; 0x602 <menu+0x27a>
					{
						if(o->alarm_on[daycnt] == 0)
     5f0:	f6 01       	movw	r30, r12
     5f2:	ee 0d       	add	r30, r14
     5f4:	ff 1d       	adc	r31, r15
     5f6:	82 81       	ldd	r24, Z+2	; 0x02
     5f8:	88 23       	and	r24, r24
     5fa:	11 f4       	brne	.+4      	; 0x600 <menu+0x278>
						{
							o->alarm_on[daycnt] = 1;
     5fc:	72 82       	std	Z+2, r7	; 0x02
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <menu+0x27a>
						}
						else
						{
							o->alarm_on[daycnt] = 0;
     600:	12 82       	std	Z+2, r1	; 0x02
						}
					}
			
					if(o->alarm_on[daycnt] == 0)
     602:	ec 0c       	add	r14, r12
     604:	fd 1c       	adc	r15, r13
     606:	d7 01       	movw	r26, r14
     608:	12 96       	adiw	r26, 0x02	; 2
     60a:	8c 91       	ld	r24, X
     60c:	88 23       	and	r24, r24
     60e:	29 f4       	brne	.+10     	; 0x61a <menu+0x292>
					{
						//               23456789012345
						LCDPrint_P(PSTR(" > Off        "), 2, 2);
     610:	42 e0       	ldi	r20, 0x02	; 2
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	81 e4       	ldi	r24, 0x41	; 65
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	3e c1       	rjmp	.+636    	; 0x896 <menu+0x50e>
					}
					else
					{
						//               23456789012345
						LCDPrint_P(PSTR(" > On         "), 2, 2);
     61a:	42 e0       	ldi	r20, 0x02	; 2
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	82 e3       	ldi	r24, 0x32	; 50
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	39 c1       	rjmp	.+626    	; 0x896 <menu+0x50e>
					}
				}
				else if(submode == 1)
     624:	b1 e0       	ldi	r27, 0x01	; 1
     626:	ab 16       	cp	r10, r27
     628:	39 f5       	brne	.+78     	; 0x678 <menu+0x2f0>
				{
					if(c == UPCMD)
     62a:	03 30       	cpi	r16, 0x03	; 3
     62c:	51 f4       	brne	.+20     	; 0x642 <menu+0x2ba>
					{
						if(o->alarm_h[daycnt] == 23)
     62e:	f6 01       	movw	r30, r12
     630:	ee 0d       	add	r30, r14
     632:	ff 1d       	adc	r31, r15
     634:	81 85       	ldd	r24, Z+9	; 0x09
     636:	87 31       	cpi	r24, 0x17	; 23
     638:	11 f4       	brne	.+4      	; 0x63e <menu+0x2b6>
						{
							o->alarm_h[daycnt] = 0;
     63a:	11 86       	std	Z+9, r1	; 0x09
     63c:	0e c0       	rjmp	.+28     	; 0x65a <menu+0x2d2>
						}
						else
						{
							o->alarm_h[daycnt]++;
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	0b c0       	rjmp	.+22     	; 0x658 <menu+0x2d0>
						}
					}
					else if(c == DOWNCMD)
     642:	04 30       	cpi	r16, 0x04	; 4
     644:	51 f4       	brne	.+20     	; 0x65a <menu+0x2d2>
					{
						if(o->alarm_h[daycnt] == 0)
     646:	f6 01       	movw	r30, r12
     648:	ee 0d       	add	r30, r14
     64a:	ff 1d       	adc	r31, r15
     64c:	81 85       	ldd	r24, Z+9	; 0x09
     64e:	88 23       	and	r24, r24
     650:	11 f4       	brne	.+4      	; 0x656 <menu+0x2ce>
						{
							o->alarm_h[daycnt] = 23;
     652:	87 e1       	ldi	r24, 0x17	; 23
     654:	01 c0       	rjmp	.+2      	; 0x658 <menu+0x2d0>
						}
						else
						{
							o->alarm_h[daycnt]--;
     656:	81 50       	subi	r24, 0x01	; 1
     658:	81 87       	std	Z+9, r24	; 0x09
						}
					}
			
					LCDSetPos(2, 2);
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Hour: %d    "), o->alarm_h[daycnt]);
     662:	ec 0c       	add	r14, r12
     664:	fd 1c       	adc	r15, r13
     666:	d7 01       	movw	r26, r14
     668:	19 96       	adiw	r26, 0x09	; 9
     66a:	8c 91       	ld	r24, X
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	e2 e2       	ldi	r30, 0x22	; 34
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	d8 c0       	rjmp	.+432    	; 0x828 <menu+0x4a0>
				}
				else if(submode == 2)
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	a9 16       	cp	r10, r25
     67c:	09 f0       	breq	.+2      	; 0x680 <menu+0x2f8>
     67e:	0d c1       	rjmp	.+538    	; 0x89a <menu+0x512>
				{
					if(c == UPCMD)
     680:	03 30       	cpi	r16, 0x03	; 3
     682:	51 f4       	brne	.+20     	; 0x698 <menu+0x310>
					{
						if(o->alarm_m[daycnt] == 59)
     684:	f6 01       	movw	r30, r12
     686:	ee 0d       	add	r30, r14
     688:	ff 1d       	adc	r31, r15
     68a:	80 89       	ldd	r24, Z+16	; 0x10
     68c:	8b 33       	cpi	r24, 0x3B	; 59
     68e:	11 f4       	brne	.+4      	; 0x694 <menu+0x30c>
						{
							o->alarm_m[daycnt] = 0;
     690:	10 8a       	std	Z+16, r1	; 0x10
     692:	0e c0       	rjmp	.+28     	; 0x6b0 <menu+0x328>
						}
						else
						{
							o->alarm_m[daycnt]++;
     694:	8f 5f       	subi	r24, 0xFF	; 255
     696:	0b c0       	rjmp	.+22     	; 0x6ae <menu+0x326>
						}
					}
					else if(c == DOWNCMD)
     698:	04 30       	cpi	r16, 0x04	; 4
     69a:	51 f4       	brne	.+20     	; 0x6b0 <menu+0x328>
					{
						if(o->alarm_m[daycnt] == 0)
     69c:	f6 01       	movw	r30, r12
     69e:	ee 0d       	add	r30, r14
     6a0:	ff 1d       	adc	r31, r15
     6a2:	80 89       	ldd	r24, Z+16	; 0x10
     6a4:	88 23       	and	r24, r24
     6a6:	11 f4       	brne	.+4      	; 0x6ac <menu+0x324>
						{
							o->alarm_m[daycnt] = 59;
     6a8:	60 8a       	std	Z+16, r6	; 0x10
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <menu+0x328>
						}
						else
						{
							o->alarm_m[daycnt]--;
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	80 8b       	std	Z+16, r24	; 0x10
						}
					}
			
					LCDSetPos(2, 2);
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Minute: %d  "), o->alarm_m[daycnt]);
     6b8:	ec 0c       	add	r14, r12
     6ba:	fd 1c       	adc	r15, r13
     6bc:	d7 01       	movw	r26, r14
     6be:	50 96       	adiw	r26, 0x10	; 16
     6c0:	8c 91       	ld	r24, X
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	e2 e1       	ldi	r30, 0x12	; 18
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	ad c0       	rjmp	.+346    	; 0x828 <menu+0x4a0>
				}
			}
			else if(mode == 8)
     6ce:	98 e0       	ldi	r25, 0x08	; 8
     6d0:	b9 16       	cp	r11, r25
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <menu+0x34e>
     6d4:	b8 c0       	rjmp	.+368    	; 0x846 <menu+0x4be>
			{
				//               23456789012345
				LCDPrint_P(PSTR(" Current Time "), 2, 1);
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	62 e0       	ldi	r22, 0x02	; 2
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>

				if(c == PLAYCMD)
     6e2:	00 23       	and	r16, r16
     6e4:	31 f4       	brne	.+12     	; 0x6f2 <menu+0x36a>
				{
					submode++;
					submode %= 3;
     6e6:	8a 2d       	mov	r24, r10
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	63 e0       	ldi	r22, 0x03	; 3
     6ec:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
     6f0:	a9 2e       	mov	r10, r25
				}

				if(submode == 0)
     6f2:	aa 20       	and	r10, r10
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <menu+0x370>
     6f6:	3f c0       	rjmp	.+126    	; 0x776 <menu+0x3ee>
				{
					if(c == UPCMD)
     6f8:	03 30       	cpi	r16, 0x03	; 3
     6fa:	59 f4       	brne	.+22     	; 0x712 <menu+0x38a>
					{
						if(o->cur_day == 6)
     6fc:	d6 01       	movw	r26, r12
     6fe:	57 96       	adiw	r26, 0x17	; 23
     700:	8c 91       	ld	r24, X
     702:	57 97       	sbiw	r26, 0x17	; 23
     704:	86 30       	cpi	r24, 0x06	; 6
     706:	19 f4       	brne	.+6      	; 0x70e <menu+0x386>
						{
							o->cur_day = 0;
     708:	57 96       	adiw	r26, 0x17	; 23
     70a:	1c 92       	st	X, r1
     70c:	11 c0       	rjmp	.+34     	; 0x730 <menu+0x3a8>
						}
						else
						{
							o->cur_day++;
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	0d c0       	rjmp	.+26     	; 0x72c <menu+0x3a4>
						}
					}
					else if(c == DOWNCMD)
     712:	04 30       	cpi	r16, 0x04	; 4
     714:	69 f4       	brne	.+26     	; 0x730 <menu+0x3a8>
					{
						if(o->cur_day == 0)
     716:	d6 01       	movw	r26, r12
     718:	57 96       	adiw	r26, 0x17	; 23
     71a:	8c 91       	ld	r24, X
     71c:	57 97       	sbiw	r26, 0x17	; 23
     71e:	88 23       	and	r24, r24
     720:	21 f4       	brne	.+8      	; 0x72a <menu+0x3a2>
						{
							o->cur_day = 6;
     722:	86 e0       	ldi	r24, 0x06	; 6
     724:	57 96       	adiw	r26, 0x17	; 23
     726:	8c 93       	st	X, r24
     728:	03 c0       	rjmp	.+6      	; 0x730 <menu+0x3a8>
						}
						else
						{
							o->cur_day--;
     72a:	81 50       	subi	r24, 0x01	; 1
     72c:	f6 01       	movw	r30, r12
     72e:	87 8b       	std	Z+23, r24	; 0x17
						}
					}
			
					char * day_name = day_array[o->cur_day];
     730:	d6 01       	movw	r26, r12
     732:	57 96       	adiw	r26, 0x17	; 23
     734:	ec 91       	ld	r30, X
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	e0 5c       	subi	r30, 0xC0	; 192
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	9e 8f       	std	Y+30, r25	; 0x1e
     746:	8d 8f       	std	Y+29, r24	; 0x1d

					LCDSetPos(2, 2);
     748:	62 e0       	ldi	r22, 0x02	; 2
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Day: %s     "), day_name);
     750:	ad 8d       	ldd	r26, Y+29	; 0x1d
     752:	be 8d       	ldd	r27, Y+30	; 0x1e
     754:	bf 93       	push	r27
     756:	af 93       	push	r26
     758:	3f 92       	push	r3
     75a:	2f 92       	push	r2
     75c:	9f 92       	push	r9
     75e:	8f 92       	push	r8
     760:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
     764:	ed b7       	in	r30, 0x3d	; 61
     766:	fe b7       	in	r31, 0x3e	; 62
     768:	36 96       	adiw	r30, 0x06	; 6
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	fe bf       	out	0x3e, r31	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	ed bf       	out	0x3d, r30	; 61
     774:	92 c0       	rjmp	.+292    	; 0x89a <menu+0x512>
				}
				else if(submode == 1)
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	af 16       	cp	r10, r31
     77a:	59 f5       	brne	.+86     	; 0x7d2 <menu+0x44a>
				{
					if(c == UPCMD)
     77c:	03 30       	cpi	r16, 0x03	; 3
     77e:	69 f4       	brne	.+26     	; 0x79a <menu+0x412>
					{
						if(o->cur_h == 23)
     780:	d6 01       	movw	r26, r12
     782:	58 96       	adiw	r26, 0x18	; 24
     784:	8c 91       	ld	r24, X
     786:	58 97       	sbiw	r26, 0x18	; 24
     788:	87 31       	cpi	r24, 0x17	; 23
     78a:	19 f4       	brne	.+6      	; 0x792 <menu+0x40a>
						{
							o->cur_h = 0;
     78c:	58 96       	adiw	r26, 0x18	; 24
     78e:	1c 92       	st	X, r1
     790:	14 c0       	rjmp	.+40     	; 0x7ba <menu+0x432>
						}
						else
						{
							o->cur_h++;
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	f6 01       	movw	r30, r12
     796:	80 8f       	std	Z+24, r24	; 0x18
     798:	10 c0       	rjmp	.+32     	; 0x7ba <menu+0x432>
						}
					}
					else if(c == DOWNCMD)
     79a:	04 30       	cpi	r16, 0x04	; 4
     79c:	71 f4       	brne	.+28     	; 0x7ba <menu+0x432>
					{
						if(o->cur_h == 0)
     79e:	d6 01       	movw	r26, r12
     7a0:	58 96       	adiw	r26, 0x18	; 24
     7a2:	8c 91       	ld	r24, X
     7a4:	58 97       	sbiw	r26, 0x18	; 24
     7a6:	88 23       	and	r24, r24
     7a8:	21 f4       	brne	.+8      	; 0x7b2 <menu+0x42a>
						{
							o->cur_h = 23;
     7aa:	e7 e1       	ldi	r30, 0x17	; 23
     7ac:	58 96       	adiw	r26, 0x18	; 24
     7ae:	ec 93       	st	X, r30
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <menu+0x432>
						}
						else
						{
							o->cur_h--;
     7b2:	81 50       	subi	r24, 0x01	; 1
     7b4:	d6 01       	movw	r26, r12
     7b6:	58 96       	adiw	r26, 0x18	; 24
     7b8:	8c 93       	st	X, r24
						}
					}
			
					LCDSetPos(2, 2);
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Hour: %d    "), o->cur_h);
     7c2:	f6 01       	movw	r30, r12
     7c4:	80 8d       	ldd	r24, Z+24	; 0x18
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	5f 92       	push	r5
     7ce:	4f 92       	push	r4
     7d0:	2d c0       	rjmp	.+90     	; 0x82c <menu+0x4a4>
				}
				else if(submode == 2)
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	a9 16       	cp	r10, r25
     7d6:	09 f0       	breq	.+2      	; 0x7da <menu+0x452>
     7d8:	60 c0       	rjmp	.+192    	; 0x89a <menu+0x512>
				{
					if(c == UPCMD)
     7da:	03 30       	cpi	r16, 0x03	; 3
     7dc:	59 f4       	brne	.+22     	; 0x7f4 <menu+0x46c>
					{
						if(o->cur_m == 59)
     7de:	d6 01       	movw	r26, r12
     7e0:	59 96       	adiw	r26, 0x19	; 25
     7e2:	8c 91       	ld	r24, X
     7e4:	59 97       	sbiw	r26, 0x19	; 25
     7e6:	8b 33       	cpi	r24, 0x3B	; 59
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <menu+0x468>
						{
							o->cur_m = 0;
     7ea:	59 96       	adiw	r26, 0x19	; 25
     7ec:	1c 92       	st	X, r1
     7ee:	10 c0       	rjmp	.+32     	; 0x810 <menu+0x488>
						}
						else
						{
							o->cur_m++;
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	0c c0       	rjmp	.+24     	; 0x80c <menu+0x484>
						}
					}
					else if(c == DOWNCMD)
     7f4:	04 30       	cpi	r16, 0x04	; 4
     7f6:	61 f4       	brne	.+24     	; 0x810 <menu+0x488>
					{
						if(o->cur_m == 0)
     7f8:	d6 01       	movw	r26, r12
     7fa:	59 96       	adiw	r26, 0x19	; 25
     7fc:	8c 91       	ld	r24, X
     7fe:	59 97       	sbiw	r26, 0x19	; 25
     800:	88 23       	and	r24, r24
     802:	19 f4       	brne	.+6      	; 0x80a <menu+0x482>
						{
							o->cur_m = 59;
     804:	59 96       	adiw	r26, 0x19	; 25
     806:	6c 92       	st	X, r6
     808:	03 c0       	rjmp	.+6      	; 0x810 <menu+0x488>
						}
						else
						{
							o->cur_m--;
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	f6 01       	movw	r30, r12
     80e:	81 8f       	std	Z+25, r24	; 0x19
						}
					}
			
					LCDSetPos(2, 2);
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
					//                          23456789012345
					fprintf_P(&LCDstdout, PSTR(" > Minute: %d  "), o->cur_m);
     818:	d6 01       	movw	r26, r12
     81a:	59 96       	adiw	r26, 0x19	; 25
     81c:	8c 91       	ld	r24, X
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	e3 ed       	ldi	r30, 0xD3	; 211
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	ff 93       	push	r31
     82a:	ef 93       	push	r30
     82c:	9f 92       	push	r9
     82e:	8f 92       	push	r8
     830:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
     834:	8d b7       	in	r24, 0x3d	; 61
     836:	9e b7       	in	r25, 0x3e	; 62
     838:	06 96       	adiw	r24, 0x06	; 6
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	9e bf       	out	0x3e, r25	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	8d bf       	out	0x3d, r24	; 61
     844:	2a c0       	rjmp	.+84     	; 0x89a <menu+0x512>
				}
			}
			else if(mode == 9)
     846:	99 e0       	ldi	r25, 0x09	; 9
     848:	b9 16       	cp	r11, r25
     84a:	39 f5       	brne	.+78     	; 0x89a <menu+0x512>
			{
				//               23456789012345
				LCDPrint_P(PSTR("Invert  Output "), 2, 1);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	83 ec       	ldi	r24, 0xC3	; 195
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>

				if(c == UPCMD || c == PLAYCMD || c == DOWNCMD)
     858:	03 30       	cpi	r16, 0x03	; 3
     85a:	21 f0       	breq	.+8      	; 0x864 <menu+0x4dc>
     85c:	00 23       	and	r16, r16
     85e:	11 f0       	breq	.+4      	; 0x864 <menu+0x4dc>
     860:	04 30       	cpi	r16, 0x04	; 4
     862:	59 f4       	brne	.+22     	; 0x87a <menu+0x4f2>
				{
					if(o->invert == 0)
     864:	d6 01       	movw	r26, r12
     866:	5a 96       	adiw	r26, 0x1a	; 26
     868:	8c 91       	ld	r24, X
     86a:	5a 97       	sbiw	r26, 0x1a	; 26
     86c:	88 23       	and	r24, r24
     86e:	19 f4       	brne	.+6      	; 0x876 <menu+0x4ee>
					{
						o->invert = 1;
     870:	5a 96       	adiw	r26, 0x1a	; 26
     872:	7c 92       	st	X, r7
     874:	02 c0       	rjmp	.+4      	; 0x87a <menu+0x4f2>
					}
					else
					{
						o->invert = 0;
     876:	f6 01       	movw	r30, r12
     878:	12 8e       	std	Z+26, r1	; 0x1a
					}
				}

				if(o->invert == 0)
     87a:	d6 01       	movw	r26, r12
     87c:	5a 96       	adiw	r26, 0x1a	; 26
     87e:	8c 91       	ld	r24, X
     880:	88 23       	and	r24, r24
     882:	29 f4       	brne	.+10     	; 0x88e <menu+0x506>
				{
					//               23456789012345
					LCDPrint_P(PSTR(" > Off         "), 2, 2);
     884:	42 e0       	ldi	r20, 0x02	; 2
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	83 eb       	ldi	r24, 0xB3	; 179
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <menu+0x50e>
				}
				else
				{
					//               23456789012345
					LCDPrint_P(PSTR(" > On         "), 2, 2);
     88e:	42 e0       	ldi	r20, 0x02	; 2
     890:	62 e0       	ldi	r22, 0x02	; 2
     892:	84 ea       	ldi	r24, 0xA4	; 164
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>
				}
			}

			LCDSetPos(16, 2);
     89a:	62 e0       	ldi	r22, 0x02	; 2
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
			LCDSend(downcharaddr, 1);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	86 e0       	ldi	r24, 0x06	; 6
     8a6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
			LCDSetPos(16, 1);
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	80 e1       	ldi	r24, 0x10	; 16
     8ae:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
			LCDSend(126, 1);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	8e e7       	ldi	r24, 0x7E	; 126
     8b6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		}

		if(o->invert != 0)
     8ba:	f6 01       	movw	r30, r12
     8bc:	82 8d       	ldd	r24, Z+26	; 0x1a
     8be:	88 23       	and	r24, r24
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <menu+0x53e>
		{
			MP3WriteReg(MP3_Reg_MODE, 0x08, 0x01);
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <menu+0x540>
		}
		else
		{
			MP3WriteReg(MP3_Reg_MODE, 0x08, 0x00);
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	68 e0       	ldi	r22, 0x08	; 8
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <MP3WriteReg>
     8d0:	c7 cd       	rjmp	.-1138   	; 0x460 <menu+0xd8>
			}
		}
		*/
	}

	LCDPrintTime(o->cur_h, o->cur_m);
     8d2:	d6 01       	movw	r26, r12
     8d4:	59 96       	adiw	r26, 0x19	; 25
     8d6:	6c 91       	ld	r22, X
     8d8:	59 97       	sbiw	r26, 0x19	; 25
     8da:	58 96       	adiw	r26, 0x18	; 24
     8dc:	8c 91       	ld	r24, X
     8de:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCDPrintTime>
	union {
		unsigned char d[sizeof(OP_STRUCT)];
		OP_STRUCT o;
	} savedata;

	memcpy(&savedata.o, o, sizeof(OP_STRUCT));
     8e2:	de 01       	movw	r26, r28
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	f6 01       	movw	r30, r12
     8e8:	8b e1       	ldi	r24, 0x1B	; 27
     8ea:	01 90       	ld	r0, Z+
     8ec:	0d 92       	st	X+, r0
     8ee:	81 50       	subi	r24, 0x01	; 1
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <menu+0x562>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0

	for(unsigned int i = 0; i < sizeof(OP_STRUCT); i++)
	{
		if(eeprom_read_byte(i) != savedata.d[i])
     8f6:	ae 01       	movw	r20, r28
     8f8:	4e 5f       	subi	r20, 0xFE	; 254
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8fc:	f9 99       	sbic	0x1f, 1	; 31
     8fe:	fe cf       	rjmp	.-4      	; 0x8fc <menu+0x574>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     900:	32 bd       	out	0x22, r19	; 34
     902:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     904:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     906:	80 b5       	in	r24, 0x20	; 32
     908:	fa 01       	movw	r30, r20
     90a:	e2 0f       	add	r30, r18
     90c:	f3 1f       	adc	r31, r19
     90e:	e0 81       	ld	r30, Z
     910:	8e 17       	cp	r24, r30
     912:	59 f0       	breq	.+22     	; 0x92a <menu+0x5a2>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     914:	f9 99       	sbic	0x1f, 1	; 31
     916:	fe cf       	rjmp	.-4      	; 0x914 <menu+0x58c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     918:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     91a:	32 bd       	out	0x22, r19	; 34
     91c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     91e:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	fa 9a       	sbi	0x1f, 2	; 31
     926:	f9 9a       	sbi	0x1f, 1	; 31
     928:	0f be       	out	0x3f, r0	; 63
		OP_STRUCT o;
	} savedata;

	memcpy(&savedata.o, o, sizeof(OP_STRUCT));

	for(unsigned int i = 0; i < sizeof(OP_STRUCT); i++)
     92a:	2f 5f       	subi	r18, 0xFF	; 255
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	2b 31       	cpi	r18, 0x1B	; 27
     930:	31 05       	cpc	r19, r1
     932:	21 f7       	brne	.-56     	; 0x8fc <menu+0x574>
		if(eeprom_read_byte(i) != savedata.d[i])
		{
			eeprom_write_byte(i, savedata.d[i]);
		}
	}
}
     934:	a0 96       	adiw	r28, 0x20	; 32
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	9f 90       	pop	r9
     954:	8f 90       	pop	r8
     956:	7f 90       	pop	r7
     958:	6f 90       	pop	r6
     95a:	5f 90       	pop	r5
     95c:	4f 90       	pop	r4
     95e:	3f 90       	pop	r3
     960:	2f 90       	pop	r2
     962:	08 95       	ret

00000964 <rewind>:
		return 255;
	}
}

unsigned char rewind(MP3File * mf)
{
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
	unsigned char * p = calloc(MP3PacketSize, sizeof(unsigned char));
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <calloc>
     97c:	08 2f       	mov	r16, r24
     97e:	f9 2e       	mov	r15, r25
     980:	10 e0       	ldi	r17, 0x00	; 0
	for(unsigned char i = 0; i < 256 / MP3PacketSize; i++)
	{
		while(bit_is_clear(MP3_PinIn, MP3_DREQ_Pin));
     982:	18 9b       	sbis	0x03, 0	; 3
     984:	fe cf       	rjmp	.-4      	; 0x982 <rewind+0x1e>
		MP3DataTx(p, MP3PacketSize);
     986:	60 e2       	ldi	r22, 0x20	; 32
     988:	80 2f       	mov	r24, r16
     98a:	9f 2d       	mov	r25, r15
     98c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <MP3DataTx>
}

unsigned char rewind(MP3File * mf)
{
	unsigned char * p = calloc(MP3PacketSize, sizeof(unsigned char));
	for(unsigned char i = 0; i < 256 / MP3PacketSize; i++)
     990:	1f 5f       	subi	r17, 0xFF	; 255
     992:	18 30       	cpi	r17, 0x08	; 8
     994:	b1 f7       	brne	.-20     	; 0x982 <rewind+0x1e>
	{
		while(bit_is_clear(MP3_PinIn, MP3_DREQ_Pin));
		MP3DataTx(p, MP3PacketSize);
	}
	free(p);
     996:	80 2f       	mov	r24, r16
     998:	9f 2d       	mov	r25, r15
     99a:	0e 94 a6 24 	call	0x494c	; 0x494c <free>
	return f_lseek(&(mf->fh), 0);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	ce 01       	movw	r24, r28
     9a8:	8b 50       	subi	r24, 0x0B	; 11
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	08 95       	ret

000009bc <open_next>:
	unsigned char cur_m;
	unsigned char invert;
} OP_STRUCT;

unsigned char open_next(DIR * dh, MP3File * mf, char * p)
{
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	bf 92       	push	r11
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	66 97       	sbiw	r28, 0x16	; 22
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	8c 01       	movw	r16, r24
     9e4:	7b 01       	movw	r14, r22
     9e6:	6a 01       	movw	r12, r20
	unsigned char looped = 0;
	unsigned char err;
	if(dh->index == 0)
     9e8:	fc 01       	movw	r30, r24
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	89 2b       	or	r24, r25
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <open_next+0x3a>
     9f2:	bb 24       	eor	r11, r11
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <open_next+0x4c>
	{
		err = f_opendir(dh, p);
     9f6:	ba 01       	movw	r22, r20
     9f8:	c8 01       	movw	r24, r16
     9fa:	0e 94 63 18 	call	0x30c6	; 0x30c6 <f_opendir>
		if(err != 0) return err;
     9fe:	88 23       	and	r24, r24
     a00:	09 f0       	breq	.+2      	; 0xa04 <open_next+0x48>
     a02:	57 c0       	rjmp	.+174    	; 0xab2 <open_next+0xf6>
     a04:	bb 24       	eor	r11, r11
     a06:	b3 94       	inc	r11
		looped = 1;
	}

	LCDSetPos(1, 1);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	fprintf_P(&LCDstdout, PSTR("Next Song:\n"));
     a10:	80 e1       	ldi	r24, 0x10	; 16
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	85 e0       	ldi	r24, 0x05	; 5
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
	LCDClear(2);
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCDClear>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0

	while(1)
	{
		FILINFO fno;
		f_readdir(dh, &fno);
     a32:	4e 01       	movw	r8, r28
     a34:	08 94       	sec
     a36:	81 1c       	adc	r8, r1
     a38:	91 1c       	adc	r9, r1
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <open_next+0x84>
		looped = 1;
	}

	LCDSetPos(1, 1);
	fprintf_P(&LCDstdout, PSTR("Next Song:\n"));
	LCDClear(2);
     a3c:	bb 24       	eor	r11, r11
     a3e:	b3 94       	inc	r11

	while(1)
	{
		FILINFO fno;
		f_readdir(dh, &fno);
     a40:	b4 01       	movw	r22, r8
     a42:	c8 01       	movw	r24, r16
     a44:	0e 94 98 13 	call	0x2730	; 0x2730 <f_readdir>
		if(fno.fname[0] != 0)
     a48:	8a 85       	ldd	r24, Y+10	; 0x0a
     a4a:	88 23       	and	r24, r24
     a4c:	49 f1       	breq	.+82     	; 0xaa0 <open_next+0xe4>
		{
			if(MP3Open(&fno, mf, p) == 0)
     a4e:	a6 01       	movw	r20, r12
     a50:	b7 01       	movw	r22, r14
     a52:	c4 01       	movw	r24, r8
     a54:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <MP3Open>
     a58:	88 23       	and	r24, r24
     a5a:	91 f7       	brne	.-28     	; 0xa40 <open_next+0x84>
			{
				fprintf_P(&LCDstdout, PSTR("%s\n"), mf->title);
     a5c:	29 ec       	ldi	r18, 0xC9	; 201
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	e2 0e       	add	r14, r18
     a62:	f3 1e       	adc	r15, r19
     a64:	ff 92       	push	r15
     a66:	ef 92       	push	r14
     a68:	8c e0       	ldi	r24, 0x0C	; 12
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
				song_timer = 0;
     a7c:	10 92 de 04 	sts	0x04DE, r1
     a80:	10 92 df 04 	sts	0x04DF, r1
     a84:	10 92 e0 04 	sts	0x04E0, r1
     a88:	10 92 e1 04 	sts	0x04E1, r1
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	ed b7       	in	r30, 0x3d	; 61
     a90:	fe b7       	in	r31, 0x3e	; 62
     a92:	36 96       	adiw	r30, 0x06	; 6
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	fe bf       	out	0x3e, r31	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	ed bf       	out	0x3d, r30	; 61
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <open_next+0xf6>
				return 0;
			}
		}
		else
		{
			err = f_opendir(dh, p);
     aa0:	b6 01       	movw	r22, r12
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <f_opendir>
			if(err != 0) return err;
     aa8:	88 23       	and	r24, r24
     aaa:	19 f4       	brne	.+6      	; 0xab2 <open_next+0xf6>
			if(looped != 0)
     aac:	bb 20       	and	r11, r11
     aae:	31 f2       	breq	.-116    	; 0xa3c <open_next+0x80>
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
				return 255;
			}
			looped = 1;
		}
	}
}
     ab2:	66 96       	adiw	r28, 0x16	; 22
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	08 95       	ret

00000ad6 <open_prev>:
	}
	return open_next(dh, mf, p);
}

unsigned char open_prev(DIR * dh, MP3File * mf, char * p)
{
     ad6:	2f 92       	push	r2
     ad8:	3f 92       	push	r3
     ada:	4f 92       	push	r4
     adc:	5f 92       	push	r5
     ade:	6f 92       	push	r6
     ae0:	7f 92       	push	r7
     ae2:	8f 92       	push	r8
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	c6 56       	subi	r28, 0x66	; 102
     b00:	d2 40       	sbci	r29, 0x02	; 2
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cb 59       	subi	r28, 0x9B	; 155
     b0e:	dd 4f       	sbci	r29, 0xFD	; 253
     b10:	88 83       	st	Y, r24
     b12:	c5 56       	subi	r28, 0x65	; 101
     b14:	d2 40       	sbci	r29, 0x02	; 2
     b16:	ca 59       	subi	r28, 0x9A	; 154
     b18:	dd 4f       	sbci	r29, 0xFD	; 253
     b1a:	98 83       	st	Y, r25
     b1c:	c6 56       	subi	r28, 0x66	; 102
     b1e:	d2 40       	sbci	r29, 0x02	; 2
     b20:	8b 01       	movw	r16, r22
     b22:	5a 01       	movw	r10, r20
	DIR tdir;
	unsigned char err = f_opendir(&tdir, p);
     b24:	ba 01       	movw	r22, r20
     b26:	6e 01       	movw	r12, r28
     b28:	08 94       	sec
     b2a:	c1 1c       	adc	r12, r1
     b2c:	d1 1c       	adc	r13, r1
     b2e:	c6 01       	movw	r24, r12
     b30:	0e 94 63 18 	call	0x30c6	; 0x30c6 <f_opendir>
     b34:	98 2e       	mov	r9, r24
	if(err != 0) return err;
     b36:	88 23       	and	r24, r24
     b38:	09 f0       	breq	.+2      	; 0xb3c <open_prev+0x66>
     b3a:	d7 c0       	rjmp	.+430    	; 0xcea <open_prev+0x214>

	LCDSetPos(1, 1);
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	fprintf_P(&LCDstdout, PSTR("Previous Song:\n"));
     b44:	81 ef       	ldi	r24, 0xF1	; 241
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
	LCDClear(2);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCDClear>
		}
		else
		{
			if(MP3Open(&fno, &tmf, p) == 0)
			{
				if(strcmp(mf->fn.n, tmf.fn.n) == 0)
     b5e:	cd 59       	subi	r28, 0x9D	; 157
     b60:	dd 4f       	sbci	r29, 0xFD	; 253
     b62:	08 83       	st	Y, r16
     b64:	c3 56       	subi	r28, 0x63	; 99
     b66:	d2 40       	sbci	r29, 0x02	; 2
     b68:	cc 59       	subi	r28, 0x9C	; 156
     b6a:	dd 4f       	sbci	r29, 0xFD	; 253
     b6c:	18 83       	st	Y, r17
     b6e:	c4 56       	subi	r28, 0x64	; 100
     b70:	d2 40       	sbci	r29, 0x02	; 2
     b72:	ff 24       	eor	r15, r15
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
	unsigned char firstflag = 0;

	while(1)
	{
		FILINFO fno;
		f_readdir(&tdir, &fno);
     b7c:	bd e2       	ldi	r27, 0x2D	; 45
     b7e:	6b 2e       	mov	r6, r27
     b80:	71 2c       	mov	r7, r1
     b82:	6c 0e       	add	r6, r28
     b84:	7d 1e       	adc	r7, r29
     b86:	c6 01       	movw	r24, r12
     b88:	8c 2c       	mov	r8, r12
     b8a:	e9 2e       	mov	r14, r25
		{
			break;
		}
		else
		{
			if(MP3Open(&fno, &tmf, p) == 0)
     b8c:	a3 e4       	ldi	r26, 0x43	; 67
     b8e:	ca 2e       	mov	r12, r26
     b90:	d1 2c       	mov	r13, r1
     b92:	cc 0e       	add	r12, r28
     b94:	dd 1e       	adc	r13, r29
						firstflag = 2;
					}
				}
				else
				{
					memcpy(&ldir, &tdir, sizeof(DIR));
     b96:	f7 e1       	ldi	r31, 0x17	; 23
     b98:	2f 2e       	mov	r2, r31
     b9a:	31 2c       	mov	r3, r1
     b9c:	2c 0e       	add	r2, r28
     b9e:	3d 1e       	adc	r3, r29
					memcpy(&lmf, &tmf, sizeof(MP3File));
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	4e 2e       	mov	r4, r30
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	5e 2e       	mov	r5, r30
     ba8:	4c 0e       	add	r4, r28
     baa:	5d 1e       	adc	r5, r29
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <open_prev+0xdc>
		}
		else
		{
			if(MP3Open(&fno, &tmf, p) == 0)
			{
				if(strcmp(mf->fn.n, tmf.fn.n) == 0)
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	f7 2e       	mov	r15, r23
	unsigned char firstflag = 0;

	while(1)
	{
		FILINFO fno;
		f_readdir(&tdir, &fno);
     bb2:	b3 01       	movw	r22, r6
     bb4:	88 2d       	mov	r24, r8
     bb6:	9e 2d       	mov	r25, r14
     bb8:	0e 94 98 13 	call	0x2730	; 0x2730 <f_readdir>
		if(fno.fname[0] == 0)
     bbc:	8e a9       	ldd	r24, Y+54	; 0x36
     bbe:	88 23       	and	r24, r24
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <open_prev+0xee>
     bc2:	53 c0       	rjmp	.+166    	; 0xc6a <open_prev+0x194>
		{
			break;
		}
		else
		{
			if(MP3Open(&fno, &tmf, p) == 0)
     bc4:	a5 01       	movw	r20, r10
     bc6:	b6 01       	movw	r22, r12
     bc8:	c3 01       	movw	r24, r6
     bca:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <MP3Open>
     bce:	88 23       	and	r24, r24
     bd0:	81 f7       	brne	.-32     	; 0xbb2 <open_prev+0xdc>
			{
				if(strcmp(mf->fn.n, tmf.fn.n) == 0)
     bd2:	b6 01       	movw	r22, r12
     bd4:	cd 59       	subi	r28, 0x9D	; 157
     bd6:	dd 4f       	sbci	r29, 0xFD	; 253
     bd8:	88 81       	ld	r24, Y
     bda:	c3 56       	subi	r28, 0x63	; 99
     bdc:	d2 40       	sbci	r29, 0x02	; 2
     bde:	cc 59       	subi	r28, 0x9C	; 156
     be0:	dd 4f       	sbci	r29, 0xFD	; 253
     be2:	98 81       	ld	r25, Y
     be4:	c4 56       	subi	r28, 0x64	; 100
     be6:	d2 40       	sbci	r29, 0x02	; 2
     be8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <strcmp>
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	31 f5       	brne	.+76     	; 0xc3c <open_prev+0x166>
				{
					if(firstflag != 0)
     bf0:	ff 20       	and	r15, r15
     bf2:	e9 f2       	breq	.-70     	; 0xbae <open_prev+0xd8>
					{
						memcpy(dh, &ldir, sizeof(DIR));
     bf4:	cb 59       	subi	r28, 0x9B	; 155
     bf6:	dd 4f       	sbci	r29, 0xFD	; 253
     bf8:	88 81       	ld	r24, Y
     bfa:	c5 56       	subi	r28, 0x65	; 101
     bfc:	d2 40       	sbci	r29, 0x02	; 2
     bfe:	ca 59       	subi	r28, 0x9A	; 154
     c00:	dd 4f       	sbci	r29, 0xFD	; 253
     c02:	98 81       	ld	r25, Y
     c04:	c6 56       	subi	r28, 0x66	; 102
     c06:	d2 40       	sbci	r29, 0x02	; 2
     c08:	9c 01       	movw	r18, r24
     c0a:	d9 01       	movw	r26, r18
     c0c:	fe 01       	movw	r30, r28
     c0e:	77 96       	adiw	r30, 0x17	; 23
     c10:	86 e1       	ldi	r24, 0x16	; 22
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	e1 f7       	brne	.-8      	; 0xc12 <open_prev+0x13c>
						memcpy(mf, &lmf, sizeof(MP3File));
     c1a:	d8 01       	movw	r26, r16
     c1c:	fe 01       	movw	r30, r28
     c1e:	ed 5a       	subi	r30, 0xAD	; 173
     c20:	fe 4f       	sbci	r31, 0xFE	; 254
     c22:	80 e1       	ldi	r24, 0x10	; 16
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	01 90       	ld	r0, Z+
     c28:	0d 92       	st	X+, r0
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <open_prev+0x150>
						fprintf_P(&LCDstdout, PSTR("%s\n"), mf->title);
     c2e:	07 53       	subi	r16, 0x37	; 55
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	1f 93       	push	r17
     c34:	0f 93       	push	r16
     c36:	8d ee       	ldi	r24, 0xED	; 237
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	3f c0       	rjmp	.+126    	; 0xcba <open_prev+0x1e4>
						firstflag = 2;
					}
				}
				else
				{
					memcpy(&ldir, &tdir, sizeof(DIR));
     c3c:	d1 01       	movw	r26, r2
     c3e:	88 2d       	mov	r24, r8
     c40:	9e 2d       	mov	r25, r14
     c42:	fc 01       	movw	r30, r24
     c44:	86 e1       	ldi	r24, 0x16	; 22
     c46:	01 90       	ld	r0, Z+
     c48:	0d 92       	st	X+, r0
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <open_prev+0x170>
					memcpy(&lmf, &tmf, sizeof(MP3File));
     c4e:	d2 01       	movw	r26, r4
     c50:	f6 01       	movw	r30, r12
     c52:	80 e1       	ldi	r24, 0x10	; 16
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	01 90       	ld	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <open_prev+0x180>
					if(firstflag == 0)
     c5e:	ff 20       	and	r15, r15
     c60:	09 f0       	breq	.+2      	; 0xc64 <open_prev+0x18e>
     c62:	a7 cf       	rjmp	.-178    	; 0xbb2 <open_prev+0xdc>
     c64:	ff 24       	eor	r15, r15
     c66:	f3 94       	inc	r15
     c68:	a4 cf       	rjmp	.-184    	; 0xbb2 <open_prev+0xdc>
				}
			}
		}
	}

	if(firstflag != 0)
     c6a:	ff 20       	and	r15, r15
     c6c:	19 f4       	brne	.+6      	; 0xc74 <open_prev+0x19e>
     c6e:	99 24       	eor	r9, r9
     c70:	9a 94       	dec	r9
     c72:	3b c0       	rjmp	.+118    	; 0xcea <open_prev+0x214>
	{
		memcpy(dh, &ldir, sizeof(DIR));
     c74:	cb 59       	subi	r28, 0x9B	; 155
     c76:	dd 4f       	sbci	r29, 0xFD	; 253
     c78:	88 81       	ld	r24, Y
     c7a:	c5 56       	subi	r28, 0x65	; 101
     c7c:	d2 40       	sbci	r29, 0x02	; 2
     c7e:	ca 59       	subi	r28, 0x9A	; 154
     c80:	dd 4f       	sbci	r29, 0xFD	; 253
     c82:	98 81       	ld	r25, Y
     c84:	c6 56       	subi	r28, 0x66	; 102
     c86:	d2 40       	sbci	r29, 0x02	; 2
     c88:	9c 01       	movw	r18, r24
     c8a:	d9 01       	movw	r26, r18
     c8c:	fe 01       	movw	r30, r28
     c8e:	77 96       	adiw	r30, 0x17	; 23
     c90:	86 e1       	ldi	r24, 0x16	; 22
     c92:	01 90       	ld	r0, Z+
     c94:	0d 92       	st	X+, r0
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	e1 f7       	brne	.-8      	; 0xc92 <open_prev+0x1bc>
		memcpy(mf, &lmf, sizeof(MP3File));
     c9a:	d8 01       	movw	r26, r16
     c9c:	fe 01       	movw	r30, r28
     c9e:	ed 5a       	subi	r30, 0xAD	; 173
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 e1       	ldi	r24, 0x10	; 16
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	e1 f7       	brne	.-8      	; 0xca6 <open_prev+0x1d0>
		fprintf_P(&LCDstdout, PSTR("%s\n"), mf->title);
     cae:	07 53       	subi	r16, 0x37	; 55
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	1f 93       	push	r17
     cb4:	0f 93       	push	r16
     cb6:	89 ee       	ldi	r24, 0xE9	; 233
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	85 e0       	ldi	r24, 0x05	; 5
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
		song_timer = 0;
     cca:	10 92 de 04 	sts	0x04DE, r1
     cce:	10 92 df 04 	sts	0x04DF, r1
     cd2:	10 92 e0 04 	sts	0x04E0, r1
     cd6:	10 92 e1 04 	sts	0x04E1, r1
     cda:	8d b7       	in	r24, 0x3d	; 61
     cdc:	9e b7       	in	r25, 0x3e	; 62
     cde:	06 96       	adiw	r24, 0x06	; 6
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	9e bf       	out	0x3e, r25	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	8d bf       	out	0x3d, r24	; 61
	}
	else
	{
		return 255;
	}
}
     cea:	89 2d       	mov	r24, r9
     cec:	ca 59       	subi	r28, 0x9A	; 154
     cee:	dd 4f       	sbci	r29, 0xFD	; 253
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	7f 90       	pop	r7
     d14:	6f 90       	pop	r6
     d16:	5f 90       	pop	r5
     d18:	4f 90       	pop	r4
     d1a:	3f 90       	pop	r3
     d1c:	2f 90       	pop	r2
     d1e:	08 95       	ret

00000d20 <shuffle>:
		}
	}
}

unsigned char shuffle(DIR * dh, MP3File * mf, char * p, unsigned char j)
{
     d20:	4f 92       	push	r4
     d22:	5f 92       	push	r5
     d24:	6f 92       	push	r6
     d26:	7f 92       	push	r7
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	1f 93       	push	r17
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	66 97       	sbiw	r28, 0x16	; 22
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	5c 01       	movw	r10, r24
     d50:	2b 01       	movw	r4, r22
     d52:	4a 01       	movw	r8, r20
     d54:	12 2f       	mov	r17, r18
	LCDSetPos(1, 1);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
	fprintf_P(&LCDstdout, PSTR("Shuffling\n"));
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	85 e0       	ldi	r24, 0x05	; 5
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
	LCDClear(2);
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCDClear>

	srand(TCNT2);
     d78:	80 91 b2 00 	lds	r24, 0x00B2
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <srand>
	unsigned long t = rand() % j;
     d82:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <rand>
     d86:	61 2f       	mov	r22, r17
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__divmodhi4>
     d8e:	6c 01       	movw	r12, r24
     d90:	ee 24       	eor	r14, r14
     d92:	d7 fc       	sbrc	r13, 7
     d94:	e0 94       	com	r14
     d96:	fe 2c       	mov	r15, r14
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
	for(unsigned char i = 0; i < t; i++)
	{
		FILINFO fno;
		f_readdir(dh, &fno);
     da2:	3e 01       	movw	r6, r28
     da4:	08 94       	sec
     da6:	61 1c       	adc	r6, r1
     da8:	71 1c       	adc	r7, r1
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <shuffle+0xa4>
     dac:	b3 01       	movw	r22, r6
     dae:	c5 01       	movw	r24, r10
     db0:	0e 94 98 13 	call	0x2730	; 0x2730 <f_readdir>
		if(fno.fname[0] == 0)
     db4:	8a 85       	ldd	r24, Y+10	; 0x0a
     db6:	88 23       	and	r24, r24
     db8:	21 f4       	brne	.+8      	; 0xdc2 <shuffle+0xa2>
		{
			f_opendir(dh, p);
     dba:	b4 01       	movw	r22, r8
     dbc:	c5 01       	movw	r24, r10
     dbe:	0e 94 63 18 	call	0x30c6	; 0x30c6 <f_opendir>
	fprintf_P(&LCDstdout, PSTR("Shuffling\n"));
	LCDClear(2);

	srand(TCNT2);
	unsigned long t = rand() % j;
	for(unsigned char i = 0; i < t; i++)
     dc2:	1f 5f       	subi	r17, 0xFF	; 255
     dc4:	81 2f       	mov	r24, r17
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	8c 15       	cp	r24, r12
     dce:	9d 05       	cpc	r25, r13
     dd0:	ae 05       	cpc	r26, r14
     dd2:	bf 05       	cpc	r27, r15
     dd4:	58 f3       	brcs	.-42     	; 0xdac <shuffle+0x8c>
		if(fno.fname[0] == 0)
		{
			f_opendir(dh, p);
		}
	}
	return open_next(dh, mf, p);
     dd6:	a4 01       	movw	r20, r8
     dd8:	b2 01       	movw	r22, r4
     dda:	c5 01       	movw	r24, r10
     ddc:	0e 94 de 04 	call	0x9bc	; 0x9bc <open_next>
}
     de0:	66 96       	adiw	r28, 0x16	; 22
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	1f 91       	pop	r17
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	7f 90       	pop	r7
     e04:	6f 90       	pop	r6
     e06:	5f 90       	pop	r5
     e08:	4f 90       	pop	r4
     e0a:	08 95       	ret

00000e0c <main>:
		}
	}
}

int main()
{
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	6c 97       	sbiw	r28, 0x1c	; 28
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
	sei();
     e40:	78 94       	sei

	SPI_init();
     e42:	0e 94 cc 23 	call	0x4798	; 0x4798 <SPI_init>
	serInit();
     e46:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <serInit>
	disk_timerproc();
}

void timer_init()
{
	BL_timer = 0;
     e4a:	10 92 ee 04 	sts	0x04EE, r1
     e4e:	10 92 ef 04 	sts	0x04EF, r1
     e52:	10 92 f0 04 	sts	0x04F0, r1
     e56:	10 92 f1 04 	sts	0x04F1, r1
	BL_mode = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 f2 04 	sts	0x04F2, r24
	fade_timer = 0;
     e60:	10 92 ea 04 	sts	0x04EA, r1
     e64:	10 92 eb 04 	sts	0x04EB, r1
     e68:	10 92 ec 04 	sts	0x04EC, r1
     e6c:	10 92 ed 04 	sts	0x04ED, r1
	ovf_cnt = 0;
     e70:	10 92 e6 04 	sts	0x04E6, r1
     e74:	10 92 e7 04 	sts	0x04E7, r1
     e78:	10 92 e8 04 	sts	0x04E8, r1
     e7c:	10 92 e9 04 	sts	0x04E9, r1
	song_timer = 0;
     e80:	10 92 de 04 	sts	0x04DE, r1
     e84:	10 92 df 04 	sts	0x04DF, r1
     e88:	10 92 e0 04 	sts	0x04E0, r1
     e8c:	10 92 e1 04 	sts	0x04E1, r1
	clk_timer = 0;
     e90:	10 92 e2 04 	sts	0x04E2, r1
     e94:	10 92 e3 04 	sts	0x04E3, r1
     e98:	10 92 e4 04 	sts	0x04E4, r1
     e9c:	10 92 e5 04 	sts	0x04E5, r1
	TCCR2A = 0b10000011;
     ea0:	83 e8       	ldi	r24, 0x83	; 131
     ea2:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = 0;
     ea6:	10 92 b3 00 	sts	0x00B3, r1
	TCCR2B = 0b00000101;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
     eac:	80 93 b1 00 	sts	0x00B1, r24
	sbi(TIMSK2, TOIE2);
     eb0:	80 91 70 00 	lds	r24, 0x0070
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	80 93 70 00 	sts	0x0070, r24
	timer_init();
	LCDInit();
     eba:	0e 94 b6 1c 	call	0x396c	; 0x396c <LCDInit>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
		OP_STRUCT o;
	} savedata;

	for(unsigned int i = 0; i < sizeof(OP_STRUCT); i++)
	{
		savedata.d[i] = eeprom_read_byte(i);
     ec2:	ae 01       	movw	r20, r28
     ec4:	4e 5f       	subi	r20, 0xFE	; 254
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ec8:	f9 99       	sbic	0x1f, 1	; 31
     eca:	fe cf       	rjmp	.-4      	; 0xec8 <main+0xbc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ecc:	32 bd       	out	0x22, r19	; 34
     ece:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     ed0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     ed2:	80 b5       	in	r24, 0x20	; 32
     ed4:	fa 01       	movw	r30, r20
     ed6:	e2 0f       	add	r30, r18
     ed8:	f3 1f       	adc	r31, r19
     eda:	80 83       	st	Z, r24
	union {
		unsigned char d[sizeof(OP_STRUCT)];
		OP_STRUCT o;
	} savedata;

	for(unsigned int i = 0; i < sizeof(OP_STRUCT); i++)
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	2b 31       	cpi	r18, 0x1B	; 27
     ee2:	31 05       	cpc	r19, r1
     ee4:	89 f7       	brne	.-30     	; 0xec8 <main+0xbc>
	{
		savedata.d[i] = eeprom_read_byte(i);
	}

	memcpy(&ops, &savedata.o, sizeof(OP_STRUCT));
     ee6:	a4 e7       	ldi	r26, 0x74	; 116
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	fa 01       	movw	r30, r20
     eec:	8b e1       	ldi	r24, 0x1B	; 27
     eee:	01 90       	ld	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	81 50       	subi	r24, 0x01	; 1
     ef4:	e1 f7       	brne	.-8      	; 0xeee <main+0xe2>

	MP3Init(255, ops.invert);
     ef6:	60 91 8e 01 	lds	r22, 0x018E
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <MP3Init>

	ops.flags = 0;
     f00:	10 92 74 01 	sts	0x0174, r1

	sbi(ops.flags, continueflag);
     f04:	80 91 74 01 	lds	r24, 0x0174
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	80 93 74 01 	sts	0x0174, r24
     f0e:	01 e0       	ldi	r16, 0x01	; 1
			if(c == PLAYCMD)
			{
				tog(ops.flags, playflag);

				LCDSetPos(1, 1);
				fprintf_P(&LCDstdout, PSTR("Current Song:\n"));
     f10:	45 e0       	ldi	r20, 0x05	; 5
     f12:	e4 2e       	mov	r14, r20
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	f4 2e       	mov	r15, r20
				LCDSetPos(1, 2);
				fprintf_P(&LCDstdout, PSTR("%s\n"), mp3_handle.title);
     f18:	38 e5       	ldi	r19, 0x58	; 88
     f1a:	23 2e       	mov	r2, r19
     f1c:	32 e0       	ldi	r19, 0x02	; 2
     f1e:	33 2e       	mov	r3, r19
     f20:	28 e8       	ldi	r18, 0x88	; 136
     f22:	62 2e       	mov	r6, r18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	72 2e       	mov	r7, r18
			err = open_next(&dir_handle, &mp3_handle, "/mp3");

			if(err != 0)
			{
				LCDSetPos(1, 1);
				fprintf_P(&LCDstdout, PSTR("Disk Error\n"));
     f28:	9c e7       	ldi	r25, 0x7C	; 124
     f2a:	49 2e       	mov	r4, r25
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	59 2e       	mov	r5, r25
				LCDSetPos(1, 2);
				fprintf_P(&LCDstdout, PSTR("Error = %d\n"), err);
     f30:	80 e7       	ldi	r24, 0x70	; 112
     f32:	88 2e       	mov	r8, r24
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	98 2e       	mov	r9, r24
			song_timer = 1220 + 100;
			LCDPrintTime(ops.cur_h, ops.cur_m);
		}
		else if(song_timer >= 1220 + 100)
		{
			song_timer = 1220 + 100;
     f38:	18 e2       	ldi	r17, 0x28	; 40
     f3a:	a1 2e       	mov	r10, r17
     f3c:	15 e0       	ldi	r17, 0x05	; 5
     f3e:	b1 2e       	mov	r11, r17
     f40:	c1 2c       	mov	r12, r1
     f42:	d1 2c       	mov	r13, r1

	sbi(ops.flags, continueflag);

	while(1)
	{
		unsigned char a = 0;
     f44:	19 82       	std	Y+1, r1	; 0x01
		unsigned char c = 255;
		
		c = serRx(&a);
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 46 23 	call	0x468c	; 0x468c <serRx>
     f4e:	18 2f       	mov	r17, r24

		if(a != 0)
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	22 23       	and	r18, r18
     f54:	09 f4       	brne	.+2      	; 0xf58 <main+0x14c>
     f56:	bd c0       	rjmp	.+378    	; 0x10d2 <main+0x2c6>
	return 0;
}

void BL_on()
{
	BL_mode = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 f2 04 	sts	0x04F2, r24
	BL_timer = 0;
     f5e:	10 92 ee 04 	sts	0x04EE, r1
     f62:	10 92 ef 04 	sts	0x04EF, r1
     f66:	10 92 f0 04 	sts	0x04F0, r1
     f6a:	10 92 f1 04 	sts	0x04F1, r1
		{
			BL_on();
			fprintf_P(&serstdout, PSTR("a%d c%d\n"), a, c);
     f6e:	81 2f       	mov	r24, r17
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9f 93       	push	r25
     f74:	8f 93       	push	r24
     f76:	82 2f       	mov	r24, r18
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	8b e9       	ldi	r24, 0x9B	; 155
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	83 e1       	ldi	r24, 0x13	; 19
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	9f 93       	push	r25
     f8c:	8f 93       	push	r24
     f8e:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
			if(c == PLAYCMD)
     f92:	8d b7       	in	r24, 0x3d	; 61
     f94:	9e b7       	in	r25, 0x3e	; 62
     f96:	08 96       	adiw	r24, 0x08	; 8
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	9e bf       	out	0x3e, r25	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	8d bf       	out	0x3d, r24	; 61
     fa2:	11 23       	and	r17, r17
     fa4:	79 f5       	brne	.+94     	; 0x1004 <main+0x1f8>
			{
				tog(ops.flags, playflag);
     fa6:	80 91 74 01 	lds	r24, 0x0174
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	89 27       	eor	r24, r25
     fae:	80 93 74 01 	sts	0x0174, r24

				LCDSetPos(1, 1);
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
				fprintf_P(&LCDstdout, PSTR("Current Song:\n"));
     fba:	8c e8       	ldi	r24, 0x8C	; 140
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	ff 92       	push	r15
     fc4:	ef 92       	push	r14
     fc6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
				LCDSetPos(1, 2);
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
				fprintf_P(&LCDstdout, PSTR("%s\n"), mp3_handle.title);
     fd2:	3f 92       	push	r3
     fd4:	2f 92       	push	r2
     fd6:	7f 92       	push	r7
     fd8:	6f 92       	push	r6
     fda:	ff 92       	push	r15
     fdc:	ef 92       	push	r14
     fde:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
				song_timer = 0;
     fe2:	10 92 de 04 	sts	0x04DE, r1
     fe6:	10 92 df 04 	sts	0x04DF, r1
     fea:	10 92 e0 04 	sts	0x04E0, r1
     fee:	10 92 e1 04 	sts	0x04E1, r1
     ff2:	8d b7       	in	r24, 0x3d	; 61
     ff4:	9e b7       	in	r25, 0x3e	; 62
     ff6:	0a 96       	adiw	r24, 0x0a	; 10
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	9e bf       	out	0x3e, r25	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	8d bf       	out	0x3d, r24	; 61
    1002:	67 c0       	rjmp	.+206    	; 0x10d2 <main+0x2c6>
			}
			else if(c == NEXTCMD)
    1004:	11 30       	cpi	r17, 0x01	; 1
    1006:	71 f4       	brne	.+28     	; 0x1024 <main+0x218>
			{
				if(ops.mode != shufflemode)
    1008:	80 91 75 01 	lds	r24, 0x0175
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	09 f4       	brne	.+2      	; 0x1012 <main+0x206>
    1010:	41 c0       	rjmp	.+130    	; 0x1094 <main+0x288>
				{
					err = open_next(&dir_handle, &mp3_handle, "/mp3");
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	51 e0       	ldi	r21, 0x01	; 1
    1016:	6f e8       	ldi	r22, 0x8F	; 143
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	8f e9       	ldi	r24, 0x9F	; 159
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 de 04 	call	0x9bc	; 0x9bc <open_next>
    1022:	41 c0       	rjmp	.+130    	; 0x10a6 <main+0x29a>
				else
				{
					err = shuffle(&dir_handle, &mp3_handle, "/mp3", 16);
				}
			}
			else if(c == PREVCMD)
    1024:	12 30       	cpi	r17, 0x02	; 2
    1026:	09 f0       	breq	.+2      	; 0x102a <main+0x21e>
    1028:	40 c0       	rjmp	.+128    	; 0x10aa <main+0x29e>
			{
				unsigned long percent = mp3_handle.fh.fptr * 100;
    102a:	20 91 8a 02 	lds	r18, 0x028A
    102e:	30 91 8b 02 	lds	r19, 0x028B
    1032:	40 91 8c 02 	lds	r20, 0x028C
    1036:	50 91 8d 02 	lds	r21, 0x028D
				if(bit_is_set(ops.flags, playflag) && (percent / mp3_handle.fh.fsize) > 5)
    103a:	80 91 74 01 	lds	r24, 0x0174
    103e:	80 ff       	sbrs	r24, 0
    1040:	1c c0       	rjmp	.+56     	; 0x107a <main+0x26e>
    1042:	ca 01       	movw	r24, r20
    1044:	b9 01       	movw	r22, r18
    1046:	24 e6       	ldi	r18, 0x64	; 100
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    1052:	20 91 8e 02 	lds	r18, 0x028E
    1056:	30 91 8f 02 	lds	r19, 0x028F
    105a:	40 91 90 02 	lds	r20, 0x0290
    105e:	50 91 91 02 	lds	r21, 0x0291
    1062:	0e 94 76 28 	call	0x50ec	; 0x50ec <__udivmodsi4>
    1066:	26 30       	cpi	r18, 0x06	; 6
    1068:	31 05       	cpc	r19, r1
    106a:	41 05       	cpc	r20, r1
    106c:	51 05       	cpc	r21, r1
    106e:	28 f0       	brcs	.+10     	; 0x107a <main+0x26e>
				{
					rewind(&mp3_handle);
    1070:	8f e8       	ldi	r24, 0x8F	; 143
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 b2 04 	call	0x964	; 0x964 <rewind>
    1078:	2c c0       	rjmp	.+88     	; 0x10d2 <main+0x2c6>
				}
				else
				{
					if(ops.mode != shufflemode)
    107a:	80 91 75 01 	lds	r24, 0x0175
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	49 f0       	breq	.+18     	; 0x1094 <main+0x288>
					{
						err = open_prev(&dir_handle, &mp3_handle, "/mp3");
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	51 e0       	ldi	r21, 0x01	; 1
    1086:	6f e8       	ldi	r22, 0x8F	; 143
    1088:	71 e0       	ldi	r23, 0x01	; 1
    108a:	8f e9       	ldi	r24, 0x9F	; 159
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 6b 05 	call	0xad6	; 0xad6 <open_prev>
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <main+0x29a>
					}
					else
					{
						err = shuffle(&dir_handle, &mp3_handle, "/mp3", 16);
    1094:	20 e1       	ldi	r18, 0x10	; 16
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	51 e0       	ldi	r21, 0x01	; 1
    109a:	6f e8       	ldi	r22, 0x8F	; 143
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	8f e9       	ldi	r24, 0x9F	; 159
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	0e 94 90 06 	call	0xd20	; 0xd20 <shuffle>
    10a6:	08 2f       	mov	r16, r24
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <main+0x2c6>
					}
				}
			}
			else if(c == UPCMD)
    10aa:	13 30       	cpi	r17, 0x03	; 3
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <main+0x2a8>
			{
				MP3ChangeVol(8);
    10ae:	88 e0       	ldi	r24, 0x08	; 8
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <main+0x2b0>
			}
			else if(c == DOWNCMD)
    10b4:	14 30       	cpi	r17, 0x04	; 4
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <main+0x2b6>
			{
				MP3ChangeVol(-8);
    10b8:	88 ef       	ldi	r24, 0xF8	; 248
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <MP3ChangeVol>
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <main+0x2c6>
			}
			else if(c == MENUCMD)
    10c2:	15 30       	cpi	r17, 0x05	; 5
    10c4:	31 f4       	brne	.+12     	; 0x10d2 <main+0x2c6>
			{
				menu(&ops, &mp3_handle);
    10c6:	6f e8       	ldi	r22, 0x8F	; 143
    10c8:	71 e0       	ldi	r23, 0x01	; 1
    10ca:	84 e7       	ldi	r24, 0x74	; 116
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 c4 01 	call	0x388	; 0x388 <menu>
			}
		}

		if(err == 0)
    10d2:	00 23       	and	r16, r16
    10d4:	d9 f5       	brne	.+118    	; 0x114c <__stack+0x4d>
		{
			if(bit_is_set(ops.flags, playflag))
    10d6:	80 91 74 01 	lds	r24, 0x0174
    10da:	80 ff       	sbrs	r24, 0
    10dc:	74 c0       	rjmp	.+232    	; 0x11c6 <__stack+0xc7>
			{
				if(mp3_handle.open != 0)
    10de:	80 91 9e 02 	lds	r24, 0x029E
    10e2:	88 23       	and	r24, r24
    10e4:	d9 f0       	breq	.+54     	; 0x111c <__stack+0x1d>
				{
					if(MP3Play(&mp3_handle) == 2)
    10e6:	8f e8       	ldi	r24, 0x8F	; 143
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <MP3Play>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <main+0x2e8>
    10f2:	69 c0       	rjmp	.+210    	; 0x11c6 <__stack+0xc7>
					{
						if(bit_is_set(ops.flags, continueflag))
    10f4:	80 91 74 01 	lds	r24, 0x0174
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	22 c0       	rjmp	.+68     	; 0x1140 <__stack+0x41>
						{
							if(ops.mode == shufflemode)
    10fc:	80 91 75 01 	lds	r24, 0x0175
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	51 f4       	brne	.+20     	; 0x1118 <__stack+0x19>
							{
								err = shuffle(&dir_handle, &mp3_handle, "/mp3", 16);
    1104:	20 e1       	ldi	r18, 0x10	; 16
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	51 e0       	ldi	r21, 0x01	; 1
    110a:	6f e8       	ldi	r22, 0x8F	; 143
    110c:	71 e0       	ldi	r23, 0x01	; 1
    110e:	8f e9       	ldi	r24, 0x9F	; 159
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	0e 94 90 06 	call	0xd20	; 0xd20 <shuffle>
    1116:	0a c0       	rjmp	.+20     	; 0x112c <__stack+0x2d>
							}
							else if(ops.mode == normalmode)
    1118:	88 23       	and	r24, r24
    111a:	51 f4       	brne	.+20     	; 0x1130 <__stack+0x31>
							{
								err = open_next(&dir_handle, &mp3_handle, "/mp3");
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	51 e0       	ldi	r21, 0x01	; 1
    1120:	6f e8       	ldi	r22, 0x8F	; 143
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	8f e9       	ldi	r24, 0x9F	; 159
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 de 04 	call	0x9bc	; 0x9bc <open_next>
    112c:	08 2f       	mov	r16, r24
    112e:	4b c0       	rjmp	.+150    	; 0x11c6 <__stack+0xc7>
							}
							else if(ops.mode == loopmode)
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	09 f0       	breq	.+2      	; 0x1136 <__stack+0x37>
    1134:	48 c0       	rjmp	.+144    	; 0x11c6 <__stack+0xc7>
							{
								rewind(&mp3_handle);
    1136:	8f e8       	ldi	r24, 0x8F	; 143
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 b2 04 	call	0x964	; 0x964 <rewind>
    113e:	43 c0       	rjmp	.+134    	; 0x11c6 <__stack+0xc7>
							}
						}
						else
						{
							cbi(ops.flags, playflag);
    1140:	80 91 74 01 	lds	r24, 0x0174
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 93 74 01 	sts	0x0174, r24
    114a:	3d c0       	rjmp	.+122    	; 0x11c6 <__stack+0xc7>
				}
			}
		}
		else
		{
			disk_initialize(0);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 35 0b 	call	0x166a	; 0x166a <disk_initialize>
			f_mount(0, &fs_handle);
    1152:	65 eb       	ldi	r22, 0xB5	; 181
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <f_mount>
			
			err = open_next(&dir_handle, &mp3_handle, "/mp3");
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	51 e0       	ldi	r21, 0x01	; 1
    1160:	6f e8       	ldi	r22, 0x8F	; 143
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	8f e9       	ldi	r24, 0x9F	; 159
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 de 04 	call	0x9bc	; 0x9bc <open_next>
    116c:	08 2f       	mov	r16, r24

			if(err != 0)
    116e:	88 23       	and	r24, r24
    1170:	51 f1       	breq	.+84     	; 0x11c6 <__stack+0xc7>
			{
				LCDSetPos(1, 1);
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
				fprintf_P(&LCDstdout, PSTR("Disk Error\n"));
    117a:	5f 92       	push	r5
    117c:	4f 92       	push	r4
    117e:	ff 92       	push	r15
    1180:	ef 92       	push	r14
    1182:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
				LCDSetPos(1, 2);
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
				fprintf_P(&LCDstdout, PSTR("Error = %d\n"), err);
    118e:	80 2f       	mov	r24, r16
    1190:	99 27       	eor	r25, r25
    1192:	87 fd       	sbrc	r24, 7
    1194:	90 95       	com	r25
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	9f 92       	push	r9
    119c:	8f 92       	push	r8
    119e:	ff 92       	push	r15
    11a0:	ef 92       	push	r14
    11a2:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <fprintf_P>
				song_timer = 0;
    11a6:	10 92 de 04 	sts	0x04DE, r1
    11aa:	10 92 df 04 	sts	0x04DF, r1
    11ae:	10 92 e0 04 	sts	0x04E0, r1
    11b2:	10 92 e1 04 	sts	0x04E1, r1
    11b6:	8d b7       	in	r24, 0x3d	; 61
    11b8:	9e b7       	in	r25, 0x3e	; 62
    11ba:	0a 96       	adiw	r24, 0x0a	; 10
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	9e bf       	out	0x3e, r25	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	8d bf       	out	0x3d, r24	; 61
			}
		}

		if(song_timer >= 1220 && song_timer < 1220 + 100)
    11c6:	80 91 de 04 	lds	r24, 0x04DE
    11ca:	90 91 df 04 	lds	r25, 0x04DF
    11ce:	a0 91 e0 04 	lds	r26, 0x04E0
    11d2:	b0 91 e1 04 	lds	r27, 0x04E1
    11d6:	84 5c       	subi	r24, 0xC4	; 196
    11d8:	94 40       	sbci	r25, 0x04	; 4
    11da:	a0 40       	sbci	r26, 0x00	; 0
    11dc:	b0 40       	sbci	r27, 0x00	; 0
    11de:	e0 f0       	brcs	.+56     	; 0x1218 <__stack+0x119>
    11e0:	80 91 de 04 	lds	r24, 0x04DE
    11e4:	90 91 df 04 	lds	r25, 0x04DF
    11e8:	a0 91 e0 04 	lds	r26, 0x04E0
    11ec:	b0 91 e1 04 	lds	r27, 0x04E1
    11f0:	88 52       	subi	r24, 0x28	; 40
    11f2:	95 40       	sbci	r25, 0x05	; 5
    11f4:	a0 40       	sbci	r26, 0x00	; 0
    11f6:	b0 40       	sbci	r27, 0x00	; 0
    11f8:	78 f4       	brcc	.+30     	; 0x1218 <__stack+0x119>
		{
			song_timer = 1220 + 100;
    11fa:	a0 92 de 04 	sts	0x04DE, r10
    11fe:	b0 92 df 04 	sts	0x04DF, r11
    1202:	c0 92 e0 04 	sts	0x04E0, r12
    1206:	d0 92 e1 04 	sts	0x04E1, r13
			LCDPrintTime(ops.cur_h, ops.cur_m);
    120a:	60 91 8d 01 	lds	r22, 0x018D
    120e:	80 91 8c 01 	lds	r24, 0x018C
    1212:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCDPrintTime>
    1216:	15 c0       	rjmp	.+42     	; 0x1242 <__stack+0x143>
		}
		else if(song_timer >= 1220 + 100)
    1218:	80 91 de 04 	lds	r24, 0x04DE
    121c:	90 91 df 04 	lds	r25, 0x04DF
    1220:	a0 91 e0 04 	lds	r26, 0x04E0
    1224:	b0 91 e1 04 	lds	r27, 0x04E1
    1228:	88 52       	subi	r24, 0x28	; 40
    122a:	95 40       	sbci	r25, 0x05	; 5
    122c:	a0 40       	sbci	r26, 0x00	; 0
    122e:	b0 40       	sbci	r27, 0x00	; 0
    1230:	40 f0       	brcs	.+16     	; 0x1242 <__stack+0x143>
		{
			song_timer = 1220 + 100;
    1232:	a0 92 de 04 	sts	0x04DE, r10
    1236:	b0 92 df 04 	sts	0x04DF, r11
    123a:	c0 92 e0 04 	sts	0x04E0, r12
    123e:	d0 92 e1 04 	sts	0x04E1, r13
		}

		if(clk_timer >= 14892 / 2 && song_timer >= 1220 + 100)
    1242:	80 91 e2 04 	lds	r24, 0x04E2
    1246:	90 91 e3 04 	lds	r25, 0x04E3
    124a:	a0 91 e4 04 	lds	r26, 0x04E4
    124e:	b0 91 e5 04 	lds	r27, 0x04E5
    1252:	86 51       	subi	r24, 0x16	; 22
    1254:	9d 41       	sbci	r25, 0x1D	; 29
    1256:	a0 40       	sbci	r26, 0x00	; 0
    1258:	b0 40       	sbci	r27, 0x00	; 0
    125a:	08 f4       	brcc	.+2      	; 0x125e <__stack+0x15f>
    125c:	73 ce       	rjmp	.-794    	; 0xf44 <main+0x138>
    125e:	80 91 de 04 	lds	r24, 0x04DE
    1262:	90 91 df 04 	lds	r25, 0x04DF
    1266:	a0 91 e0 04 	lds	r26, 0x04E0
    126a:	b0 91 e1 04 	lds	r27, 0x04E1
    126e:	88 52       	subi	r24, 0x28	; 40
    1270:	95 40       	sbci	r25, 0x05	; 5
    1272:	a0 40       	sbci	r26, 0x00	; 0
    1274:	b0 40       	sbci	r27, 0x00	; 0
    1276:	08 f4       	brcc	.+2      	; 0x127a <__stack+0x17b>
    1278:	65 ce       	rjmp	.-822    	; 0xf44 <main+0x138>
		{
			clk_timer = 0;			
    127a:	10 92 e2 04 	sts	0x04E2, r1
    127e:	10 92 e3 04 	sts	0x04E3, r1
    1282:	10 92 e4 04 	sts	0x04E4, r1
    1286:	10 92 e5 04 	sts	0x04E5, r1
			LCDPrintTime(ops.cur_h, ops.cur_m);
    128a:	60 91 8d 01 	lds	r22, 0x018D
    128e:	80 91 8c 01 	lds	r24, 0x018C
    1292:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCDPrintTime>
    1296:	56 ce       	rjmp	.-852    	; 0xf44 <main+0x138>

00001298 <f_exe>:
	TCCR2B = 0b00000101;
	sbi(TIMSK2, TOIE2);
}

void f_exe(FRESULT r, const char * s)
{
    1298:	88 23       	and	r24, r24
    129a:	11 f0       	breq	.+4      	; 0x12a0 <f_exe+0x8>
		}
		fputc('\n', &serstdout);
		fputc('\n', &serstdout);
		#endif

		abort();
    129c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <abort>
    12a0:	08 95       	ret

000012a2 <__vector_11>:
ISR(BADISR_vect)
{
}

ISR(TIMER2_OVF_vect)
{
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
	ovf_cnt++;
    12c4:	80 91 e6 04 	lds	r24, 0x04E6
    12c8:	90 91 e7 04 	lds	r25, 0x04E7
    12cc:	a0 91 e8 04 	lds	r26, 0x04E8
    12d0:	b0 91 e9 04 	lds	r27, 0x04E9
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	a1 1d       	adc	r26, r1
    12d8:	b1 1d       	adc	r27, r1
    12da:	80 93 e6 04 	sts	0x04E6, r24
    12de:	90 93 e7 04 	sts	0x04E7, r25
    12e2:	a0 93 e8 04 	sts	0x04E8, r26
    12e6:	b0 93 e9 04 	sts	0x04E9, r27
	song_timer++;
    12ea:	80 91 de 04 	lds	r24, 0x04DE
    12ee:	90 91 df 04 	lds	r25, 0x04DF
    12f2:	a0 91 e0 04 	lds	r26, 0x04E0
    12f6:	b0 91 e1 04 	lds	r27, 0x04E1
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	a1 1d       	adc	r26, r1
    12fe:	b1 1d       	adc	r27, r1
    1300:	80 93 de 04 	sts	0x04DE, r24
    1304:	90 93 df 04 	sts	0x04DF, r25
    1308:	a0 93 e0 04 	sts	0x04E0, r26
    130c:	b0 93 e1 04 	sts	0x04E1, r27
	clk_timer++;
    1310:	80 91 e2 04 	lds	r24, 0x04E2
    1314:	90 91 e3 04 	lds	r25, 0x04E3
    1318:	a0 91 e4 04 	lds	r26, 0x04E4
    131c:	b0 91 e5 04 	lds	r27, 0x04E5
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	a1 1d       	adc	r26, r1
    1324:	b1 1d       	adc	r27, r1
    1326:	80 93 e2 04 	sts	0x04E2, r24
    132a:	90 93 e3 04 	sts	0x04E3, r25
    132e:	a0 93 e4 04 	sts	0x04E4, r26
    1332:	b0 93 e5 04 	sts	0x04E5, r27
	BL_timer++;
    1336:	80 91 ee 04 	lds	r24, 0x04EE
    133a:	90 91 ef 04 	lds	r25, 0x04EF
    133e:	a0 91 f0 04 	lds	r26, 0x04F0
    1342:	b0 91 f1 04 	lds	r27, 0x04F1
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	a1 1d       	adc	r26, r1
    134a:	b1 1d       	adc	r27, r1
    134c:	80 93 ee 04 	sts	0x04EE, r24
    1350:	90 93 ef 04 	sts	0x04EF, r25
    1354:	a0 93 f0 04 	sts	0x04F0, r26
    1358:	b0 93 f1 04 	sts	0x04F1, r27

	if(BL_timer >= 2441)
    135c:	80 91 ee 04 	lds	r24, 0x04EE
    1360:	90 91 ef 04 	lds	r25, 0x04EF
    1364:	a0 91 f0 04 	lds	r26, 0x04F0
    1368:	b0 91 f1 04 	lds	r27, 0x04F1
    136c:	89 58       	subi	r24, 0x89	; 137
    136e:	99 40       	sbci	r25, 0x09	; 9
    1370:	a0 40       	sbci	r26, 0x00	; 0
    1372:	b0 40       	sbci	r27, 0x00	; 0
    1374:	70 f0       	brcs	.+28     	; 0x1392 <__vector_11+0xf0>
	{
		BL_mode = 0;
    1376:	10 92 f2 04 	sts	0x04F2, r1
		BL_timer = 2441;
    137a:	89 e8       	ldi	r24, 0x89	; 137
    137c:	99 e0       	ldi	r25, 0x09	; 9
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	80 93 ee 04 	sts	0x04EE, r24
    1386:	90 93 ef 04 	sts	0x04EF, r25
    138a:	a0 93 f0 04 	sts	0x04F0, r26
    138e:	b0 93 f1 04 	sts	0x04F1, r27
	}

	if(BL_mode == 0 && fade_timer >= BL_off_speed)
    1392:	80 91 f2 04 	lds	r24, 0x04F2
    1396:	88 23       	and	r24, r24
    1398:	a1 f4       	brne	.+40     	; 0x13c2 <__vector_11+0x120>
    139a:	80 91 ea 04 	lds	r24, 0x04EA
    139e:	90 91 eb 04 	lds	r25, 0x04EB
    13a2:	a0 91 ec 04 	lds	r26, 0x04EC
    13a6:	b0 91 ed 04 	lds	r27, 0x04ED
    13aa:	02 97       	sbiw	r24, 0x02	; 2
    13ac:	a1 05       	cpc	r26, r1
    13ae:	b1 05       	cpc	r27, r1
    13b0:	40 f0       	brcs	.+16     	; 0x13c2 <__vector_11+0x120>
	{
		if(OCR2A > 0)
    13b2:	80 91 b3 00 	lds	r24, 0x00B3
    13b6:	88 23       	and	r24, r24
    13b8:	c9 f0       	breq	.+50     	; 0x13ec <__vector_11+0x14a>
		{
			OCR2A--;
    13ba:	80 91 b3 00 	lds	r24, 0x00B3
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <__vector_11+0x146>
		}
		fade_timer = 0;
	}
	else if(BL_mode == 1 && fade_timer >= BL_on_speed)
    13c2:	80 91 f2 04 	lds	r24, 0x04F2
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	d1 f4       	brne	.+52     	; 0x13fe <__vector_11+0x15c>
    13ca:	80 91 ea 04 	lds	r24, 0x04EA
    13ce:	90 91 eb 04 	lds	r25, 0x04EB
    13d2:	a0 91 ec 04 	lds	r26, 0x04EC
    13d6:	b0 91 ed 04 	lds	r27, 0x04ED
	{
		if(OCR2A < 255)
    13da:	80 91 b3 00 	lds	r24, 0x00B3
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	29 f0       	breq	.+10     	; 0x13ec <__vector_11+0x14a>
		{
			OCR2A++;
    13e2:	80 91 b3 00 	lds	r24, 0x00B3
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	80 93 b3 00 	sts	0x00B3, r24
		}
		fade_timer = 0;
    13ec:	10 92 ea 04 	sts	0x04EA, r1
    13f0:	10 92 eb 04 	sts	0x04EB, r1
    13f4:	10 92 ec 04 	sts	0x04EC, r1
    13f8:	10 92 ed 04 	sts	0x04ED, r1
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <__vector_11+0x182>
	}
	else
	{
		fade_timer++;
    13fe:	80 91 ea 04 	lds	r24, 0x04EA
    1402:	90 91 eb 04 	lds	r25, 0x04EB
    1406:	a0 91 ec 04 	lds	r26, 0x04EC
    140a:	b0 91 ed 04 	lds	r27, 0x04ED
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	a1 1d       	adc	r26, r1
    1412:	b1 1d       	adc	r27, r1
    1414:	80 93 ea 04 	sts	0x04EA, r24
    1418:	90 93 eb 04 	sts	0x04EB, r25
    141c:	a0 93 ec 04 	sts	0x04EC, r26
    1420:	b0 93 ed 04 	sts	0x04ED, r27
	}

	disk_timerproc();
    1424:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <disk_timerproc>
}
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <SELECT>:


/* Port Controls  (Platform dependent) */
/* Frank: EDIT ME, This is for the CS pin on the card */
void SELECT()
{
    144a:	8d b5       	in	r24, 0x2d	; 45
    144c:	81 60       	ori	r24, 0x01	; 1
    144e:	8d bd       	out	0x2d, r24	; 45
	SPSR |= _BV(SPI2X);
	MMC_PORT &= ~_BV(MMC_CS);
    1450:	2b 98       	cbi	0x05, 3	; 5
}
    1452:	08 95       	ret

00001454 <DESELECT>:

void DESELECT()
{
    1454:	2b 9a       	sbi	0x05, 3	; 5
	MMC_PORT |= _BV(MMC_CS);
	SPSR &= ~_BV(SPI2X);
    1456:	8d b5       	in	r24, 0x2d	; 45
    1458:	8e 7f       	andi	r24, 0xFE	; 254
    145a:	8d bd       	out	0x2d, r24	; 45
}
    145c:	08 95       	ret

0000145e <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    145e:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 10;
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	80 93 d7 04 	sts	0x04D7, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    146a:	0d b4       	in	r0, 0x2d	; 45
    146c:	07 fe       	sbrs	r0, 7
    146e:	fd cf       	rjmp	.-6      	; 0x146a <rcvr_datablock+0xc>
	return SPDR;
    1470:	8e b5       	in	r24, 0x2e	; 46


	Timer1 = 10;
	do {							// Wait for data packet in timeout of 100ms
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    1472:	8f 3f       	cpi	r24, 0xFF	; 255
    1474:	29 f4       	brne	.+10     	; 0x1480 <rcvr_datablock+0x22>
    1476:	80 91 d7 04 	lds	r24, 0x04D7
    147a:	88 23       	and	r24, r24
    147c:	a9 f7       	brne	.-22     	; 0x1468 <rcvr_datablock+0xa>
    147e:	2e c0       	rjmp	.+92     	; 0x14dc <rcvr_datablock+0x7e>
	if(token != 0xFE) return FALSE;	// If not valid data token, retutn with error
    1480:	8e 3f       	cpi	r24, 0xFE	; 254
    1482:	61 f5       	brne	.+88     	; 0x14dc <rcvr_datablock+0x7e>

	do {							// Receive the data block into buffer
		rcvr_spi_m(buff++);
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	9e bd       	out	0x2e, r25	; 46
    1488:	0d b4       	in	r0, 0x2d	; 45
    148a:	07 fe       	sbrs	r0, 7
    148c:	fd cf       	rjmp	.-6      	; 0x1488 <rcvr_datablock+0x2a>
    148e:	8e b5       	in	r24, 0x2e	; 46
    1490:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    1492:	9e bd       	out	0x2e, r25	; 46
    1494:	0d b4       	in	r0, 0x2d	; 45
    1496:	07 fe       	sbrs	r0, 7
    1498:	fd cf       	rjmp	.-6      	; 0x1494 <rcvr_datablock+0x36>
    149a:	8e b5       	in	r24, 0x2e	; 46
    149c:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    149e:	9e bd       	out	0x2e, r25	; 46
    14a0:	0d b4       	in	r0, 0x2d	; 45
    14a2:	07 fe       	sbrs	r0, 7
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <rcvr_datablock+0x42>
    14a6:	8e b5       	in	r24, 0x2e	; 46
    14a8:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    14aa:	9e bd       	out	0x2e, r25	; 46
    14ac:	0d b4       	in	r0, 0x2d	; 45
    14ae:	07 fe       	sbrs	r0, 7
    14b0:	fd cf       	rjmp	.-6      	; 0x14ac <rcvr_datablock+0x4e>
    14b2:	8e b5       	in	r24, 0x2e	; 46
    14b4:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    14b6:	64 50       	subi	r22, 0x04	; 4
    14b8:	70 40       	sbci	r23, 0x00	; 0
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <rcvr_datablock+0x62>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    14bc:	34 96       	adiw	r30, 0x04	; 4
    14be:	e3 cf       	rjmp	.-58     	; 0x1486 <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    14c4:	0d b4       	in	r0, 0x2d	; 45
    14c6:	07 fe       	sbrs	r0, 7
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <rcvr_datablock+0x66>
	return SPDR;
    14ca:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    14d0:	0d b4       	in	r0, 0x2d	; 45
    14d2:	07 fe       	sbrs	r0, 7
    14d4:	fd cf       	rjmp	.-6      	; 0x14d0 <rcvr_datablock+0x72>
	return SPDR;
    14d6:	8e b5       	in	r24, 0x2e	; 46
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						// Discard CRC
	rcvr_spi();

	return TRUE;					// Return with success
    14dc:	80 e0       	ldi	r24, 0x00	; 0
}
    14de:	08 95       	ret

000014e0 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    14e0:	fc 01       	movw	r30, r24
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    14e2:	82 e3       	ldi	r24, 0x32	; 50
    14e4:	80 93 d8 04 	sts	0x04D8, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    14ec:	0d b4       	in	r0, 0x2d	; 45
    14ee:	07 fe       	sbrs	r0, 7
    14f0:	fd cf       	rjmp	.-6      	; 0x14ec <xmit_datablock+0xc>
	return SPDR;
    14f2:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    14f8:	0d b4       	in	r0, 0x2d	; 45
    14fa:	07 fe       	sbrs	r0, 7
    14fc:	fd cf       	rjmp	.-6      	; 0x14f8 <xmit_datablock+0x18>
	return SPDR;
    14fe:	8e b5       	in	r24, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    1500:	8f 3f       	cpi	r24, 0xFF	; 255
    1502:	31 f0       	breq	.+12     	; 0x1510 <xmit_datablock+0x30>
    1504:	80 91 d8 04 	lds	r24, 0x04D8
    1508:	88 23       	and	r24, r24
    150a:	a9 f7       	brne	.-22     	; 0x14f6 <xmit_datablock+0x16>
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	2e c0       	rjmp	.+92     	; 0x156c <xmit_datablock+0x8c>
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;

	xmit_spi(token);					/* Xmit data token */
    1510:	6e bd       	out	0x2e, r22	; 46
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fe       	sbrs	r0, 7
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <xmit_datablock+0x32>
	if (token != 0xFD) {	/* Is data token */
    1518:	6d 3f       	cpi	r22, 0xFD	; 253
    151a:	11 f4       	brne	.+4      	; 0x1520 <xmit_datablock+0x40>
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	26 c0       	rjmp	.+76     	; 0x156c <xmit_datablock+0x8c>
    1520:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    1522:	80 81       	ld	r24, Z
    1524:	8e bd       	out	0x2e, r24	; 46
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	fd cf       	rjmp	.-6      	; 0x1526 <xmit_datablock+0x46>
			xmit_spi(*buff++);
    152c:	81 81       	ldd	r24, Z+1	; 0x01
    152e:	8e bd       	out	0x2e, r24	; 46
    1530:	0d b4       	in	r0, 0x2d	; 45
    1532:	07 fe       	sbrs	r0, 7
    1534:	fd cf       	rjmp	.-6      	; 0x1530 <xmit_datablock+0x50>
		} while (--wc);
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	11 f0       	breq	.+4      	; 0x153e <xmit_datablock+0x5e>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    153a:	32 96       	adiw	r30, 0x02	; 2
    153c:	f2 cf       	rjmp	.-28     	; 0x1522 <xmit_datablock+0x42>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	8e bd       	out	0x2e, r24	; 46
    1542:	0d b4       	in	r0, 0x2d	; 45
    1544:	07 fe       	sbrs	r0, 7
    1546:	fd cf       	rjmp	.-6      	; 0x1542 <xmit_datablock+0x62>
		xmit_spi(0xFF);
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	0d b4       	in	r0, 0x2d	; 45
    154e:	07 fe       	sbrs	r0, 7
    1550:	fd cf       	rjmp	.-6      	; 0x154c <xmit_datablock+0x6c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1556:	0d b4       	in	r0, 0x2d	; 45
    1558:	07 fe       	sbrs	r0, 7
    155a:	fd cf       	rjmp	.-6      	; 0x1556 <xmit_datablock+0x76>
	return SPDR;
    155c:	8e b5       	in	r24, 0x2e	; 46
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	8f 71       	andi	r24, 0x1F	; 31
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	09 f0       	breq	.+2      	; 0x1568 <xmit_datablock+0x88>
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
    156c:	89 2f       	mov	r24, r25
    156e:	08 95       	ret

00001570 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	d8 2e       	mov	r13, r24
    157c:	7a 01       	movw	r14, r20
    157e:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1580:	87 ff       	sbrs	r24, 7
    1582:	0c c0       	rjmp	.+24     	; 0x159c <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	87 e7       	ldi	r24, 0x77	; 119
    158e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
		if (res > 1) return res;
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	08 f0       	brcs	.+2      	; 0x1598 <send_cmd+0x28>
    1596:	63 c0       	rjmp	.+198    	; 0x165e <send_cmd+0xee>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1598:	8f e7       	ldi	r24, 0x7F	; 127
    159a:	d8 22       	and	r13, r24
	MMC_PORT &= ~_BV(MMC_CS);
}

void DESELECT()
{
	MMC_PORT |= _BV(MMC_CS);
    159c:	2b 9a       	sbi	0x05, 3	; 5
	SPSR &= ~_BV(SPI2X);
    159e:	8d b5       	in	r24, 0x2d	; 45
    15a0:	8e 7f       	andi	r24, 0xFE	; 254
    15a2:	8d bd       	out	0x2d, r24	; 45

/* Port Controls  (Platform dependent) */
/* Frank: EDIT ME, This is for the CS pin on the card */
void SELECT()
{
	SPSR |= _BV(SPI2X);
    15a4:	8d b5       	in	r24, 0x2d	; 45
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	8d bd       	out	0x2d, r24	; 45
	MMC_PORT &= ~_BV(MMC_CS);
    15aa:	2b 98       	cbi	0x05, 3	; 5
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    15ac:	82 e3       	ldi	r24, 0x32	; 50
    15ae:	80 93 d8 04 	sts	0x04D8, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    15b6:	0d b4       	in	r0, 0x2d	; 45
    15b8:	07 fe       	sbrs	r0, 7
    15ba:	fd cf       	rjmp	.-6      	; 0x15b6 <send_cmd+0x46>
	return SPDR;
    15bc:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    15c2:	0d b4       	in	r0, 0x2d	; 45
    15c4:	07 fe       	sbrs	r0, 7
    15c6:	fd cf       	rjmp	.-6      	; 0x15c2 <send_cmd+0x52>
	return SPDR;
    15c8:	8e b5       	in	r24, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	31 f0       	breq	.+12     	; 0x15da <send_cmd+0x6a>
    15ce:	80 91 d8 04 	lds	r24, 0x04D8
    15d2:	88 23       	and	r24, r24
    15d4:	a9 f7       	brne	.-22     	; 0x15c0 <send_cmd+0x50>
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	42 c0       	rjmp	.+132    	; 0x165e <send_cmd+0xee>
	DESELECT();
	SELECT();
	if (wait_ready() != 0xFF) return 0xFF;

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    15da:	de bc       	out	0x2e, r13	; 46
    15dc:	0d b4       	in	r0, 0x2d	; 45
    15de:	07 fe       	sbrs	r0, 7
    15e0:	fd cf       	rjmp	.-6      	; 0x15dc <send_cmd+0x6c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    15e2:	81 2f       	mov	r24, r17
    15e4:	99 27       	eor	r25, r25
    15e6:	aa 27       	eor	r26, r26
    15e8:	bb 27       	eor	r27, r27
    15ea:	8e bd       	out	0x2e, r24	; 46
    15ec:	0d b4       	in	r0, 0x2d	; 45
    15ee:	07 fe       	sbrs	r0, 7
    15f0:	fd cf       	rjmp	.-6      	; 0x15ec <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    15f2:	c8 01       	movw	r24, r16
    15f4:	aa 27       	eor	r26, r26
    15f6:	bb 27       	eor	r27, r27
    15f8:	8e bd       	out	0x2e, r24	; 46
    15fa:	0d b4       	in	r0, 0x2d	; 45
    15fc:	07 fe       	sbrs	r0, 7
    15fe:	fd cf       	rjmp	.-6      	; 0x15fa <send_cmd+0x8a>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1600:	bb 27       	eor	r27, r27
    1602:	a1 2f       	mov	r26, r17
    1604:	90 2f       	mov	r25, r16
    1606:	8f 2d       	mov	r24, r15
    1608:	8e bd       	out	0x2e, r24	; 46
    160a:	0d b4       	in	r0, 0x2d	; 45
    160c:	07 fe       	sbrs	r0, 7
    160e:	fd cf       	rjmp	.-6      	; 0x160a <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1610:	ee bc       	out	0x2e, r14	; 46
    1612:	0d b4       	in	r0, 0x2d	; 45
    1614:	07 fe       	sbrs	r0, 7
    1616:	fd cf       	rjmp	.-6      	; 0x1612 <send_cmd+0xa2>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1618:	80 e4       	ldi	r24, 0x40	; 64
    161a:	d8 16       	cp	r13, r24
    161c:	11 f4       	brne	.+4      	; 0x1622 <send_cmd+0xb2>
    161e:	85 e9       	ldi	r24, 0x95	; 149
    1620:	06 c0       	rjmp	.+12     	; 0x162e <send_cmd+0xbe>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1622:	88 e4       	ldi	r24, 0x48	; 72
    1624:	d8 16       	cp	r13, r24
    1626:	11 f4       	brne	.+4      	; 0x162c <send_cmd+0xbc>
    1628:	87 e8       	ldi	r24, 0x87	; 135
    162a:	01 c0       	rjmp	.+2      	; 0x162e <send_cmd+0xbe>
    162c:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    162e:	8e bd       	out	0x2e, r24	; 46
    1630:	0d b4       	in	r0, 0x2d	; 45
    1632:	07 fe       	sbrs	r0, 7
    1634:	fd cf       	rjmp	.-6      	; 0x1630 <send_cmd+0xc0>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    1636:	8c e4       	ldi	r24, 0x4C	; 76
    1638:	d8 16       	cp	r13, r24
    163a:	31 f4       	brne	.+12     	; 0x1648 <send_cmd+0xd8>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1640:	0d b4       	in	r0, 0x2d	; 45
    1642:	07 fe       	sbrs	r0, 7
    1644:	fd cf       	rjmp	.-6      	; 0x1640 <send_cmd+0xd0>
	return SPDR;
    1646:	8e b5       	in	r24, 0x2e	; 46
    1648:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    164a:	2f ef       	ldi	r18, 0xFF	; 255
    164c:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    164e:	0d b4       	in	r0, 0x2d	; 45
    1650:	07 fe       	sbrs	r0, 7
    1652:	fd cf       	rjmp	.-6      	; 0x164e <send_cmd+0xde>
	return SPDR;
    1654:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    1656:	87 ff       	sbrs	r24, 7
    1658:	02 c0       	rjmp	.+4      	; 0x165e <send_cmd+0xee>
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	b9 f7       	brne	.-18     	; 0x164c <send_cmd+0xdc>

	return res;			/* Return with the response value */
}
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	08 95       	ret

0000166a <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <disk_initialize+0xe>
    1678:	00 d0       	rcall	.+0      	; 0x167a <disk_initialize+0x10>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    167e:	88 23       	and	r24, r24
    1680:	11 f0       	breq	.+4      	; 0x1686 <disk_initialize+0x1c>
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	b1 c0       	rjmp	.+354    	; 0x17e8 <disk_initialize+0x17e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    1686:	80 91 4e 01 	lds	r24, 0x014E
    168a:	81 fd       	sbrc	r24, 1
    168c:	ab c0       	rjmp	.+342    	; 0x17e4 <disk_initialize+0x17a>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	MMC_PORT |= _BV(MMC_CS);
    168e:	2b 9a       	sbi	0x05, 3	; 5
	MMC_DIR |= _BV(MMC_CS);
    1690:	23 9a       	sbi	0x04, 3	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1692:	80 e6       	ldi	r24, 0x60	; 96
    1694:	9a ee       	ldi	r25, 0xEA	; 234
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <disk_initialize+0x2c>
    169a:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    16a0:	0d b4       	in	r0, 0x2d	; 45
    16a2:	07 fe       	sbrs	r0, 7
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <disk_initialize+0x36>
	return SPDR;
    16a6:	2e b5       	in	r18, 0x2e	; 46

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	c9 f7       	brne	.-14     	; 0x169e <disk_initialize+0x34>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	80 e4       	ldi	r24, 0x40	; 64
    16b6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <disk_initialize+0x56>
    16be:	7e c0       	rjmp	.+252    	; 0x17bc <disk_initialize+0x152>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    16c0:	84 e6       	ldi	r24, 0x64	; 100
    16c2:	80 93 d7 04 	sts	0x04D7, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    16c6:	4a ea       	ldi	r20, 0xAA	; 170
    16c8:	51 e0       	ldi	r21, 0x01	; 1
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	88 e4       	ldi	r24, 0x48	; 72
    16d0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	09 f0       	breq	.+2      	; 0x16da <disk_initialize+0x70>
    16d8:	4a c0       	rjmp	.+148    	; 0x176e <disk_initialize+0x104>
    16da:	7e 01       	movw	r14, r28
    16dc:	08 94       	sec
    16de:	e1 1c       	adc	r14, r1
    16e0:	f1 1c       	adc	r15, r1
    16e2:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    16e4:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    16e6:	9e 01       	movw	r18, r28
    16e8:	2b 5f       	subi	r18, 0xFB	; 251
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    16ec:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    16ee:	0d b4       	in	r0, 0x2d	; 45
    16f0:	07 fe       	sbrs	r0, 7
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <disk_initialize+0x84>
	return SPDR;
    16f4:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    16f6:	f8 01       	movw	r30, r16
    16f8:	81 93       	st	Z+, r24
    16fa:	8f 01       	movw	r16, r30
    16fc:	e2 17       	cp	r30, r18
    16fe:	f3 07       	cpc	r31, r19
    1700:	a9 f7       	brne	.-22     	; 0x16ec <disk_initialize+0x82>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	09 f0       	breq	.+2      	; 0x170a <disk_initialize+0xa0>
    1708:	59 c0       	rjmp	.+178    	; 0x17bc <disk_initialize+0x152>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	8a 3a       	cpi	r24, 0xAA	; 170
    170e:	09 f0       	breq	.+2      	; 0x1712 <disk_initialize+0xa8>
    1710:	55 c0       	rjmp	.+170    	; 0x17bc <disk_initialize+0x152>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1712:	80 91 d7 04 	lds	r24, 0x04D7
    1716:	88 23       	and	r24, r24
    1718:	49 f0       	breq	.+18     	; 0x172c <disk_initialize+0xc2>
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	70 e4       	ldi	r23, 0x40	; 64
    1722:	89 ee       	ldi	r24, 0xE9	; 233
    1724:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1728:	88 23       	and	r24, r24
    172a:	99 f7       	brne	.-26     	; 0x1712 <disk_initialize+0xa8>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    172c:	80 91 d7 04 	lds	r24, 0x04D7
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <disk_initialize+0xcc>
    1734:	43 c0       	rjmp	.+134    	; 0x17bc <disk_initialize+0x152>
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	8a e7       	ldi	r24, 0x7A	; 122
    1740:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1744:	88 23       	and	r24, r24
    1746:	d1 f5       	brne	.+116    	; 0x17bc <disk_initialize+0x152>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    174c:	0d b4       	in	r0, 0x2d	; 45
    174e:	07 fe       	sbrs	r0, 7
    1750:	fd cf       	rjmp	.-6      	; 0x174c <disk_initialize+0xe2>
	return SPDR;
    1752:	8e b5       	in	r24, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    1754:	f7 01       	movw	r30, r14
    1756:	81 93       	st	Z+, r24
    1758:	7f 01       	movw	r14, r30
    175a:	e0 17       	cp	r30, r16
    175c:	f1 07       	cpc	r31, r17
    175e:	a9 f7       	brne	.-22     	; 0x174a <disk_initialize+0xe0>
					ty = (ocr[0] & 0x40) ? 12 : 4;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	86 fd       	sbrc	r24, 6
    1764:	02 c0       	rjmp	.+4      	; 0x176a <disk_initialize+0x100>
    1766:	14 e0       	ldi	r17, 0x04	; 4
    1768:	2a c0       	rjmp	.+84     	; 0x17be <disk_initialize+0x154>
    176a:	1c e0       	ldi	r17, 0x0C	; 12
    176c:	28 c0       	rjmp	.+80     	; 0x17be <disk_initialize+0x154>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	89 ee       	ldi	r24, 0xE9	; 233
    1778:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	18 f0       	brcs	.+6      	; 0x1786 <disk_initialize+0x11c>
    1780:	01 e4       	ldi	r16, 0x41	; 65
    1782:	11 e0       	ldi	r17, 0x01	; 1
    1784:	02 c0       	rjmp	.+4      	; 0x178a <disk_initialize+0x120>
    1786:	09 ee       	ldi	r16, 0xE9	; 233
    1788:	12 e0       	ldi	r17, 0x02	; 2
				ty = 2; cmd = ACMD41;	/* SDSC */
			} else {
				ty = 1; cmd = CMD1;		/* MMC */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    178a:	80 91 d7 04 	lds	r24, 0x04D7
    178e:	88 23       	and	r24, r24
    1790:	49 f0       	breq	.+18     	; 0x17a4 <disk_initialize+0x13a>
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 2f       	mov	r24, r16
    179c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    17a0:	88 23       	and	r24, r24
    17a2:	99 f7       	brne	.-26     	; 0x178a <disk_initialize+0x120>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    17a4:	80 91 d7 04 	lds	r24, 0x04D7
    17a8:	88 23       	and	r24, r24
    17aa:	41 f0       	breq	.+16     	; 0x17bc <disk_initialize+0x152>
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	52 e0       	ldi	r21, 0x02	; 2
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 e5       	ldi	r24, 0x50	; 80
    17b6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    17ba:	81 11       	cpse	r24, r1
    17bc:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    17be:	10 93 d9 04 	sts	0x04D9, r17
	MMC_PORT &= ~_BV(MMC_CS);
}

void DESELECT()
{
	MMC_PORT |= _BV(MMC_CS);
    17c2:	2b 9a       	sbi	0x05, 3	; 5
	SPSR &= ~_BV(SPI2X);
    17c4:	8d b5       	in	r24, 0x2d	; 45
    17c6:	8e 7f       	andi	r24, 0xFE	; 254
    17c8:	8d bd       	out	0x2d, r24	; 45
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    17ce:	0d b4       	in	r0, 0x2d	; 45
    17d0:	07 fe       	sbrs	r0, 7
    17d2:	fd cf       	rjmp	.-6      	; 0x17ce <disk_initialize+0x164>
	return SPDR;
    17d4:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	release_spi();

	if (ty) {			/* Initialization succeded */
    17d6:	11 23       	and	r17, r17
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <disk_initialize+0x17a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    17da:	80 91 4e 01 	lds	r24, 0x014E
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	80 93 4e 01 	sts	0x014E, r24
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    17e4:	80 91 4e 01 	lds	r24, 0x014E
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	08 95       	ret

000017fe <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    17fe:	88 23       	and	r24, r24
    1800:	11 f0       	breq	.+4      	; 0x1806 <disk_status+0x8>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	08 95       	ret
	if (drv) return STA_NOINIT;		/* Supports only single drive */
	return Stat;
    1806:	80 91 4e 01 	lds	r24, 0x014E
}
    180a:	08 95       	ret

0000180c <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    180c:	0f 93       	push	r16
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    1814:	88 23       	and	r24, r24
    1816:	09 f0       	breq	.+2      	; 0x181a <disk_read+0xe>
    1818:	4f c0       	rjmp	.+158    	; 0x18b8 <disk_read+0xac>
    181a:	00 23       	and	r16, r16
    181c:	09 f4       	brne	.+2      	; 0x1820 <disk_read+0x14>
    181e:	4c c0       	rjmp	.+152    	; 0x18b8 <disk_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1820:	80 91 4e 01 	lds	r24, 0x014E
    1824:	80 ff       	sbrs	r24, 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <disk_read+0x20>
    1828:	03 e0       	ldi	r16, 0x03	; 3
    182a:	47 c0       	rjmp	.+142    	; 0x18ba <disk_read+0xae>

	if (!(CardType & 8)) sector *= 512;	/* Convert to byte address if needed */
    182c:	80 91 d9 04 	lds	r24, 0x04D9
    1830:	83 fd       	sbrc	r24, 3
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <disk_read+0x36>
    1834:	69 e0       	ldi	r22, 0x09	; 9
    1836:	22 0f       	add	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	44 1f       	adc	r20, r20
    183c:	55 1f       	adc	r21, r21
    183e:	6a 95       	dec	r22
    1840:	d1 f7       	brne	.-12     	; 0x1836 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    1842:	01 30       	cpi	r16, 0x01	; 1
    1844:	89 f4       	brne	.+34     	; 0x1868 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    1846:	ba 01       	movw	r22, r20
    1848:	a9 01       	movw	r20, r18
    184a:	81 e5       	ldi	r24, 0x51	; 81
    184c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1850:	88 23       	and	r24, r24
    1852:	21 f5       	brne	.+72     	; 0x189c <disk_read+0x90>
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	72 e0       	ldi	r23, 0x02	; 2
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    185e:	00 e0       	ldi	r16, 0x00	; 0
    1860:	88 23       	and	r24, r24
    1862:	e1 f4       	brne	.+56     	; 0x189c <disk_read+0x90>
    1864:	01 e0       	ldi	r16, 0x01	; 1
    1866:	1a c0       	rjmp	.+52     	; 0x189c <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    1868:	ba 01       	movw	r22, r20
    186a:	a9 01       	movw	r20, r18
    186c:	82 e5       	ldi	r24, 0x52	; 82
    186e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1872:	88 23       	and	r24, r24
    1874:	99 f4       	brne	.+38     	; 0x189c <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	72 e0       	ldi	r23, 0x02	; 2
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    1880:	88 23       	and	r24, r24
    1882:	29 f0       	breq	.+10     	; 0x188e <disk_read+0x82>
				buff += 512;
			} while (--count);
    1884:	01 50       	subi	r16, 0x01	; 1
    1886:	19 f0       	breq	.+6      	; 0x188e <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    1888:	c0 50       	subi	r28, 0x00	; 0
    188a:	de 4f       	sbci	r29, 0xFE	; 254
    188c:	f4 cf       	rjmp	.-24     	; 0x1876 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	8c e4       	ldi	r24, 0x4C	; 76
    1898:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
	MMC_PORT &= ~_BV(MMC_CS);
}

void DESELECT()
{
	MMC_PORT |= _BV(MMC_CS);
    189c:	2b 9a       	sbi	0x05, 3	; 5
	SPSR &= ~_BV(SPI2X);
    189e:	8d b5       	in	r24, 0x2d	; 45
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	8d bd       	out	0x2d, r24	; 45
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    18a8:	0d b4       	in	r0, 0x2d	; 45
    18aa:	07 fe       	sbrs	r0, 7
    18ac:	fd cf       	rjmp	.-6      	; 0x18a8 <disk_read+0x9c>
	return SPDR;
    18ae:	8e b5       	in	r24, 0x2e	; 46
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
    18b0:	00 23       	and	r16, r16
    18b2:	19 f0       	breq	.+6      	; 0x18ba <disk_read+0xae>
    18b4:	01 e0       	ldi	r16, 0x01	; 1
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <disk_read+0xae>
    18b8:	04 e0       	ldi	r16, 0x04	; 4
}
    18ba:	80 2f       	mov	r24, r16
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	eb 01       	movw	r28, r22
    18d4:	69 01       	movw	r12, r18
    18d6:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    18d8:	88 23       	and	r24, r24
    18da:	09 f0       	breq	.+2      	; 0x18de <disk_write+0x1a>
    18dc:	5d c0       	rjmp	.+186    	; 0x1998 <disk_write+0xd4>
    18de:	00 23       	and	r16, r16
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <disk_write+0x20>
    18e2:	5a c0       	rjmp	.+180    	; 0x1998 <disk_write+0xd4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    18e4:	80 91 4e 01 	lds	r24, 0x014E
    18e8:	80 ff       	sbrs	r24, 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <disk_write+0x2c>
    18ec:	03 e0       	ldi	r16, 0x03	; 3
    18ee:	55 c0       	rjmp	.+170    	; 0x199a <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    18f0:	80 91 4e 01 	lds	r24, 0x014E
    18f4:	82 ff       	sbrs	r24, 2
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <disk_write+0x38>
    18f8:	02 e0       	ldi	r16, 0x02	; 2
    18fa:	4f c0       	rjmp	.+158    	; 0x199a <disk_write+0xd6>

	if (!(CardType & 8)) sector *= 512;	/* Convert to byte address if needed */
    18fc:	80 91 d9 04 	lds	r24, 0x04D9
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	83 fd       	sbrc	r24, 3
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <disk_write+0x50>
    1906:	79 e0       	ldi	r23, 0x09	; 9
    1908:	cc 0c       	add	r12, r12
    190a:	dd 1c       	adc	r13, r13
    190c:	ee 1c       	adc	r14, r14
    190e:	ff 1c       	adc	r15, r15
    1910:	7a 95       	dec	r23
    1912:	d1 f7       	brne	.-12     	; 0x1908 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
    1914:	01 30       	cpi	r16, 0x01	; 1
    1916:	69 f4       	brne	.+26     	; 0x1932 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    1918:	b7 01       	movw	r22, r14
    191a:	a6 01       	movw	r20, r12
    191c:	88 e5       	ldi	r24, 0x58	; 88
    191e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1922:	88 23       	and	r24, r24
    1924:	59 f5       	brne	.+86     	; 0x197c <disk_write+0xb8>
    1926:	6e ef       	ldi	r22, 0xFE	; 254
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xmit_datablock>
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	22 c0       	rjmp	.+68     	; 0x1976 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & 6) send_cmd(ACMD23, count);
    1932:	86 70       	andi	r24, 0x06	; 6
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	89 2b       	or	r24, r25
    1938:	39 f0       	breq	.+14     	; 0x1948 <disk_write+0x84>
    193a:	40 2f       	mov	r20, r16
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	87 ed       	ldi	r24, 0xD7	; 215
    1944:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1948:	b7 01       	movw	r22, r14
    194a:	a6 01       	movw	r20, r12
    194c:	89 e5       	ldi	r24, 0x59	; 89
    194e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1952:	88 23       	and	r24, r24
    1954:	99 f4       	brne	.+38     	; 0x197c <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1956:	6c ef       	ldi	r22, 0xFC	; 252
    1958:	ce 01       	movw	r24, r28
    195a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xmit_datablock>
    195e:	88 23       	and	r24, r24
    1960:	29 f0       	breq	.+10     	; 0x196c <disk_write+0xa8>
				buff += 512;
			} while (--count);
    1962:	01 50       	subi	r16, 0x01	; 1
    1964:	19 f0       	breq	.+6      	; 0x196c <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & 6) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    1966:	c0 50       	subi	r28, 0x00	; 0
    1968:	de 4f       	sbci	r29, 0xFE	; 254
    196a:	f5 cf       	rjmp	.-22     	; 0x1956 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    196c:	6d ef       	ldi	r22, 0xFD	; 253
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xmit_datablock>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <disk_write+0xb8>
    197a:	01 e0       	ldi	r16, 0x01	; 1
	MMC_PORT &= ~_BV(MMC_CS);
}

void DESELECT()
{
	MMC_PORT |= _BV(MMC_CS);
    197c:	2b 9a       	sbi	0x05, 3	; 5
	SPSR &= ~_BV(SPI2X);
    197e:	8d b5       	in	r24, 0x2d	; 45
    1980:	8e 7f       	andi	r24, 0xFE	; 254
    1982:	8d bd       	out	0x2d, r24	; 45
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1988:	0d b4       	in	r0, 0x2d	; 45
    198a:	07 fe       	sbrs	r0, 7
    198c:	fd cf       	rjmp	.-6      	; 0x1988 <disk_write+0xc4>
	return SPDR;
    198e:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
    1990:	00 23       	and	r16, r16
    1992:	19 f0       	breq	.+6      	; 0x199a <disk_write+0xd6>
    1994:	01 e0       	ldi	r16, 0x01	; 1
    1996:	01 c0       	rjmp	.+2      	; 0x199a <disk_write+0xd6>
    1998:	04 e0       	ldi	r16, 0x04	; 4
}
    199a:	80 2f       	mov	r24, r16
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	08 95       	ret

000019ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	60 97       	sbiw	r28, 0x10	; 16
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    19c8:	88 23       	and	r24, r24
    19ca:	09 f0       	breq	.+2      	; 0x19ce <disk_ioctl+0x22>
    19cc:	a4 c1       	rjmp	.+840    	; 0x1d16 <disk_ioctl+0x36a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    19ce:	64 30       	cpi	r22, 0x04	; 4
    19d0:	b1 f4       	brne	.+44     	; 0x19fe <disk_ioctl+0x52>
		switch (*ptr) {
    19d2:	fa 01       	movw	r30, r20
    19d4:	80 81       	ld	r24, Z
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <disk_ioctl+0x3a>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	70 f0       	brcs	.+28     	; 0x19fa <disk_ioctl+0x4e>
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <disk_ioctl+0x38>
    19e2:	99 c1       	rjmp	.+818    	; 0x1d16 <disk_ioctl+0x36a>
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <disk_ioctl+0x48>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	MMC_PORT |= _BV(MMC_CS);
    19e6:	2b 9a       	sbi	0x05, 3	; 5
	MMC_DIR |= _BV(MMC_CS);
    19e8:	23 9a       	sbi	0x04, 3	; 4
    19ea:	80 e6       	ldi	r24, 0x60	; 96
    19ec:	9a ee       	ldi	r25, 0xEA	; 234
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <disk_ioctl+0x42>
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <disk_ioctl+0x4e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	fa 01       	movw	r30, r20
    19f8:	81 83       	std	Z+1, r24	; 0x01
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	8d c1       	rjmp	.+794    	; 0x1d18 <disk_ioctl+0x36c>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    19fe:	80 91 4e 01 	lds	r24, 0x014E
    1a02:	80 ff       	sbrs	r24, 0
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <disk_ioctl+0x5e>
    1a06:	93 e0       	ldi	r25, 0x03	; 3
    1a08:	87 c1       	rjmp	.+782    	; 0x1d18 <disk_ioctl+0x36c>

		switch (ctrl) {
    1a0a:	6a 30       	cpi	r22, 0x0A	; 10
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <disk_ioctl+0x64>
    1a0e:	2d c1       	rjmp	.+602    	; 0x1c6a <disk_ioctl+0x2be>
    1a10:	6b 30       	cpi	r22, 0x0B	; 11
    1a12:	50 f4       	brcc	.+20     	; 0x1a28 <disk_ioctl+0x7c>
    1a14:	61 30       	cpi	r22, 0x01	; 1
    1a16:	89 f1       	breq	.+98     	; 0x1a7a <disk_ioctl+0xce>
    1a18:	61 30       	cpi	r22, 0x01	; 1
    1a1a:	a0 f0       	brcs	.+40     	; 0x1a44 <disk_ioctl+0x98>
    1a1c:	62 30       	cpi	r22, 0x02	; 2
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <disk_ioctl+0x76>
    1a20:	8d c0       	rjmp	.+282    	; 0x1b3c <disk_ioctl+0x190>
    1a22:	63 30       	cpi	r22, 0x03	; 3
    1a24:	69 f4       	brne	.+26     	; 0x1a40 <disk_ioctl+0x94>
    1a26:	90 c0       	rjmp	.+288    	; 0x1b48 <disk_ioctl+0x19c>
    1a28:	6c 30       	cpi	r22, 0x0C	; 12
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <disk_ioctl+0x82>
    1a2c:	29 c1       	rjmp	.+594    	; 0x1c80 <disk_ioctl+0x2d4>
    1a2e:	6c 30       	cpi	r22, 0x0C	; 12
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <disk_ioctl+0x88>
    1a32:	20 c1       	rjmp	.+576    	; 0x1c74 <disk_ioctl+0x2c8>
    1a34:	6d 30       	cpi	r22, 0x0D	; 13
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <disk_ioctl+0x8e>
    1a38:	2f c1       	rjmp	.+606    	; 0x1c98 <disk_ioctl+0x2ec>
    1a3a:	6e 30       	cpi	r22, 0x0E	; 14
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <disk_ioctl+0x94>
    1a3e:	45 c1       	rjmp	.+650    	; 0x1cca <disk_ioctl+0x31e>
    1a40:	94 e0       	ldi	r25, 0x04	; 4
    1a42:	5e c1       	rjmp	.+700    	; 0x1d00 <disk_ioctl+0x354>

/* Port Controls  (Platform dependent) */
/* Frank: EDIT ME, This is for the CS pin on the card */
void SELECT()
{
	SPSR |= _BV(SPI2X);
    1a44:	8d b5       	in	r24, 0x2d	; 45
    1a46:	81 60       	ori	r24, 0x01	; 1
    1a48:	8d bd       	out	0x2d, r24	; 45
	MMC_PORT &= ~_BV(MMC_CS);
    1a4a:	2b 98       	cbi	0x05, 3	; 5
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    1a4c:	82 e3       	ldi	r24, 0x32	; 50
    1a4e:	80 93 d8 04 	sts	0x04D8, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1a56:	0d b4       	in	r0, 0x2d	; 45
    1a58:	07 fe       	sbrs	r0, 7
    1a5a:	fd cf       	rjmp	.-6      	; 0x1a56 <disk_ioctl+0xaa>
	return SPDR;
    1a5c:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1a5e:	9f ef       	ldi	r25, 0xFF	; 255
    1a60:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1a62:	0d b4       	in	r0, 0x2d	; 45
    1a64:	07 fe       	sbrs	r0, 7
    1a66:	fd cf       	rjmp	.-6      	; 0x1a62 <disk_ioctl+0xb6>
	return SPDR;
    1a68:	8e b5       	in	r24, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    1a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <disk_ioctl+0xc4>
    1a6e:	45 c1       	rjmp	.+650    	; 0x1cfa <disk_ioctl+0x34e>
    1a70:	80 91 d8 04 	lds	r24, 0x04D8
    1a74:	88 23       	and	r24, r24
    1a76:	a1 f7       	brne	.-24     	; 0x1a60 <disk_ioctl+0xb4>
    1a78:	42 c1       	rjmp	.+644    	; 0x1cfe <disk_ioctl+0x352>
			if (wait_ready() == 0xFF)
				res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	89 e4       	ldi	r24, 0x49	; 73
    1a84:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <disk_ioctl+0xe2>
    1a8c:	38 c1       	rjmp	.+624    	; 0x1cfe <disk_ioctl+0x352>
    1a8e:	60 e1       	ldi	r22, 0x10	; 16
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	ce 01       	movw	r24, r28
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <disk_ioctl+0xf4>
    1a9e:	2f c1       	rjmp	.+606    	; 0x1cfe <disk_ioctl+0x352>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	82 95       	swap	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	83 70       	andi	r24, 0x03	; 3
    1aaa:	7a 85       	ldd	r23, Y+10	; 0x0a
    1aac:	49 85       	ldd	r20, Y+9	; 0x09
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	89 f4       	brne	.+34     	; 0x1ad4 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1ab2:	87 2f       	mov	r24, r23
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	34 2f       	mov	r19, r20
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	82 0f       	add	r24, r18
    1abe:	93 1f       	adc	r25, r19
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	2a e0       	ldi	r18, 0x0A	; 10
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	2a 95       	dec	r18
    1ad0:	d1 f7       	brne	.-12     	; 0x1ac6 <disk_ioctl+0x11a>
    1ad2:	c5 c0       	rjmp	.+394    	; 0x1c5e <disk_ioctl+0x2b2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1ad4:	42 95       	swap	r20
    1ad6:	46 95       	lsr	r20
    1ad8:	46 95       	lsr	r20
    1ada:	43 70       	andi	r20, 0x03	; 3
    1adc:	28 85       	ldd	r18, Y+8	; 0x08
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	22 0f       	add	r18, r18
    1ae2:	33 1f       	adc	r19, r19
    1ae4:	22 0f       	add	r18, r18
    1ae6:	33 1f       	adc	r19, r19
    1ae8:	24 0f       	add	r18, r20
    1aea:	31 1d       	adc	r19, r1
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	83 70       	andi	r24, 0x03	; 3
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	98 2f       	mov	r25, r24
    1afa:	88 27       	eor	r24, r24
    1afc:	99 0f       	add	r25, r25
    1afe:	99 0f       	add	r25, r25
    1b00:	28 0f       	add	r18, r24
    1b02:	39 1f       	adc	r19, r25
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	8f 70       	andi	r24, 0x0F	; 15
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	66 1f       	adc	r22, r22
    1b10:	66 27       	eor	r22, r22
    1b12:	66 1f       	adc	r22, r22
    1b14:	86 0f       	add	r24, r22
    1b16:	8e 5f       	subi	r24, 0xFE	; 254
    1b18:	73 70       	andi	r23, 0x03	; 3
    1b1a:	77 0f       	add	r23, r23
    1b1c:	87 0f       	add	r24, r23
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	09 97       	sbiw	r24, 0x09	; 9
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <disk_ioctl+0x180>
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	44 1f       	adc	r20, r20
    1b2a:	55 1f       	adc	r21, r21
    1b2c:	8a 95       	dec	r24
    1b2e:	d2 f7       	brpl	.-12     	; 0x1b24 <disk_ioctl+0x178>
    1b30:	f8 01       	movw	r30, r16
    1b32:	20 83       	st	Z, r18
    1b34:	31 83       	std	Z+1, r19	; 0x01
    1b36:	42 83       	std	Z+2, r20	; 0x02
    1b38:	53 83       	std	Z+3, r21	; 0x03
    1b3a:	df c0       	rjmp	.+446    	; 0x1cfa <disk_ioctl+0x34e>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	fa 01       	movw	r30, r20
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	d9 c0       	rjmp	.+434    	; 0x1cfa <disk_ioctl+0x34e>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
    1b48:	80 91 d9 04 	lds	r24, 0x04D9
    1b4c:	f8 2e       	mov	r15, r24
    1b4e:	82 ff       	sbrs	r24, 2
    1b50:	31 c0       	rjmp	.+98     	; 0x1bb4 <disk_ioctl+0x208>
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	8d ec       	ldi	r24, 0xCD	; 205
    1b5c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1b60:	88 23       	and	r24, r24
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <disk_ioctl+0x1ba>
    1b64:	cc c0       	rjmp	.+408    	; 0x1cfe <disk_ioctl+0x352>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1b6a:	0d b4       	in	r0, 0x2d	; 45
    1b6c:	07 fe       	sbrs	r0, 7
    1b6e:	fd cf       	rjmp	.-6      	; 0x1b6a <disk_ioctl+0x1be>
	return SPDR;
    1b70:	8e b5       	in	r24, 0x2e	; 46

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1b72:	60 e1       	ldi	r22, 0x10	; 16
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    1b7e:	88 23       	and	r24, r24
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <disk_ioctl+0x1d8>
    1b82:	bd c0       	rjmp	.+378    	; 0x1cfe <disk_ioctl+0x352>
    1b84:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1b86:	9f ef       	ldi	r25, 0xFF	; 255
    1b88:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1b8a:	0d b4       	in	r0, 0x2d	; 45
    1b8c:	07 fe       	sbrs	r0, 7
    1b8e:	fd cf       	rjmp	.-6      	; 0x1b8a <disk_ioctl+0x1de>
	return SPDR;
    1b90:	2e b5       	in	r18, 0x2e	; 46
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <disk_ioctl+0x1dc>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1b96:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b98:	22 95       	swap	r18
    1b9a:	2f 70       	andi	r18, 0x0F	; 15
    1b9c:	80 e1       	ldi	r24, 0x10	; 16
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <disk_ioctl+0x202>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	aa 1f       	adc	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	2a 95       	dec	r18
    1bb0:	d2 f7       	brpl	.-12     	; 0x1ba6 <disk_ioctl+0x1fa>
    1bb2:	55 c0       	rjmp	.+170    	; 0x1c5e <disk_ioctl+0x2b2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	89 e4       	ldi	r24, 0x49	; 73
    1bbe:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <disk_ioctl+0x21c>
    1bc6:	9b c0       	rjmp	.+310    	; 0x1cfe <disk_ioctl+0x352>
    1bc8:	60 e1       	ldi	r22, 0x10	; 16
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <disk_ioctl+0x22e>
    1bd8:	92 c0       	rjmp	.+292    	; 0x1cfe <disk_ioctl+0x352>
    1bda:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & 2) {			/* SDC ver 1.XX */
    1bde:	f1 fe       	sbrs	r15, 1
    1be0:	1b c0       	rjmp	.+54     	; 0x1c18 <disk_ioctl+0x26c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1be2:	88 1f       	adc	r24, r24
    1be4:	88 27       	eor	r24, r24
    1be6:	88 1f       	adc	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	24 2f       	mov	r18, r20
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	2f 73       	andi	r18, 0x3F	; 63
    1bf2:	30 70       	andi	r19, 0x00	; 0
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	82 0f       	add	r24, r18
    1bfa:	93 1f       	adc	r25, r19
    1bfc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bfe:	22 95       	swap	r18
    1c00:	26 95       	lsr	r18
    1c02:	26 95       	lsr	r18
    1c04:	23 70       	andi	r18, 0x03	; 3
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	21 50       	subi	r18, 0x01	; 1
    1c0a:	30 40       	sbci	r19, 0x00	; 0
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <disk_ioctl+0x266>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	2a 95       	dec	r18
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <disk_ioctl+0x262>
    1c16:	21 c0       	rjmp	.+66     	; 0x1c5a <disk_ioctl+0x2ae>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	23 70       	andi	r18, 0x03	; 3
    1c1e:	30 70       	andi	r19, 0x00	; 0
    1c20:	f3 e0       	ldi	r31, 0x03	; 3
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	fa 95       	dec	r31
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <disk_ioctl+0x276>
    1c2a:	82 95       	swap	r24
    1c2c:	86 95       	lsr	r24
    1c2e:	87 70       	andi	r24, 0x07	; 7
    1c30:	28 0f       	add	r18, r24
    1c32:	31 1d       	adc	r19, r1
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	84 2f       	mov	r24, r20
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	8c 77       	andi	r24, 0x7C	; 124
    1c3e:	90 70       	andi	r25, 0x00	; 0
    1c40:	95 95       	asr	r25
    1c42:	87 95       	ror	r24
    1c44:	95 95       	asr	r25
    1c46:	87 95       	ror	r24
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	24 9f       	mul	r18, r20
    1c4e:	c0 01       	movw	r24, r0
    1c50:	25 9f       	mul	r18, r21
    1c52:	90 0d       	add	r25, r0
    1c54:	34 9f       	mul	r19, r20
    1c56:	90 0d       	add	r25, r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
    1c68:	48 c0       	rjmp	.+144    	; 0x1cfa <disk_ioctl+0x34e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1c6a:	80 91 d9 04 	lds	r24, 0x04D9
    1c6e:	fa 01       	movw	r30, r20
    1c70:	80 83       	st	Z, r24
    1c72:	43 c0       	rjmp	.+134    	; 0x1cfa <disk_ioctl+0x34e>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	89 e4       	ldi	r24, 0x49	; 73
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <disk_ioctl+0x2de>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	8a e4       	ldi	r24, 0x4A	; 74
    1c8a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1c8e:	88 23       	and	r24, r24
    1c90:	b1 f5       	brne	.+108    	; 0x1cfe <disk_ioctl+0x352>
    1c92:	60 e1       	ldi	r22, 0x10	; 16
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	2a c0       	rjmp	.+84     	; 0x1cec <disk_ioctl+0x340>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	8a e7       	ldi	r24, 0x7A	; 122
    1ca2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1ca6:	88 23       	and	r24, r24
    1ca8:	51 f5       	brne	.+84     	; 0x1cfe <disk_ioctl+0x352>
    1caa:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1cac:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1cae:	98 01       	movw	r18, r16
    1cb0:	2d 5f       	subi	r18, 0xFD	; 253
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1cb4:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1cb6:	0d b4       	in	r0, 0x2d	; 45
    1cb8:	07 fe       	sbrs	r0, 7
    1cba:	fd cf       	rjmp	.-6      	; 0x1cb6 <disk_ioctl+0x30a>
	return SPDR;
    1cbc:	8e b5       	in	r24, 0x2e	; 46
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1cbe:	80 83       	st	Z, r24
    1cc0:	e2 17       	cp	r30, r18
    1cc2:	f3 07       	cpc	r31, r19
    1cc4:	d1 f0       	breq	.+52     	; 0x1cfa <disk_ioctl+0x34e>
    1cc6:	31 96       	adiw	r30, 0x01	; 1
    1cc8:	f5 cf       	rjmp	.-22     	; 0x1cb4 <disk_ioctl+0x308>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	8d ec       	ldi	r24, 0xCD	; 205
    1cd4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_cmd>
    1cd8:	88 23       	and	r24, r24
    1cda:	89 f4       	brne	.+34     	; 0x1cfe <disk_ioctl+0x352>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1ce0:	0d b4       	in	r0, 0x2d	; 45
    1ce2:	07 fe       	sbrs	r0, 7
    1ce4:	fd cf       	rjmp	.-6      	; 0x1ce0 <disk_ioctl+0x334>
	return SPDR;
    1ce6:	8e b5       	in	r24, 0x2e	; 46
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    1ce8:	60 e4       	ldi	r22, 0x40	; 64
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 2f 0a 	call	0x145e	; 0x145e <rcvr_datablock>
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	88 23       	and	r24, r24
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <disk_ioctl+0x354>
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <disk_ioctl+0x352>
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <disk_ioctl+0x354>
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
	MMC_PORT &= ~_BV(MMC_CS);
}

void DESELECT()
{
	MMC_PORT |= _BV(MMC_CS);
    1d00:	2b 9a       	sbi	0x05, 3	; 5
	SPSR &= ~_BV(SPI2X);
    1d02:	8d b5       	in	r24, 0x2d	; 45
    1d04:	8e 7f       	andi	r24, 0xFE	; 254
    1d06:	8d bd       	out	0x2d, r24	; 45
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1d0c:	0d b4       	in	r0, 0x2d	; 45
    1d0e:	07 fe       	sbrs	r0, 7
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <disk_ioctl+0x360>
	return SPDR;
    1d12:	8e b5       	in	r24, 0x2e	; 46
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <disk_ioctl+0x36c>
    1d16:	94 e0       	ldi	r25, 0x04	; 4

		release_spi();
	}

	return res;
}
    1d18:	89 2f       	mov	r24, r25
    1d1a:	60 96       	adiw	r28, 0x10	; 16
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	08 95       	ret

00001d32 <disk_timerproc>:
/* This function must be called in period of 10ms                        */

/* Frank: this function is called via my timer2 interrupt */

void disk_timerproc (void)
{
    1d32:	80 91 d7 04 	lds	r24, 0x04D7
	//static BYTE pv;
	BYTE n, s;

	n = Timer1;						/* 100Hz decrement timer */
	if (n) Timer1 = --n;
    1d36:	88 23       	and	r24, r24
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <disk_timerproc+0xe>
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	80 93 d7 04 	sts	0x04D7, r24
	n = Timer2;
    1d40:	80 91 d8 04 	lds	r24, 0x04D8
	if (n) Timer2 = --n;
    1d44:	88 23       	and	r24, r24
    1d46:	19 f0       	breq	.+6      	; 0x1d4e <disk_timerproc+0x1c>
    1d48:	81 50       	subi	r24, 0x01	; 1
    1d4a:	80 93 d8 04 	sts	0x04D8, r24
	//pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */

	/* Frank: I don't have switches on my holder so this part has been edited */

	//if (n == pv) {					/* Have contacts stabled? */
		s = Stat;
    1d4e:	80 91 4e 01 	lds	r24, 0x014E
			s &= ~STA_PROTECT;

		//if (pv & SOCKINS)			/* INS = H (Socket empty) */
		//	s |= (STA_NODISK | STA_NOINIT);
		//else						/* INS = L (Card inserted) */
			s &= ~STA_NODISK;
    1d52:	89 7f       	andi	r24, 0xF9	; 249

		Stat = s;
    1d54:	80 93 4e 01 	sts	0x014E, r24
	//}
}
    1d58:	08 95       	ret

00001d5a <f_mount>:

FRESULT f_mount (
	BYTE drv,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    1d5a:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (drv >= _DRIVES)
    1d5c:	88 23       	and	r24, r24
    1d5e:	11 f0       	breq	.+4      	; 0x1d64 <f_mount+0xa>
    1d60:	8b e0       	ldi	r24, 0x0B	; 11
    1d62:	08 95       	ret
		return FR_INVALID_DRIVE;

	rfs = FatFs[drv];
    1d64:	e0 91 da 04 	lds	r30, 0x04DA
    1d68:	f0 91 db 04 	lds	r31, 0x04DB

	if (rfs) {
    1d6c:	30 97       	sbiw	r30, 0x00	; 0
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <f_mount+0x18>
#if _FS_REENTRANT					/* Discard mutex of the current fs. (Platform dependent) */
		CloseHandle(rfs->h_mutex);	/* Discard mutex */
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1d70:	10 82       	st	Z, r1
	}

	if (fs) {
    1d72:	10 97       	sbiw	r26, 0x00	; 0
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <f_mount+0x1e>
		fs->fs_type = 0;	/* Clear new fs object */
    1d76:	1c 92       	st	X, r1
#if _FS_REENTRANT				/* Create mutex for the new fs. (Platform dependent) */
		fs->h_mutex = CreateMutex(NULL, FALSE, NULL);
#endif
	}
	FatFs[drv] = fs;		/* Register new fs object */
    1d78:	b0 93 db 04 	sts	0x04DB, r27
    1d7c:	a0 93 da 04 	sts	0x04DA, r26
    1d80:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    1d82:	08 95       	ret

00001d84 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    1d84:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	89 f0       	breq	.+34     	; 0x1dac <validate+0x28>
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 23       	and	r24, r24
    1d8e:	71 f0       	breq	.+28     	; 0x1dac <validate+0x28>
    1d90:	86 81       	ldd	r24, Z+6	; 0x06
    1d92:	97 81       	ldd	r25, Z+7	; 0x07
    1d94:	86 17       	cp	r24, r22
    1d96:	97 07       	cpc	r25, r23
    1d98:	49 f4       	brne	.+18     	; 0x1dac <validate+0x28>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    1d9a:	81 81       	ldd	r24, Z+1	; 0x01
    1d9c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <disk_status>
    1da0:	80 fd       	sbrc	r24, 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <validate+0x24>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	08 95       	ret
    1da8:	83 e0       	ldi	r24, 0x03	; 3
    1daa:	08 95       	ret
    1dac:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    1dae:	08 95       	ret

00001db0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
	FRESULT res;


#if _FS_READONLY
	res = validate(fp->fs, fp->id);
    1db6:	6a 81       	ldd	r22, Y+2	; 0x02
    1db8:	7b 81       	ldd	r23, Y+3	; 0x03
    1dba:	88 81       	ld	r24, Y
    1dbc:	99 81       	ldd	r25, Y+1	; 0x01
    1dbe:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <validate>
	if (res == FR_OK) fp->fs = NULL;
    1dc2:	88 23       	and	r24, r24
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <f_close+0x1a>
    1dc6:	19 82       	std	Y+1, r1	; 0x01
    1dc8:	18 82       	st	Y, r1
#else
	res = f_sync(fp);
	if (res == FR_OK) fp->fs = NULL;
	return res;
#endif
}
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	08 95       	ret

00001dd0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	ec 01       	movw	r28, r24
    1de0:	6a 01       	movw	r12, r20
    1de2:	7b 01       	movw	r14, r22
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    1de4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1de8:	a8 a1       	ldd	r26, Y+32	; 0x20
    1dea:	b9 a1       	ldd	r27, Y+33	; 0x21
    1dec:	84 17       	cp	r24, r20
    1dee:	95 07       	cpc	r25, r21
    1df0:	a6 07       	cpc	r26, r22
    1df2:	b7 07       	cpc	r27, r23
    1df4:	b1 f0       	breq	.+44     	; 0x1e22 <move_window+0x52>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1df6:	41 15       	cp	r20, r1
    1df8:	51 05       	cpc	r21, r1
    1dfa:	61 05       	cpc	r22, r1
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	89 f0       	breq	.+34     	; 0x1e22 <move_window+0x52>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    1e00:	be 01       	movw	r22, r28
    1e02:	6e 5d       	subi	r22, 0xDE	; 222
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	01 e0       	ldi	r16, 0x01	; 1
    1e08:	a7 01       	movw	r20, r14
    1e0a:	96 01       	movw	r18, r12
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	0e 94 06 0c 	call	0x180c	; 0x180c <disk_read>
    1e12:	88 23       	and	r24, r24
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <move_window+0x4a>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <move_window+0x54>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1e1a:	ce 8e       	std	Y+30, r12	; 0x1e
    1e1c:	df 8e       	std	Y+31, r13	; 0x1f
    1e1e:	e8 a2       	std	Y+32, r14	; 0x20
    1e20:	f9 a2       	std	Y+33, r15	; 0x21
    1e22:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
    1e32:	08 95       	ret

00001e34 <get_cluster>:
static
DWORD get_cluster (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to get the link information */
)
{
    1e34:	4f 92       	push	r4
    1e36:	5f 92       	push	r5
    1e38:	6f 92       	push	r6
    1e3a:	7f 92       	push	r7
    1e3c:	8f 92       	push	r8
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	2c 01       	movw	r4, r24
    1e56:	5a 01       	movw	r10, r20
    1e58:	6b 01       	movw	r12, r22
	WORD wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Check cluster address range */
    1e5a:	42 30       	cpi	r20, 0x02	; 2
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	61 05       	cpc	r22, r1
    1e60:	71 05       	cpc	r23, r1
    1e62:	08 f4       	brcc	.+2      	; 0x1e66 <get_cluster+0x32>
    1e64:	dd c0       	rjmp	.+442    	; 0x2020 <get_cluster+0x1ec>
    1e66:	f2 01       	movw	r30, r4
    1e68:	86 85       	ldd	r24, Z+14	; 0x0e
    1e6a:	97 85       	ldd	r25, Z+15	; 0x0f
    1e6c:	a0 89       	ldd	r26, Z+16	; 0x10
    1e6e:	b1 89       	ldd	r27, Z+17	; 0x11
    1e70:	48 17       	cp	r20, r24
    1e72:	59 07       	cpc	r21, r25
    1e74:	6a 07       	cpc	r22, r26
    1e76:	7b 07       	cpc	r23, r27
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <get_cluster+0x48>
    1e7a:	d2 c0       	rjmp	.+420    	; 0x2020 <get_cluster+0x1ec>
		return 1;

	fsect = fs->fatbase;
    1e7c:	62 88       	ldd	r6, Z+18	; 0x12
    1e7e:	73 88       	ldd	r7, Z+19	; 0x13
    1e80:	84 88       	ldd	r8, Z+20	; 0x14
    1e82:	95 88       	ldd	r9, Z+21	; 0x15
	switch (fs->fs_type) {
    1e84:	80 81       	ld	r24, Z
    1e86:	82 30       	cpi	r24, 0x02	; 2
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <get_cluster+0x58>
    1e8a:	4f c0       	rjmp	.+158    	; 0x1f2a <get_cluster+0xf6>
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <get_cluster+0x5e>
    1e90:	71 c0       	rjmp	.+226    	; 0x1f74 <get_cluster+0x140>
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <get_cluster+0x64>
    1e96:	ca c0       	rjmp	.+404    	; 0x202c <get_cluster+0x1f8>
	case FS_FAT12 :
		bc = (WORD)clst * 3 / 2;
    1e98:	8a 01       	movw	r16, r20
    1e9a:	00 0f       	add	r16, r16
    1e9c:	11 1f       	adc	r17, r17
    1e9e:	04 0f       	add	r16, r20
    1ea0:	15 1f       	adc	r17, r21
    1ea2:	16 95       	lsr	r17
    1ea4:	07 95       	ror	r16
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1ea6:	a8 01       	movw	r20, r16
    1ea8:	45 2f       	mov	r20, r21
    1eaa:	55 27       	eor	r21, r21
    1eac:	46 95       	lsr	r20
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	46 0d       	add	r20, r6
    1eb4:	57 1d       	adc	r21, r7
    1eb6:	68 1d       	adc	r22, r8
    1eb8:	79 1d       	adc	r23, r9
    1eba:	c2 01       	movw	r24, r4
    1ebc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <get_cluster+0x92>
    1ec4:	b3 c0       	rjmp	.+358    	; 0x202c <get_cluster+0x1f8>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	f1 70       	andi	r31, 0x01	; 1
    1eca:	e4 0d       	add	r30, r4
    1ecc:	f5 1d       	adc	r31, r5
    1ece:	f2 a0       	ldd	r15, Z+34	; 0x22
    1ed0:	e8 01       	movw	r28, r16
    1ed2:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1ed4:	ae 01       	movw	r20, r28
    1ed6:	45 2f       	mov	r20, r21
    1ed8:	55 27       	eor	r21, r21
    1eda:	46 95       	lsr	r20
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	46 0d       	add	r20, r6
    1ee2:	57 1d       	adc	r21, r7
    1ee4:	68 1d       	adc	r22, r8
    1ee6:	79 1d       	adc	r23, r9
    1ee8:	c2 01       	movw	r24, r4
    1eea:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    1eee:	88 23       	and	r24, r24
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <get_cluster+0xc0>
    1ef2:	9c c0       	rjmp	.+312    	; 0x202c <get_cluster+0x1f8>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (WORD)clst * 3 / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1ef4:	ef 2c       	mov	r14, r15
    1ef6:	ff 24       	eor	r15, r15
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1ef8:	d1 70       	andi	r29, 0x01	; 1
    1efa:	c4 0d       	add	r28, r4
    1efc:	d5 1d       	adc	r29, r5
    1efe:	9a a1       	ldd	r25, Y+34	; 0x22
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	e8 2a       	or	r14, r24
    1f04:	f9 2a       	or	r15, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1f06:	c5 01       	movw	r24, r10
    1f08:	81 70       	andi	r24, 0x01	; 1
    1f0a:	90 70       	andi	r25, 0x00	; 0
    1f0c:	89 2b       	or	r24, r25
    1f0e:	31 f0       	breq	.+12     	; 0x1f1c <get_cluster+0xe8>
    1f10:	b4 e0       	ldi	r27, 0x04	; 4
    1f12:	f6 94       	lsr	r15
    1f14:	e7 94       	ror	r14
    1f16:	ba 95       	dec	r27
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <get_cluster+0xde>
    1f1a:	29 c0       	rjmp	.+82     	; 0x1f6e <get_cluster+0x13a>
    1f1c:	00 e0       	ldi	r16, 0x00	; 0
    1f1e:	10 e0       	ldi	r17, 0x00	; 0
    1f20:	8f ef       	ldi	r24, 0xFF	; 255
    1f22:	9f e0       	ldi	r25, 0x0F	; 15
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	76 c0       	rjmp	.+236    	; 0x2016 <get_cluster+0x1e2>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1f2a:	45 2f       	mov	r20, r21
    1f2c:	56 2f       	mov	r21, r22
    1f2e:	67 2f       	mov	r22, r23
    1f30:	77 27       	eor	r23, r23
    1f32:	46 0d       	add	r20, r6
    1f34:	57 1d       	adc	r21, r7
    1f36:	68 1d       	adc	r22, r8
    1f38:	79 1d       	adc	r23, r9
    1f3a:	c2 01       	movw	r24, r4
    1f3c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    1f40:	88 23       	and	r24, r24
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <get_cluster+0x112>
    1f44:	73 c0       	rjmp	.+230    	; 0x202c <get_cluster+0x1f8>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1f46:	d2 01       	movw	r26, r4
    1f48:	92 96       	adiw	r26, 0x22	; 34
    1f4a:	c5 01       	movw	r24, r10
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	91 70       	andi	r25, 0x01	; 1
    1f52:	fc 01       	movw	r30, r24
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	ea 0f       	add	r30, r26
    1f58:	fb 1f       	adc	r31, r27
    1f5a:	40 81       	ld	r20, Z
    1f5c:	a8 0f       	add	r26, r24
    1f5e:	b9 1f       	adc	r27, r25
    1f60:	2c 91       	ld	r18, X
    1f62:	94 2f       	mov	r25, r20
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	82 2b       	or	r24, r18
    1f6a:	93 2b       	or	r25, r19
    1f6c:	7c 01       	movw	r14, r24
    1f6e:	00 e0       	ldi	r16, 0x00	; 0
    1f70:	10 e0       	ldi	r17, 0x00	; 0
    1f72:	60 c0       	rjmp	.+192    	; 0x2034 <get_cluster+0x200>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1f74:	e7 e0       	ldi	r30, 0x07	; 7
    1f76:	76 95       	lsr	r23
    1f78:	67 95       	ror	r22
    1f7a:	57 95       	ror	r21
    1f7c:	47 95       	ror	r20
    1f7e:	ea 95       	dec	r30
    1f80:	d1 f7       	brne	.-12     	; 0x1f76 <get_cluster+0x142>
    1f82:	46 0d       	add	r20, r6
    1f84:	57 1d       	adc	r21, r7
    1f86:	68 1d       	adc	r22, r8
    1f88:	79 1d       	adc	r23, r9
    1f8a:	c2 01       	movw	r24, r4
    1f8c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    1f90:	88 23       	and	r24, r24
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <get_cluster+0x162>
    1f94:	4b c0       	rjmp	.+150    	; 0x202c <get_cluster+0x1f8>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    1f96:	a2 01       	movw	r20, r4
    1f98:	4e 5d       	subi	r20, 0xDE	; 222
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	95 01       	movw	r18, r10
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	31 70       	andi	r19, 0x01	; 1
    1fa8:	f9 01       	movw	r30, r18
    1faa:	33 96       	adiw	r30, 0x03	; 3
    1fac:	e4 0f       	add	r30, r20
    1fae:	f5 1f       	adc	r31, r21
    1fb0:	e0 80       	ld	r14, Z
    1fb2:	f9 01       	movw	r30, r18
    1fb4:	32 96       	adiw	r30, 0x02	; 2
    1fb6:	e4 0f       	add	r30, r20
    1fb8:	f5 1f       	adc	r31, r21
    1fba:	80 81       	ld	r24, Z
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	31 96       	adiw	r30, 0x01	; 1
    1fc0:	e4 0f       	add	r30, r20
    1fc2:	f5 1f       	adc	r31, r21
    1fc4:	60 81       	ld	r22, Z
    1fc6:	42 0f       	add	r20, r18
    1fc8:	53 1f       	adc	r21, r19
    1fca:	da 01       	movw	r26, r20
    1fcc:	2c 91       	ld	r18, X
    1fce:	ff 24       	eor	r15, r15
    1fd0:	00 e0       	ldi	r16, 0x00	; 0
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	1e 2d       	mov	r17, r14
    1fd6:	00 27       	eor	r16, r16
    1fd8:	ff 24       	eor	r15, r15
    1fda:	ee 24       	eor	r14, r14
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	99 27       	eor	r25, r25
    1fe6:	88 27       	eor	r24, r24
    1fe8:	e8 2a       	or	r14, r24
    1fea:	f9 2a       	or	r15, r25
    1fec:	0a 2b       	or	r16, r26
    1fee:	1b 2b       	or	r17, r27
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	e2 2a       	or	r14, r18
    1ff8:	f3 2a       	or	r15, r19
    1ffa:	04 2b       	or	r16, r20
    1ffc:	15 2b       	or	r17, r21
    1ffe:	96 2f       	mov	r25, r22
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e8 2a       	or	r14, r24
    2008:	f9 2a       	or	r15, r25
    200a:	0a 2b       	or	r16, r26
    200c:	1b 2b       	or	r17, r27
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	9f ef       	ldi	r25, 0xFF	; 255
    2012:	af ef       	ldi	r26, 0xFF	; 255
    2014:	bf e0       	ldi	r27, 0x0F	; 15
    2016:	e8 22       	and	r14, r24
    2018:	f9 22       	and	r15, r25
    201a:	0a 23       	and	r16, r26
    201c:	1b 23       	and	r17, r27
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <get_cluster+0x200>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	e8 2e       	mov	r14, r24
    2024:	f1 2c       	mov	r15, r1
    2026:	01 2d       	mov	r16, r1
    2028:	11 2d       	mov	r17, r1
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <get_cluster+0x200>
    202c:	ee 24       	eor	r14, r14
    202e:	ea 94       	dec	r14
    2030:	fe 2c       	mov	r15, r14
    2032:	87 01       	movw	r16, r14
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    2034:	b7 01       	movw	r22, r14
    2036:	c8 01       	movw	r24, r16
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	bf 90       	pop	r11
    204a:	af 90       	pop	r10
    204c:	9f 90       	pop	r9
    204e:	8f 90       	pop	r8
    2050:	7f 90       	pop	r7
    2052:	6f 90       	pop	r6
    2054:	5f 90       	pop	r5
    2056:	4f 90       	pop	r4
    2058:	08 95       	ret

0000205a <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    205a:	af 92       	push	r10
    205c:	bf 92       	push	r11
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	5c 01       	movw	r10, r24
    2070:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2072:	dc 01       	movw	r26, r24
    2074:	13 96       	adiw	r26, 0x03	; 3
    2076:	7c 93       	st	X, r23
    2078:	6e 93       	st	-X, r22
    207a:	12 97       	sbiw	r26, 0x02	; 2
	clst = dj->sclust;
    207c:	16 96       	adiw	r26, 0x06	; 6
    207e:	4d 91       	ld	r20, X+
    2080:	5d 91       	ld	r21, X+
    2082:	6d 91       	ld	r22, X+
    2084:	7c 91       	ld	r23, X
    2086:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    2088:	41 30       	cpi	r20, 0x01	; 1
    208a:	51 05       	cpc	r21, r1
    208c:	61 05       	cpc	r22, r1
    208e:	71 05       	cpc	r23, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <dir_seek+0x3a>
    2092:	c2 c0       	rjmp	.+388    	; 0x2218 <dir_seek+0x1be>
    2094:	14 96       	adiw	r26, 0x04	; 4
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	15 97       	sbiw	r26, 0x05	; 5
    209c:	86 85       	ldd	r24, Z+14	; 0x0e
    209e:	97 85       	ldd	r25, Z+15	; 0x0f
    20a0:	a0 89       	ldd	r26, Z+16	; 0x10
    20a2:	b1 89       	ldd	r27, Z+17	; 0x11
    20a4:	48 17       	cp	r20, r24
    20a6:	59 07       	cpc	r21, r25
    20a8:	6a 07       	cpc	r22, r26
    20aa:	7b 07       	cpc	r23, r27
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <dir_seek+0x56>
    20ae:	b4 c0       	rjmp	.+360    	; 0x2218 <dir_seek+0x1be>
		return FR_INT_ERR;

	if (clst == 0) {	/* Static table */
    20b0:	41 15       	cp	r20, r1
    20b2:	51 05       	cpc	r21, r1
    20b4:	61 05       	cpc	r22, r1
    20b6:	71 05       	cpc	r23, r1
    20b8:	e1 f4       	brne	.+56     	; 0x20f2 <dir_seek+0x98>
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    20ba:	80 85       	ldd	r24, Z+8	; 0x08
    20bc:	91 85       	ldd	r25, Z+9	; 0x09
    20be:	c8 17       	cp	r28, r24
    20c0:	d9 07       	cpc	r29, r25
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <dir_seek+0x6c>
    20c4:	a9 c0       	rjmp	.+338    	; 0x2218 <dir_seek+0x1be>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);
    20c6:	ce 01       	movw	r24, r28
    20c8:	a4 e0       	ldi	r26, 0x04	; 4
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	aa 95       	dec	r26
    20d0:	e1 f7       	brne	.-8      	; 0x20ca <dir_seek+0x70>
    20d2:	a0 e0       	ldi	r26, 0x00	; 0
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	26 89       	ldd	r18, Z+22	; 0x16
    20d8:	37 89       	ldd	r19, Z+23	; 0x17
    20da:	40 8d       	ldd	r20, Z+24	; 0x18
    20dc:	51 8d       	ldd	r21, Z+25	; 0x19
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	a4 1f       	adc	r26, r20
    20e4:	b5 1f       	adc	r27, r21
    20e6:	f5 01       	movw	r30, r10
    20e8:	86 87       	std	Z+14, r24	; 0x0e
    20ea:	97 87       	std	Z+15, r25	; 0x0f
    20ec:	a0 8b       	std	Z+16, r26	; 0x10
    20ee:	b1 8b       	std	Z+17, r27	; 0x11
    20f0:	82 c0       	rjmp	.+260    	; 0x21f6 <dir_seek+0x19c>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Indexes per cluster */
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	08 2f       	mov	r16, r24
    20f6:	10 e0       	ldi	r17, 0x00	; 0
    20f8:	f4 e0       	ldi	r31, 0x04	; 4
    20fa:	00 0f       	add	r16, r16
    20fc:	11 1f       	adc	r17, r17
    20fe:	fa 95       	dec	r31
    2100:	e1 f7       	brne	.-8      	; 0x20fa <dir_seek+0xa0>
    2102:	26 c0       	rjmp	.+76     	; 0x2150 <dir_seek+0xf6>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_cluster(dj->fs, clst);			/* Get next cluster */
    2104:	c6 01       	movw	r24, r12
    2106:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <get_cluster>
    210a:	ab 01       	movw	r20, r22
    210c:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    210e:	4f 3f       	cpi	r20, 0xFF	; 255
    2110:	ff ef       	ldi	r31, 0xFF	; 255
    2112:	5f 07       	cpc	r21, r31
    2114:	ff ef       	ldi	r31, 0xFF	; 255
    2116:	6f 07       	cpc	r22, r31
    2118:	ff ef       	ldi	r31, 0xFF	; 255
    211a:	7f 07       	cpc	r23, r31
    211c:	11 f4       	brne	.+4      	; 0x2122 <dir_seek+0xc8>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	7c c0       	rjmp	.+248    	; 0x221a <dir_seek+0x1c0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    2122:	42 30       	cpi	r20, 0x02	; 2
    2124:	51 05       	cpc	r21, r1
    2126:	61 05       	cpc	r22, r1
    2128:	71 05       	cpc	r23, r1
    212a:	08 f4       	brcc	.+2      	; 0x212e <dir_seek+0xd4>
    212c:	75 c0       	rjmp	.+234    	; 0x2218 <dir_seek+0x1be>
    212e:	d5 01       	movw	r26, r10
    2130:	14 96       	adiw	r26, 0x04	; 4
    2132:	ed 91       	ld	r30, X+
    2134:	fc 91       	ld	r31, X
    2136:	15 97       	sbiw	r26, 0x05	; 5
    2138:	86 85       	ldd	r24, Z+14	; 0x0e
    213a:	97 85       	ldd	r25, Z+15	; 0x0f
    213c:	a0 89       	ldd	r26, Z+16	; 0x10
    213e:	b1 89       	ldd	r27, Z+17	; 0x11
    2140:	48 17       	cp	r20, r24
    2142:	59 07       	cpc	r21, r25
    2144:	6a 07       	cpc	r22, r26
    2146:	7b 07       	cpc	r23, r27
    2148:	08 f0       	brcs	.+2      	; 0x214c <dir_seek+0xf2>
    214a:	66 c0       	rjmp	.+204    	; 0x2218 <dir_seek+0x1be>
				return FR_INT_ERR;
			idx -= ic;
    214c:	c0 1b       	sub	r28, r16
    214e:	d1 0b       	sbc	r29, r17
    2150:	f5 01       	movw	r30, r10
    2152:	c4 80       	ldd	r12, Z+4	; 0x04
    2154:	d5 80       	ldd	r13, Z+5	; 0x05
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Indexes per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2156:	c0 17       	cp	r28, r16
    2158:	d1 07       	cpc	r29, r17
    215a:	a0 f6       	brcc	.-88     	; 0x2104 <dir_seek+0xaa>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    215c:	d5 01       	movw	r26, r10
    215e:	1a 96       	adiw	r26, 0x0a	; 10
    2160:	4d 93       	st	X+, r20
    2162:	5d 93       	st	X+, r21
    2164:	6d 93       	st	X+, r22
    2166:	7c 93       	st	X, r23
    2168:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    216a:	ee ef       	ldi	r30, 0xFE	; 254
    216c:	ee 2e       	mov	r14, r30
    216e:	ef ef       	ldi	r30, 0xFF	; 255
    2170:	fe 2e       	mov	r15, r30
    2172:	ef ef       	ldi	r30, 0xFF	; 255
    2174:	0e 2f       	mov	r16, r30
    2176:	ef ef       	ldi	r30, 0xFF	; 255
    2178:	1e 2f       	mov	r17, r30
    217a:	e4 0e       	add	r14, r20
    217c:	f5 1e       	adc	r15, r21
    217e:	06 1f       	adc	r16, r22
    2180:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2182:	f6 01       	movw	r30, r12
    2184:	86 85       	ldd	r24, Z+14	; 0x0e
    2186:	97 85       	ldd	r25, Z+15	; 0x0f
    2188:	a0 89       	ldd	r26, Z+16	; 0x10
    218a:	b1 89       	ldd	r27, Z+17	; 0x11
    218c:	02 97       	sbiw	r24, 0x02	; 2
    218e:	a1 09       	sbc	r26, r1
    2190:	b1 09       	sbc	r27, r1
    2192:	e8 16       	cp	r14, r24
    2194:	f9 06       	cpc	r15, r25
    2196:	0a 07       	cpc	r16, r26
    2198:	1b 07       	cpc	r17, r27
    219a:	28 f0       	brcs	.+10     	; 0x21a6 <dir_seek+0x14c>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	15 c0       	rjmp	.+42     	; 0x21d0 <dir_seek+0x176>
	return clst * fs->csize + fs->database;
    21a6:	d6 01       	movw	r26, r12
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	2c 91       	ld	r18, X
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	c8 01       	movw	r24, r16
    21b4:	b7 01       	movw	r22, r14
    21b6:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	f6 01       	movw	r30, r12
    21c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    21c4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    21c6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    21c8:	28 0f       	add	r18, r24
    21ca:	39 1f       	adc	r19, r25
    21cc:	4a 1f       	adc	r20, r26
    21ce:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);
    21d0:	ce 01       	movw	r24, r28
    21d2:	64 e0       	ldi	r22, 0x04	; 4
    21d4:	96 95       	lsr	r25
    21d6:	87 95       	ror	r24
    21d8:	6a 95       	dec	r22
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <dir_seek+0x17a>
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	28 0f       	add	r18, r24
    21e2:	39 1f       	adc	r19, r25
    21e4:	4a 1f       	adc	r20, r26
    21e6:	5b 1f       	adc	r21, r27
    21e8:	d5 01       	movw	r26, r10
    21ea:	1e 96       	adiw	r26, 0x0e	; 14
    21ec:	2d 93       	st	X+, r18
    21ee:	3d 93       	st	X+, r19
    21f0:	4d 93       	st	X+, r20
    21f2:	5c 93       	st	X, r21
    21f4:	51 97       	sbiw	r26, 0x11	; 17
	}
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;
    21f6:	cf 70       	andi	r28, 0x0F	; 15
    21f8:	d0 70       	andi	r29, 0x00	; 0
    21fa:	35 e0       	ldi	r19, 0x05	; 5
    21fc:	cc 0f       	add	r28, r28
    21fe:	dd 1f       	adc	r29, r29
    2200:	3a 95       	dec	r19
    2202:	e1 f7       	brne	.-8      	; 0x21fc <dir_seek+0x1a2>
    2204:	a2 96       	adiw	r28, 0x22	; 34
    2206:	f5 01       	movw	r30, r10
    2208:	84 81       	ldd	r24, Z+4	; 0x04
    220a:	95 81       	ldd	r25, Z+5	; 0x05
    220c:	8c 0f       	add	r24, r28
    220e:	9d 1f       	adc	r25, r29
    2210:	93 8b       	std	Z+19, r25	; 0x13
    2212:	82 8b       	std	Z+18, r24	; 0x12
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	01 c0       	rjmp	.+2      	; 0x221a <dir_seek+0x1c0>

	return FR_OK;	/* Seek succeeded */
    2218:	82 e0       	ldi	r24, 0x02	; 2
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	08 95       	ret

00002230 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    2230:	8f 92       	push	r8
    2232:	9f 92       	push	r9
    2234:	af 92       	push	r10
    2236:	bf 92       	push	r11
    2238:	cf 92       	push	r12
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ec 01       	movw	r28, r24
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    224a:	aa 80       	ldd	r10, Y+2	; 0x02
    224c:	bb 80       	ldd	r11, Y+3	; 0x03
    224e:	08 94       	sec
    2250:	a1 1c       	adc	r10, r1
    2252:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2254:	a1 14       	cp	r10, r1
    2256:	b1 04       	cpc	r11, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <dir_next+0x2c>
    225a:	ab c0       	rjmp	.+342    	; 0x23b2 <dir_next+0x182>
    225c:	8e 85       	ldd	r24, Y+14	; 0x0e
    225e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2260:	a8 89       	ldd	r26, Y+16	; 0x10
    2262:	b9 89       	ldd	r27, Y+17	; 0x11
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	a1 05       	cpc	r26, r1
    2268:	b1 05       	cpc	r27, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <dir_next+0x3e>
    226c:	a2 c0       	rjmp	.+324    	; 0x23b2 <dir_next+0x182>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    226e:	2f e0       	ldi	r18, 0x0F	; 15
    2270:	82 2e       	mov	r8, r18
    2272:	91 2c       	mov	r9, r1
    2274:	8a 20       	and	r8, r10
    2276:	9b 20       	and	r9, r11
    2278:	81 14       	cp	r8, r1
    227a:	91 04       	cpc	r9, r1
    227c:	09 f0       	breq	.+2      	; 0x2280 <dir_next+0x50>
    227e:	86 c0       	rjmp	.+268    	; 0x238c <dir_next+0x15c>
		dj->sect++;					/* Next sector */
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	a1 1d       	adc	r26, r1
    2284:	b1 1d       	adc	r27, r1
    2286:	8e 87       	std	Y+14, r24	; 0x0e
    2288:	9f 87       	std	Y+15, r25	; 0x0f
    228a:	a8 8b       	std	Y+16, r26	; 0x10
    228c:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->sclust == 0) {	/* Static table */
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	a8 85       	ldd	r26, Y+8	; 0x08
    2294:	b9 85       	ldd	r27, Y+9	; 0x09
    2296:	ec 81       	ldd	r30, Y+4	; 0x04
    2298:	fd 81       	ldd	r31, Y+5	; 0x05
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	a1 05       	cpc	r26, r1
    229e:	b1 05       	cpc	r27, r1
    22a0:	39 f4       	brne	.+14     	; 0x22b0 <dir_next+0x80>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    22a2:	80 85       	ldd	r24, Z+8	; 0x08
    22a4:	91 85       	ldd	r25, Z+9	; 0x09
    22a6:	a8 16       	cp	r10, r24
    22a8:	b9 06       	cpc	r11, r25
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <dir_next+0x7e>
    22ac:	6f c0       	rjmp	.+222    	; 0x238c <dir_next+0x15c>
    22ae:	81 c0       	rjmp	.+258    	; 0x23b2 <dir_next+0x182>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	95 01       	movw	r18, r10
    22b8:	04 e0       	ldi	r16, 0x04	; 4
    22ba:	36 95       	lsr	r19
    22bc:	27 95       	ror	r18
    22be:	0a 95       	dec	r16
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <dir_next+0x8a>
    22c2:	82 23       	and	r24, r18
    22c4:	93 23       	and	r25, r19
    22c6:	89 2b       	or	r24, r25
    22c8:	09 f0       	breq	.+2      	; 0x22cc <dir_next+0x9c>
    22ca:	60 c0       	rjmp	.+192    	; 0x238c <dir_next+0x15c>
				clst = get_cluster(dj->fs, dj->clust);			/* Get next cluster */
    22cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    22ce:	5b 85       	ldd	r21, Y+11	; 0x0b
    22d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22d4:	cf 01       	movw	r24, r30
    22d6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <get_cluster>
    22da:	9b 01       	movw	r18, r22
    22dc:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_INT_ERR;
    22de:	62 30       	cpi	r22, 0x02	; 2
    22e0:	71 05       	cpc	r23, r1
    22e2:	81 05       	cpc	r24, r1
    22e4:	91 05       	cpc	r25, r1
    22e6:	10 f4       	brcc	.+4      	; 0x22ec <dir_next+0xbc>
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	64 c0       	rjmp	.+200    	; 0x23b4 <dir_next+0x184>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    22ec:	2f 3f       	cpi	r18, 0xFF	; 255
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	38 07       	cpc	r19, r24
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	48 07       	cpc	r20, r24
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	58 07       	cpc	r21, r24
    22fa:	11 f4       	brne	.+4      	; 0x2300 <dir_next+0xd0>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	5a c0       	rjmp	.+180    	; 0x23b4 <dir_next+0x184>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dinamic table */
    2300:	cc 80       	ldd	r12, Y+4	; 0x04
    2302:	dd 80       	ldd	r13, Y+5	; 0x05
    2304:	f6 01       	movw	r30, r12
    2306:	86 85       	ldd	r24, Z+14	; 0x0e
    2308:	97 85       	ldd	r25, Z+15	; 0x0f
    230a:	a0 89       	ldd	r26, Z+16	; 0x10
    230c:	b1 89       	ldd	r27, Z+17	; 0x11
    230e:	28 17       	cp	r18, r24
    2310:	39 07       	cpc	r19, r25
    2312:	4a 07       	cpc	r20, r26
    2314:	5b 07       	cpc	r21, r27
    2316:	08 f0       	brcs	.+2      	; 0x231a <dir_next+0xea>
    2318:	4c c0       	rjmp	.+152    	; 0x23b2 <dir_next+0x182>
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    231a:	2a 87       	std	Y+10, r18	; 0x0a
    231c:	3b 87       	std	Y+11, r19	; 0x0b
    231e:	4c 87       	std	Y+12, r20	; 0x0c
    2320:	5d 87       	std	Y+13, r21	; 0x0d
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2322:	1e ef       	ldi	r17, 0xFE	; 254
    2324:	e1 2e       	mov	r14, r17
    2326:	1f ef       	ldi	r17, 0xFF	; 255
    2328:	f1 2e       	mov	r15, r17
    232a:	1f ef       	ldi	r17, 0xFF	; 255
    232c:	01 2f       	mov	r16, r17
    232e:	1f ef       	ldi	r17, 0xFF	; 255
    2330:	11 2f       	mov	r17, r17
    2332:	e2 0e       	add	r14, r18
    2334:	f3 1e       	adc	r15, r19
    2336:	04 1f       	adc	r16, r20
    2338:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    233a:	86 85       	ldd	r24, Z+14	; 0x0e
    233c:	97 85       	ldd	r25, Z+15	; 0x0f
    233e:	a0 89       	ldd	r26, Z+16	; 0x10
    2340:	b1 89       	ldd	r27, Z+17	; 0x11
    2342:	02 97       	sbiw	r24, 0x02	; 2
    2344:	a1 09       	sbc	r26, r1
    2346:	b1 09       	sbc	r27, r1
    2348:	e8 16       	cp	r14, r24
    234a:	f9 06       	cpc	r15, r25
    234c:	0a 07       	cpc	r16, r26
    234e:	1b 07       	cpc	r17, r27
    2350:	28 f0       	brcs	.+10     	; 0x235c <dir_next+0x12c>
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <dir_next+0x154>
	return clst * fs->csize + fs->database;
    235c:	f6 01       	movw	r30, r12
    235e:	22 81       	ldd	r18, Z+2	; 0x02
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	c8 01       	movw	r24, r16
    2368:	b7 01       	movw	r22, r14
    236a:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    236e:	9b 01       	movw	r18, r22
    2370:	ac 01       	movw	r20, r24
    2372:	f6 01       	movw	r30, r12
    2374:	82 8d       	ldd	r24, Z+26	; 0x1a
    2376:	93 8d       	ldd	r25, Z+27	; 0x1b
    2378:	a4 8d       	ldd	r26, Z+28	; 0x1c
    237a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    237c:	28 0f       	add	r18, r24
    237e:	39 1f       	adc	r19, r25
    2380:	4a 1f       	adc	r20, r26
    2382:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2384:	2e 87       	std	Y+14, r18	; 0x0e
    2386:	3f 87       	std	Y+15, r19	; 0x0f
    2388:	48 8b       	std	Y+16, r20	; 0x10
    238a:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    238c:	bb 82       	std	Y+3, r11	; 0x03
    238e:	aa 82       	std	Y+2, r10	; 0x02
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2390:	b5 e0       	ldi	r27, 0x05	; 5
    2392:	88 0c       	add	r8, r8
    2394:	99 1c       	adc	r9, r9
    2396:	ba 95       	dec	r27
    2398:	e1 f7       	brne	.-8      	; 0x2392 <dir_next+0x162>
    239a:	82 e2       	ldi	r24, 0x22	; 34
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	88 0e       	add	r8, r24
    23a0:	99 1e       	adc	r9, r25
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	88 0d       	add	r24, r8
    23a8:	99 1d       	adc	r25, r9
    23aa:	9b 8b       	std	Y+19, r25	; 0x13
    23ac:	8a 8b       	std	Y+18, r24	; 0x12
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <dir_next+0x184>

	return FR_OK;
    23b2:	84 e0       	ldi	r24, 0x04	; 4
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	cf 90       	pop	r12
    23c4:	bf 90       	pop	r11
    23c6:	af 90       	pop	r10
    23c8:	9f 90       	pop	r9
    23ca:	8f 90       	pop	r8
    23cc:	08 95       	ret

000023ce <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    23ce:	2f 92       	push	r2
    23d0:	3f 92       	push	r3
    23d2:	4f 92       	push	r4
    23d4:	5f 92       	push	r5
    23d6:	6f 92       	push	r6
    23d8:	7f 92       	push	r7
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <f_lseek+0x26>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	9b 83       	std	Y+3, r25	; 0x03
    23fc:	8a 83       	std	Y+2, r24	; 0x02
    23fe:	14 2f       	mov	r17, r20
    2400:	05 2f       	mov	r16, r21
    2402:	e6 2e       	mov	r14, r22
    2404:	d7 2e       	mov	r13, r23
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2406:	dc 01       	movw	r26, r24
    2408:	12 96       	adiw	r26, 0x02	; 2
    240a:	6d 91       	ld	r22, X+
    240c:	7c 91       	ld	r23, X
    240e:	13 97       	sbiw	r26, 0x03	; 3
    2410:	8d 91       	ld	r24, X+
    2412:	9c 91       	ld	r25, X
    2414:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <validate>
    2418:	89 83       	std	Y+1, r24	; 0x01
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    241a:	88 23       	and	r24, r24
    241c:	09 f0       	breq	.+2      	; 0x2420 <f_lseek+0x52>
    241e:	71 c1       	rjmp	.+738    	; 0x2702 <f_lseek+0x334>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	84 81       	ldd	r24, Z+4	; 0x04
    2426:	87 fd       	sbrc	r24, 7
    2428:	b8 c0       	rjmp	.+368    	; 0x259a <f_lseek+0x1cc>
    242a:	aa 81       	ldd	r26, Y+2	; 0x02
    242c:	bb 81       	ldd	r27, Y+3	; 0x03
    242e:	1a 96       	adiw	r26, 0x0a	; 10
    2430:	6d 90       	ld	r6, X+
    2432:	7d 90       	ld	r7, X+
    2434:	8d 90       	ld	r8, X+
    2436:	9c 90       	ld	r9, X
    2438:	1d 97       	sbiw	r26, 0x0d	; 13
    243a:	21 2f       	mov	r18, r17
    243c:	30 2f       	mov	r19, r16
    243e:	4e 2d       	mov	r20, r14
    2440:	5d 2d       	mov	r21, r13
    2442:	c9 01       	movw	r24, r18
    2444:	da 01       	movw	r26, r20
    2446:	5c 01       	movw	r10, r24
    2448:	6d 01       	movw	r12, r26
    244a:	6a 14       	cp	r6, r10
    244c:	7b 04       	cpc	r7, r11
    244e:	8c 04       	cpc	r8, r12
    2450:	9d 04       	cpc	r9, r13
    2452:	10 f4       	brcc	.+4      	; 0x2458 <f_lseek+0x8a>
    2454:	64 01       	movw	r12, r8
    2456:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    2458:	ea 81       	ldd	r30, Y+2	; 0x02
    245a:	fb 81       	ldd	r31, Y+3	; 0x03
    245c:	26 81       	ldd	r18, Z+6	; 0x06
    245e:	37 81       	ldd	r19, Z+7	; 0x07
    2460:	40 85       	ldd	r20, Z+8	; 0x08
    2462:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = 0; fp->csect = 255;
    2464:	16 82       	std	Z+6, r1	; 0x06
    2466:	17 82       	std	Z+7, r1	; 0x07
    2468:	10 86       	std	Z+8, r1	; 0x08
    246a:	11 86       	std	Z+9, r1	; 0x09
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	85 83       	std	Z+5, r24	; 0x05
	nsect = 0;
	if (ofs > 0) {
    2470:	a1 14       	cp	r10, r1
    2472:	b1 04       	cpc	r11, r1
    2474:	c1 04       	cpc	r12, r1
    2476:	d1 04       	cpc	r13, r1
    2478:	09 f4       	brne	.+2      	; 0x247c <f_lseek+0xae>
    247a:	43 c1       	rjmp	.+646    	; 0x2702 <f_lseek+0x334>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    247c:	01 90       	ld	r0, Z+
    247e:	f0 81       	ld	r31, Z
    2480:	e0 2d       	mov	r30, r0
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	68 2e       	mov	r6, r24
    2486:	77 24       	eor	r7, r7
    2488:	88 24       	eor	r8, r8
    248a:	99 24       	eor	r9, r9
    248c:	09 e0       	ldi	r16, 0x09	; 9
    248e:	66 0c       	add	r6, r6
    2490:	77 1c       	adc	r7, r7
    2492:	88 1c       	adc	r8, r8
    2494:	99 1c       	adc	r9, r9
    2496:	0a 95       	dec	r16
    2498:	d1 f7       	brne	.-12     	; 0x248e <f_lseek+0xc0>
		if (ifptr > 0 &&
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	41 05       	cpc	r20, r1
    24a0:	51 05       	cpc	r21, r1
    24a2:	c1 f1       	breq	.+112    	; 0x2514 <f_lseek+0x146>
    24a4:	19 01       	movw	r2, r18
    24a6:	2a 01       	movw	r4, r20
    24a8:	08 94       	sec
    24aa:	21 08       	sbc	r2, r1
    24ac:	31 08       	sbc	r3, r1
    24ae:	41 08       	sbc	r4, r1
    24b0:	51 08       	sbc	r5, r1
    24b2:	c6 01       	movw	r24, r12
    24b4:	b5 01       	movw	r22, r10
    24b6:	61 50       	subi	r22, 0x01	; 1
    24b8:	70 40       	sbci	r23, 0x00	; 0
    24ba:	80 40       	sbci	r24, 0x00	; 0
    24bc:	90 40       	sbci	r25, 0x00	; 0
    24be:	a4 01       	movw	r20, r8
    24c0:	93 01       	movw	r18, r6
    24c2:	0e 94 76 28 	call	0x50ec	; 0x50ec <__udivmodsi4>
    24c6:	79 01       	movw	r14, r18
    24c8:	8a 01       	movw	r16, r20
    24ca:	c2 01       	movw	r24, r4
    24cc:	b1 01       	movw	r22, r2
    24ce:	a4 01       	movw	r20, r8
    24d0:	93 01       	movw	r18, r6
    24d2:	0e 94 76 28 	call	0x50ec	; 0x50ec <__udivmodsi4>
    24d6:	e2 16       	cp	r14, r18
    24d8:	f3 06       	cpc	r15, r19
    24da:	04 07       	cpc	r16, r20
    24dc:	15 07       	cpc	r17, r21
    24de:	d0 f0       	brcs	.+52     	; 0x2514 <f_lseek+0x146>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24e0:	88 27       	eor	r24, r24
    24e2:	99 27       	eor	r25, r25
    24e4:	dc 01       	movw	r26, r24
    24e6:	86 19       	sub	r24, r6
    24e8:	97 09       	sbc	r25, r7
    24ea:	a8 09       	sbc	r26, r8
    24ec:	b9 09       	sbc	r27, r9
    24ee:	82 21       	and	r24, r2
    24f0:	93 21       	and	r25, r3
    24f2:	a4 21       	and	r26, r4
    24f4:	b5 21       	and	r27, r5
    24f6:	ea 81       	ldd	r30, Y+2	; 0x02
    24f8:	fb 81       	ldd	r31, Y+3	; 0x03
    24fa:	86 83       	std	Z+6, r24	; 0x06
    24fc:	97 83       	std	Z+7, r25	; 0x07
    24fe:	a0 87       	std	Z+8, r26	; 0x08
    2500:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    2502:	a8 1a       	sub	r10, r24
    2504:	b9 0a       	sbc	r11, r25
    2506:	ca 0a       	sbc	r12, r26
    2508:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    250a:	42 89       	ldd	r20, Z+18	; 0x12
    250c:	53 89       	ldd	r21, Z+19	; 0x13
    250e:	64 89       	ldd	r22, Z+20	; 0x14
    2510:	75 89       	ldd	r23, Z+21	; 0x15
    2512:	0d c0       	rjmp	.+26     	; 0x252e <f_lseek+0x160>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    2514:	aa 81       	ldd	r26, Y+2	; 0x02
    2516:	bb 81       	ldd	r27, Y+3	; 0x03
    2518:	1e 96       	adiw	r26, 0x0e	; 14
    251a:	4d 91       	ld	r20, X+
    251c:	5d 91       	ld	r21, X+
    251e:	6d 91       	ld	r22, X+
    2520:	7c 91       	ld	r23, X
    2522:	51 97       	sbiw	r26, 0x11	; 17
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->org_clust = clst;
			}
#endif
			fp->curr_clust = clst;
    2524:	fd 01       	movw	r30, r26
    2526:	42 8b       	std	Z+18, r20	; 0x12
    2528:	53 8b       	std	Z+19, r21	; 0x13
    252a:	64 8b       	std	Z+20, r22	; 0x14
    252c:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    252e:	41 15       	cp	r20, r1
    2530:	51 05       	cpc	r21, r1
    2532:	61 05       	cpc	r22, r1
    2534:	71 05       	cpc	r23, r1
    2536:	09 f0       	breq	.+2      	; 0x253a <f_lseek+0x16c>
    2538:	4b c0       	rjmp	.+150    	; 0x25d0 <f_lseek+0x202>
    253a:	e3 c0       	rjmp	.+454    	; 0x2702 <f_lseek+0x334>
					if (clst == 0) {				/* When disk gets full, clip file size */
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_cluster(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    253c:	aa 81       	ldd	r26, Y+2	; 0x02
    253e:	bb 81       	ldd	r27, Y+3	; 0x03
    2540:	8d 91       	ld	r24, X+
    2542:	9c 91       	ld	r25, X
    2544:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <get_cluster>
    2548:	ab 01       	movw	r20, r22
    254a:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    254c:	4f 3f       	cpi	r20, 0xFF	; 255
    254e:	bf ef       	ldi	r27, 0xFF	; 255
    2550:	5b 07       	cpc	r21, r27
    2552:	bf ef       	ldi	r27, 0xFF	; 255
    2554:	6b 07       	cpc	r22, r27
    2556:	bf ef       	ldi	r27, 0xFF	; 255
    2558:	7b 07       	cpc	r23, r27
    255a:	41 f4       	brne	.+16     	; 0x256c <f_lseek+0x19e>
    255c:	ea 81       	ldd	r30, Y+2	; 0x02
    255e:	fb 81       	ldd	r31, Y+3	; 0x03
    2560:	84 81       	ldd	r24, Z+4	; 0x04
    2562:	80 68       	ori	r24, 0x80	; 128
    2564:	84 83       	std	Z+4, r24	; 0x04
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	f9 83       	std	Y+1, r31	; 0x01
    256a:	cb c0       	rjmp	.+406    	; 0x2702 <f_lseek+0x334>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    256c:	42 30       	cpi	r20, 0x02	; 2
    256e:	51 05       	cpc	r21, r1
    2570:	61 05       	cpc	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	68 f0       	brcs	.+26     	; 0x2590 <f_lseek+0x1c2>
    2576:	aa 81       	ldd	r26, Y+2	; 0x02
    2578:	bb 81       	ldd	r27, Y+3	; 0x03
    257a:	ed 91       	ld	r30, X+
    257c:	fc 91       	ld	r31, X
    257e:	86 85       	ldd	r24, Z+14	; 0x0e
    2580:	97 85       	ldd	r25, Z+15	; 0x0f
    2582:	a0 89       	ldd	r26, Z+16	; 0x10
    2584:	b1 89       	ldd	r27, Z+17	; 0x11
    2586:	48 17       	cp	r20, r24
    2588:	59 07       	cpc	r21, r25
    258a:	6a 07       	cpc	r22, r26
    258c:	7b 07       	cpc	r23, r27
    258e:	38 f0       	brcs	.+14     	; 0x259e <f_lseek+0x1d0>
    2590:	ea 81       	ldd	r30, Y+2	; 0x02
    2592:	fb 81       	ldd	r31, Y+3	; 0x03
    2594:	84 81       	ldd	r24, Z+4	; 0x04
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	84 83       	std	Z+4, r24	; 0x04
    259a:	f2 e0       	ldi	r31, 0x02	; 2
    259c:	e5 cf       	rjmp	.-54     	; 0x2568 <f_lseek+0x19a>
				fp->curr_clust = clst;
    259e:	aa 81       	ldd	r26, Y+2	; 0x02
    25a0:	bb 81       	ldd	r27, Y+3	; 0x03
    25a2:	52 96       	adiw	r26, 0x12	; 18
    25a4:	4d 93       	st	X+, r20
    25a6:	5d 93       	st	X+, r21
    25a8:	6d 93       	st	X+, r22
    25aa:	7c 93       	st	X, r23
    25ac:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    25ae:	fd 01       	movw	r30, r26
    25b0:	86 81       	ldd	r24, Z+6	; 0x06
    25b2:	97 81       	ldd	r25, Z+7	; 0x07
    25b4:	a0 85       	ldd	r26, Z+8	; 0x08
    25b6:	b1 85       	ldd	r27, Z+9	; 0x09
    25b8:	86 0d       	add	r24, r6
    25ba:	97 1d       	adc	r25, r7
    25bc:	a8 1d       	adc	r26, r8
    25be:	b9 1d       	adc	r27, r9
    25c0:	86 83       	std	Z+6, r24	; 0x06
    25c2:	97 83       	std	Z+7, r25	; 0x07
    25c4:	a0 87       	std	Z+8, r26	; 0x08
    25c6:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    25c8:	a6 18       	sub	r10, r6
    25ca:	b7 08       	sbc	r11, r7
    25cc:	c8 08       	sbc	r12, r8
    25ce:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    25d0:	6a 14       	cp	r6, r10
    25d2:	7b 04       	cpc	r7, r11
    25d4:	8c 04       	cpc	r8, r12
    25d6:	9d 04       	cpc	r9, r13
    25d8:	08 f4       	brcc	.+2      	; 0x25dc <f_lseek+0x20e>
    25da:	b0 cf       	rjmp	.-160    	; 0x253c <f_lseek+0x16e>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    25dc:	aa 81       	ldd	r26, Y+2	; 0x02
    25de:	bb 81       	ldd	r27, Y+3	; 0x03
    25e0:	16 96       	adiw	r26, 0x06	; 6
    25e2:	6d 90       	ld	r6, X+
    25e4:	7d 90       	ld	r7, X+
    25e6:	8d 90       	ld	r8, X+
    25e8:	9c 90       	ld	r9, X
    25ea:	19 97       	sbiw	r26, 0x09	; 9
    25ec:	6a 0c       	add	r6, r10
    25ee:	7b 1c       	adc	r7, r11
    25f0:	8c 1c       	adc	r8, r12
    25f2:	9d 1c       	adc	r9, r13
    25f4:	fd 01       	movw	r30, r26
    25f6:	66 82       	std	Z+6, r6	; 0x06
    25f8:	77 82       	std	Z+7, r7	; 0x07
    25fa:	80 86       	std	Z+8, r8	; 0x08
    25fc:	91 86       	std	Z+9, r9	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    25fe:	d6 01       	movw	r26, r12
    2600:	c5 01       	movw	r24, r10
    2602:	19 e0       	ldi	r17, 0x09	; 9
    2604:	b6 95       	lsr	r27
    2606:	a7 95       	ror	r26
    2608:	97 95       	ror	r25
    260a:	87 95       	ror	r24
    260c:	1a 95       	dec	r17
    260e:	d1 f7       	brne	.-12     	; 0x2604 <f_lseek+0x236>
    2610:	e8 2e       	mov	r14, r24
    2612:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	a8 22       	and	r10, r24
    261e:	b9 22       	and	r11, r25
    2620:	ca 22       	and	r12, r26
    2622:	db 22       	and	r13, r27
    2624:	a1 14       	cp	r10, r1
    2626:	b1 04       	cpc	r11, r1
    2628:	c1 04       	cpc	r12, r1
    262a:	d1 04       	cpc	r13, r1
    262c:	09 f4       	brne	.+2      	; 0x2630 <f_lseek+0x262>
    262e:	69 c0       	rjmp	.+210    	; 0x2702 <f_lseek+0x334>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2630:	00 81       	ld	r16, Z
    2632:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2634:	3e ef       	ldi	r19, 0xFE	; 254
    2636:	a3 2e       	mov	r10, r19
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	b3 2e       	mov	r11, r19
    263c:	3f ef       	ldi	r19, 0xFF	; 255
    263e:	c3 2e       	mov	r12, r19
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	d3 2e       	mov	r13, r19
    2644:	a4 0e       	add	r10, r20
    2646:	b5 1e       	adc	r11, r21
    2648:	c6 1e       	adc	r12, r22
    264a:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    264c:	f8 01       	movw	r30, r16
    264e:	86 85       	ldd	r24, Z+14	; 0x0e
    2650:	97 85       	ldd	r25, Z+15	; 0x0f
    2652:	a0 89       	ldd	r26, Z+16	; 0x10
    2654:	b1 89       	ldd	r27, Z+17	; 0x11
    2656:	02 97       	sbiw	r24, 0x02	; 2
    2658:	a1 09       	sbc	r26, r1
    265a:	b1 09       	sbc	r27, r1
    265c:	a8 16       	cp	r10, r24
    265e:	b9 06       	cpc	r11, r25
    2660:	ca 06       	cpc	r12, r26
    2662:	db 06       	cpc	r13, r27
    2664:	c0 f4       	brcc	.+48     	; 0x2696 <f_lseek+0x2c8>
	return clst * fs->csize + fs->database;
    2666:	22 81       	ldd	r18, Z+2	; 0x02
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	c6 01       	movw	r24, r12
    2670:	b5 01       	movw	r22, r10
    2672:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    2676:	9b 01       	movw	r18, r22
    2678:	ac 01       	movw	r20, r24
    267a:	f8 01       	movw	r30, r16
    267c:	82 8d       	ldd	r24, Z+26	; 0x1a
    267e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2680:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2682:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2684:	28 0f       	add	r18, r24
    2686:	39 1f       	adc	r19, r25
    2688:	4a 1f       	adc	r20, r26
    268a:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    268c:	21 15       	cp	r18, r1
    268e:	31 05       	cpc	r19, r1
    2690:	41 05       	cpc	r20, r1
    2692:	51 05       	cpc	r21, r1
    2694:	59 f4       	brne	.+22     	; 0x26ac <f_lseek+0x2de>
    2696:	aa 81       	ldd	r26, Y+2	; 0x02
    2698:	bb 81       	ldd	r27, Y+3	; 0x03
    269a:	14 96       	adiw	r26, 0x04	; 4
    269c:	8c 91       	ld	r24, X
    269e:	14 97       	sbiw	r26, 0x04	; 4
    26a0:	80 68       	ori	r24, 0x80	; 128
    26a2:	14 96       	adiw	r26, 0x04	; 4
    26a4:	8c 93       	st	X, r24
    26a6:	b2 e0       	ldi	r27, 0x02	; 2
    26a8:	b9 83       	std	Y+1, r27	; 0x01
    26aa:	2b c0       	rjmp	.+86     	; 0x2702 <f_lseek+0x334>
				nsect += fp->csect;
    26ac:	2e 0d       	add	r18, r14
    26ae:	31 1d       	adc	r19, r1
    26b0:	41 1d       	adc	r20, r1
    26b2:	51 1d       	adc	r21, r1
				fp->csect++;
    26b4:	e3 94       	inc	r14
    26b6:	ea 81       	ldd	r30, Y+2	; 0x02
    26b8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ba:	e5 82       	std	Z+5, r14	; 0x05
			}
		}
	}
	if (nsect && nsect != fp->dsect && fp->fptr % SS(fp->fs)) {
    26bc:	21 15       	cp	r18, r1
    26be:	31 05       	cpc	r19, r1
    26c0:	41 05       	cpc	r20, r1
    26c2:	51 05       	cpc	r21, r1
    26c4:	f1 f0       	breq	.+60     	; 0x2702 <f_lseek+0x334>
    26c6:	86 89       	ldd	r24, Z+22	; 0x16
    26c8:	97 89       	ldd	r25, Z+23	; 0x17
    26ca:	a0 8d       	ldd	r26, Z+24	; 0x18
    26cc:	b1 8d       	ldd	r27, Z+25	; 0x19
    26ce:	28 17       	cp	r18, r24
    26d0:	39 07       	cpc	r19, r25
    26d2:	4a 07       	cpc	r20, r26
    26d4:	5b 07       	cpc	r21, r27
    26d6:	a9 f0       	breq	.+42     	; 0x2702 <f_lseek+0x334>
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	a0 e0       	ldi	r26, 0x00	; 0
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	68 22       	and	r6, r24
    26e2:	79 22       	and	r7, r25
    26e4:	8a 22       	and	r8, r26
    26e6:	9b 22       	and	r9, r27
    26e8:	61 14       	cp	r6, r1
    26ea:	71 04       	cpc	r7, r1
    26ec:	81 04       	cpc	r8, r1
    26ee:	91 04       	cpc	r9, r1
    26f0:	41 f0       	breq	.+16     	; 0x2702 <f_lseek+0x334>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    26f2:	aa 81       	ldd	r26, Y+2	; 0x02
    26f4:	bb 81       	ldd	r27, Y+3	; 0x03
    26f6:	56 96       	adiw	r26, 0x16	; 22
    26f8:	2d 93       	st	X+, r18
    26fa:	3d 93       	st	X+, r19
    26fc:	4d 93       	st	X+, r20
    26fe:	5c 93       	st	X, r21
    2700:	59 97       	sbiw	r26, 0x19	; 25
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	ff 90       	pop	r15
    2714:	ef 90       	pop	r14
    2716:	df 90       	pop	r13
    2718:	cf 90       	pop	r12
    271a:	bf 90       	pop	r11
    271c:	af 90       	pop	r10
    271e:	9f 90       	pop	r9
    2720:	8f 90       	pop	r8
    2722:	7f 90       	pop	r7
    2724:	6f 90       	pop	r6
    2726:	5f 90       	pop	r5
    2728:	4f 90       	pop	r4
    272a:	3f 90       	pop	r3
    272c:	2f 90       	pop	r2
    272e:	08 95       	ret

00002730 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2730:	6f 92       	push	r6
    2732:	7f 92       	push	r7
    2734:	8f 92       	push	r8
    2736:	9f 92       	push	r9
    2738:	af 92       	push	r10
    273a:	bf 92       	push	r11
    273c:	cf 92       	push	r12
    273e:	df 92       	push	r13
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	2c 97       	sbiw	r28, 0x0c	; 12
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	4c 01       	movw	r8, r24
    275e:	3b 01       	movw	r6, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2760:	dc 01       	movw	r26, r24
    2762:	6d 91       	ld	r22, X+
    2764:	7c 91       	ld	r23, X
    2766:	11 97       	sbiw	r26, 0x01	; 1
    2768:	14 96       	adiw	r26, 0x04	; 4
    276a:	8d 91       	ld	r24, X+
    276c:	9c 91       	ld	r25, X
    276e:	15 97       	sbiw	r26, 0x05	; 5
    2770:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <validate>
	if (res == FR_OK) {
    2774:	88 23       	and	r24, r24
    2776:	09 f0       	breq	.+2      	; 0x277a <f_readdir+0x4a>
    2778:	f5 c0       	rjmp	.+490    	; 0x2964 <f_readdir+0x234>
		INITBUF((*dj), sfn, lfn);
    277a:	ce 01       	movw	r24, r28
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	f4 01       	movw	r30, r8
    2780:	95 8b       	std	Z+21, r25	; 0x15
    2782:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    2784:	61 14       	cp	r6, r1
    2786:	71 04       	cpc	r7, r1
    2788:	11 f0       	breq	.+4      	; 0x278e <f_readdir+0x5e>
    278a:	84 e0       	ldi	r24, 0x04	; 4
    278c:	26 c0       	rjmp	.+76     	; 0x27da <f_readdir+0xaa>
			res = dir_seek(dj, 0);
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	c4 01       	movw	r24, r8
    2794:	0e 94 2d 10 	call	0x205a	; 0x205a <dir_seek>
    2798:	e5 c0       	rjmp	.+458    	; 0x2964 <f_readdir+0x234>


	ord = sum = 0xFF;
	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    279a:	d4 01       	movw	r26, r8
    279c:	14 96       	adiw	r26, 0x04	; 4
    279e:	8d 91       	ld	r24, X+
    27a0:	9c 91       	ld	r25, X
    27a2:	15 97       	sbiw	r26, 0x05	; 5
    27a4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
		if (res != FR_OK) break;
    27a8:	88 23       	and	r24, r24
    27aa:	19 f5       	brne	.+70     	; 0x27f2 <f_readdir+0xc2>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    27ac:	d4 01       	movw	r26, r8
    27ae:	52 96       	adiw	r26, 0x12	; 18
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    27b6:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    27b8:	99 23       	and	r25, r25
    27ba:	09 f4       	brne	.+2      	; 0x27be <f_readdir+0x8e>
    27bc:	e8 c0       	rjmp	.+464    	; 0x298e <f_readdir+0x25e>
		a = dir[DIR_Attr] & AM_MASK;
    27be:	83 85       	ldd	r24, Z+11	; 0x0b
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else	/* Non LFN configuration */
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    27c0:	95 3e       	cpi	r25, 0xE5	; 229
    27c2:	29 f0       	breq	.+10     	; 0x27ce <f_readdir+0x9e>
    27c4:	9e 32       	cpi	r25, 0x2E	; 46
    27c6:	19 f0       	breq	.+6      	; 0x27ce <f_readdir+0x9e>
    27c8:	8f 73       	andi	r24, 0x3F	; 63
    27ca:	83 ff       	sbrs	r24, 3
    27cc:	1e c0       	rjmp	.+60     	; 0x280a <f_readdir+0xda>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	c4 01       	movw	r24, r8
    27d2:	0e 94 18 11 	call	0x2230	; 0x2230 <dir_next>
		if (res != FR_OK) break;
    27d6:	88 23       	and	r24, r24
    27d8:	61 f4       	brne	.+24     	; 0x27f2 <f_readdir+0xc2>
	BYTE a, c, ord, sum, *dir;


	ord = sum = 0xFF;
	res = FR_NO_FILE;
	while (dj->sect) {
    27da:	f4 01       	movw	r30, r8
    27dc:	46 85       	ldd	r20, Z+14	; 0x0e
    27de:	57 85       	ldd	r21, Z+15	; 0x0f
    27e0:	60 89       	ldd	r22, Z+16	; 0x10
    27e2:	71 89       	ldd	r23, Z+17	; 0x11
    27e4:	41 15       	cp	r20, r1
    27e6:	51 05       	cpc	r21, r1
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	b1 f6       	brne	.-84     	; 0x279a <f_readdir+0x6a>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    27ee:	88 23       	and	r24, r24
    27f0:	61 f0       	breq	.+24     	; 0x280a <f_readdir+0xda>
    27f2:	d4 01       	movw	r26, r8
    27f4:	1e 96       	adiw	r26, 0x0e	; 14
    27f6:	1d 92       	st	X+, r1
    27f8:	1d 92       	st	X+, r1
    27fa:	1d 92       	st	X+, r1
    27fc:	1c 92       	st	X, r1
    27fe:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    2800:	84 30       	cpi	r24, 0x04	; 4
    2802:	19 f0       	breq	.+6      	; 0x280a <f_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2804:	88 23       	and	r24, r24
    2806:	09 f0       	breq	.+2      	; 0x280a <f_readdir+0xda>
    2808:	ad c0       	rjmp	.+346    	; 0x2964 <f_readdir+0x234>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    280a:	93 01       	movw	r18, r6
    280c:	27 5f       	subi	r18, 0xF7	; 247
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    2810:	f4 01       	movw	r30, r8
    2812:	86 85       	ldd	r24, Z+14	; 0x0e
    2814:	97 85       	ldd	r25, Z+15	; 0x0f
    2816:	a0 89       	ldd	r26, Z+16	; 0x10
    2818:	b1 89       	ldd	r27, Z+17	; 0x11
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	a1 05       	cpc	r26, r1
    281e:	b1 05       	cpc	r27, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <f_readdir+0xf4>
    2822:	90 c0       	rjmp	.+288    	; 0x2944 <f_readdir+0x214>
		dir = dj->dir;
    2824:	c2 88       	ldd	r12, Z+18	; 0x12
    2826:	d3 88       	ldd	r13, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    2828:	d6 01       	movw	r26, r12
    282a:	1c 96       	adiw	r26, 0x0c	; 12
    282c:	9c 91       	ld	r25, X
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    2832:	69 2f       	mov	r22, r25
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	68 70       	andi	r22, 0x08	; 8
    2838:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
    283a:	f6 01       	movw	r30, r12
    283c:	e4 0f       	add	r30, r20
    283e:	f5 1f       	adc	r31, r21
    2840:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2842:	e0 32       	cpi	r30, 0x20	; 32
    2844:	99 f0       	breq	.+38     	; 0x286c <f_readdir+0x13c>
			if (c == 0x05) c = 0xE5;
    2846:	e5 30       	cpi	r30, 0x05	; 5
    2848:	09 f4       	brne	.+2      	; 0x284c <f_readdir+0x11c>
    284a:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    284c:	61 15       	cp	r22, r1
    284e:	71 05       	cpc	r23, r1
    2850:	29 f0       	breq	.+10     	; 0x285c <f_readdir+0x12c>
    2852:	8e 2f       	mov	r24, r30
    2854:	81 54       	subi	r24, 0x41	; 65
    2856:	8a 31       	cpi	r24, 0x1A	; 26
    2858:	08 f4       	brcc	.+2      	; 0x285c <f_readdir+0x12c>
    285a:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    285c:	d9 01       	movw	r26, r18
    285e:	ed 93       	st	X+, r30
    2860:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    2862:	4f 5f       	subi	r20, 0xFF	; 255
    2864:	5f 4f       	sbci	r21, 0xFF	; 255
    2866:	48 30       	cpi	r20, 0x08	; 8
    2868:	51 05       	cpc	r21, r1
    286a:	39 f7       	brne	.-50     	; 0x283a <f_readdir+0x10a>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    286c:	f6 01       	movw	r30, r12
    286e:	80 85       	ldd	r24, Z+8	; 0x08
    2870:	80 32       	cpi	r24, 0x20	; 32
    2872:	11 f4       	brne	.+4      	; 0x2878 <f_readdir+0x148>
    2874:	59 01       	movw	r10, r18
    2876:	1d c0       	rjmp	.+58     	; 0x28b2 <f_readdir+0x182>
			*p++ = '.';
    2878:	8e e2       	ldi	r24, 0x2E	; 46
    287a:	d9 01       	movw	r26, r18
    287c:	8d 93       	st	X+, r24
    287e:	5d 01       	movw	r10, r26
    2880:	f6 01       	movw	r30, r12
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    2882:	49 2f       	mov	r20, r25
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	40 71       	andi	r20, 0x10	; 16
    2888:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    288a:	2c 5f       	subi	r18, 0xFC	; 252
    288c:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    288e:	90 85       	ldd	r25, Z+8	; 0x08
				if (c == ' ') break;
    2890:	90 32       	cpi	r25, 0x20	; 32
    2892:	79 f0       	breq	.+30     	; 0x28b2 <f_readdir+0x182>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    2894:	41 15       	cp	r20, r1
    2896:	51 05       	cpc	r21, r1
    2898:	29 f0       	breq	.+10     	; 0x28a4 <f_readdir+0x174>
    289a:	89 2f       	mov	r24, r25
    289c:	81 54       	subi	r24, 0x41	; 65
    289e:	8a 31       	cpi	r24, 0x1A	; 26
    28a0:	08 f4       	brcc	.+2      	; 0x28a4 <f_readdir+0x174>
    28a2:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    28a4:	d5 01       	movw	r26, r10
    28a6:	9d 93       	st	X+, r25
    28a8:	5d 01       	movw	r10, r26
    28aa:	31 96       	adiw	r30, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    28ac:	a2 17       	cp	r26, r18
    28ae:	b3 07       	cpc	r27, r19
    28b0:	71 f7       	brne	.-36     	; 0x288e <f_readdir+0x15e>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    28b2:	f6 01       	movw	r30, r12
    28b4:	83 85       	ldd	r24, Z+11	; 0x0b
    28b6:	d3 01       	movw	r26, r6
    28b8:	18 96       	adiw	r26, 0x08	; 8
    28ba:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    28bc:	27 8d       	ldd	r18, Z+31	; 0x1f
    28be:	86 8d       	ldd	r24, Z+30	; 0x1e
    28c0:	65 8d       	ldd	r22, Z+29	; 0x1d
    28c2:	e4 8c       	ldd	r14, Z+28	; 0x1c
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	52 2f       	mov	r21, r18
    28cc:	44 27       	eor	r20, r20
    28ce:	33 27       	eor	r19, r19
    28d0:	22 27       	eor	r18, r18
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e0       	ldi	r26, 0x00	; 0
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	dc 01       	movw	r26, r24
    28da:	99 27       	eor	r25, r25
    28dc:	88 27       	eor	r24, r24
    28de:	28 2b       	or	r18, r24
    28e0:	39 2b       	or	r19, r25
    28e2:	4a 2b       	or	r20, r26
    28e4:	5b 2b       	or	r21, r27
    28e6:	ff 24       	eor	r15, r15
    28e8:	00 e0       	ldi	r16, 0x00	; 0
    28ea:	10 e0       	ldi	r17, 0x00	; 0
    28ec:	2e 29       	or	r18, r14
    28ee:	3f 29       	or	r19, r15
    28f0:	40 2b       	or	r20, r16
    28f2:	51 2b       	or	r21, r17
    28f4:	96 2f       	mov	r25, r22
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	28 2b       	or	r18, r24
    28fe:	39 2b       	or	r19, r25
    2900:	4a 2b       	or	r20, r26
    2902:	5b 2b       	or	r21, r27
    2904:	f3 01       	movw	r30, r6
    2906:	20 83       	st	Z, r18
    2908:	31 83       	std	Z+1, r19	; 0x01
    290a:	42 83       	std	Z+2, r20	; 0x02
    290c:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    290e:	d6 01       	movw	r26, r12
    2910:	59 96       	adiw	r26, 0x19	; 25
    2912:	4c 91       	ld	r20, X
    2914:	59 97       	sbiw	r26, 0x19	; 25
    2916:	58 96       	adiw	r26, 0x18	; 24
    2918:	2c 91       	ld	r18, X
    291a:	58 97       	sbiw	r26, 0x18	; 24
    291c:	94 2f       	mov	r25, r20
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	82 2b       	or	r24, r18
    2924:	93 2b       	or	r25, r19
    2926:	95 83       	std	Z+5, r25	; 0x05
    2928:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    292a:	57 96       	adiw	r26, 0x17	; 23
    292c:	4c 91       	ld	r20, X
    292e:	57 97       	sbiw	r26, 0x17	; 23
    2930:	56 96       	adiw	r26, 0x16	; 22
    2932:	2c 91       	ld	r18, X
    2934:	94 2f       	mov	r25, r20
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	82 2b       	or	r24, r18
    293c:	93 2b       	or	r25, r19
    293e:	97 83       	std	Z+7, r25	; 0x07
    2940:	86 83       	std	Z+6, r24	; 0x06
    2942:	95 01       	movw	r18, r10
	}
	*p = 0;
    2944:	f9 01       	movw	r30, r18
    2946:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	c4 01       	movw	r24, r8
    294c:	0e 94 18 11 	call	0x2230	; 0x2230 <dir_next>
				if (res == FR_NO_FILE) {
    2950:	84 30       	cpi	r24, 0x04	; 4
    2952:	41 f4       	brne	.+16     	; 0x2964 <f_readdir+0x234>
					dj->sect = 0;
    2954:	d4 01       	movw	r26, r8
    2956:	1e 96       	adiw	r26, 0x0e	; 14
    2958:	1d 92       	st	X+, r1
    295a:	1d 92       	st	X+, r1
    295c:	1d 92       	st	X+, r1
    295e:	1c 92       	st	X, r1
    2960:	51 97       	sbiw	r26, 0x11	; 17
    2962:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2964:	2c 96       	adiw	r28, 0x0c	; 12
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	7f 90       	pop	r7
    298a:	6f 90       	pop	r6
    298c:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	30 cf       	rjmp	.-416    	; 0x27f2 <f_readdir+0xc2>

00002992 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2992:	0f 93       	push	r16
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	ec 01       	movw	r28, r24
    299a:	9a 01       	movw	r18, r20
    299c:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    299e:	bc 01       	movw	r22, r24
    29a0:	6e 5d       	subi	r22, 0xDE	; 222
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	01 e0       	ldi	r16, 0x01	; 1
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	0e 94 06 0c 	call	0x180c	; 0x180c <disk_read>
    29ac:	88 23       	and	r24, r24
    29ae:	11 f0       	breq	.+4      	; 0x29b4 <check_fs+0x22>
    29b0:	23 e0       	ldi	r18, 0x03	; 3
    29b2:	32 c0       	rjmp	.+100    	; 0x2a18 <check_fs+0x86>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)				/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    29b4:	cf 5d       	subi	r28, 0xDF	; 223
    29b6:	dd 4f       	sbci	r29, 0xFD	; 253
    29b8:	48 81       	ld	r20, Y
    29ba:	2a 91       	ld	r18, -Y
    29bc:	c0 52       	subi	r28, 0x20	; 32
    29be:	d2 40       	sbci	r29, 0x02	; 2
    29c0:	94 2f       	mov	r25, r20
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	82 2b       	or	r24, r18
    29c8:	93 2b       	or	r25, r19
    29ca:	85 55       	subi	r24, 0x55	; 85
    29cc:	9a 4a       	sbci	r25, 0xAA	; 170
    29ce:	11 f0       	breq	.+4      	; 0x29d4 <check_fs+0x42>
    29d0:	22 e0       	ldi	r18, 0x02	; 2
    29d2:	22 c0       	rjmp	.+68     	; 0x2a18 <check_fs+0x86>
		return 2;

	if (!MemCmp(&fs->win[BS_FilSysType], "FAT", 3))		/* Check FAT signature */
    29d4:	43 e0       	ldi	r20, 0x03	; 3
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	6f e4       	ldi	r22, 0x4F	; 79
    29da:	71 e0       	ldi	r23, 0x01	; 1
    29dc:	ce 01       	movw	r24, r28
    29de:	88 5a       	subi	r24, 0xA8	; 168
    29e0:	9f 4f       	sbci	r25, 0xFF	; 255
    29e2:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <memcmp>
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	11 f4       	brne	.+4      	; 0x29ee <check_fs+0x5c>
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	15 c0       	rjmp	.+42     	; 0x2a18 <check_fs+0x86>
		return 0;
	if (!MemCmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))
    29ee:	45 e0       	ldi	r20, 0x05	; 5
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	63 e5       	ldi	r22, 0x53	; 83
    29f4:	71 e0       	ldi	r23, 0x01	; 1
    29f6:	ce 01       	movw	r24, r28
    29f8:	8c 58       	subi	r24, 0x8C	; 140
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <memcmp>
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	11 f0       	breq	.+4      	; 0x2a08 <check_fs+0x76>
    2a04:	21 e0       	ldi	r18, 0x01	; 1
    2a06:	08 c0       	rjmp	.+16     	; 0x2a18 <check_fs+0x86>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	c6 5b       	subi	r28, 0xB6	; 182
    2a0c:	df 4f       	sbci	r29, 0xFF	; 255
    2a0e:	88 81       	ld	r24, Y
    2a10:	87 ff       	sbrs	r24, 7
    2a12:	21 e0       	ldi	r18, 0x01	; 1
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	28 27       	eor	r18, r24
		return 0;

	return 1;
}
    2a18:	82 2f       	mov	r24, r18
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const char **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2a22:	2f 92       	push	r2
    2a24:	3f 92       	push	r3
    2a26:	4f 92       	push	r4
    2a28:	5f 92       	push	r5
    2a2a:	6f 92       	push	r6
    2a2c:	7f 92       	push	r7
    2a2e:	8f 92       	push	r8
    2a30:	9f 92       	push	r9
    2a32:	af 92       	push	r10
    2a34:	bf 92       	push	r11
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	dc 01       	movw	r26, r24
    2a48:	9b 01       	movw	r18, r22
	FRESULT res;
	BYTE drv, fmt, *tbl;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const char *p = *path;
    2a4a:	ed 91       	ld	r30, X+
    2a4c:	fc 91       	ld	r31, X
    2a4e:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;


	/* Get drive number from the path name */
	drv = p[0] - '0';			/* Is there a drive number? */
    2a50:	90 81       	ld	r25, Z
    2a52:	90 53       	subi	r25, 0x30	; 48
	if (drv <= 9 && p[1] == ':') {
    2a54:	9a 30       	cpi	r25, 0x0A	; 10
    2a56:	50 f4       	brcc	.+20     	; 0x2a6c <auto_mount+0x4a>
    2a58:	81 81       	ldd	r24, Z+1	; 0x01
    2a5a:	8a 33       	cpi	r24, 0x3A	; 58
    2a5c:	39 f4       	brne	.+14     	; 0x2a6c <auto_mount+0x4a>
		p += 2;					/* Found a drive number, get and strip it */
		*path = p;				/* Return pointer to the path name */
    2a5e:	32 96       	adiw	r30, 0x02	; 2
    2a60:	ed 93       	st	X+, r30
    2a62:	fc 93       	st	X, r31
	} else {
		drv = 0;				/* No drive number is given, use drive number 0 as default */
	}

	/* Check if the drive number is valid or not */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;	/* Is the drive number valid? */
    2a64:	99 23       	and	r25, r25
    2a66:	11 f0       	breq	.+4      	; 0x2a6c <auto_mount+0x4a>
    2a68:	8b e0       	ldi	r24, 0x0B	; 11
    2a6a:	7b c1       	rjmp	.+758    	; 0x2d62 <auto_mount+0x340>
	*rfs = fs = FatFs[drv];					/* Returen pointer to the corresponding file system object */
    2a6c:	c0 91 da 04 	lds	r28, 0x04DA
    2a70:	d0 91 db 04 	lds	r29, 0x04DB
    2a74:	f9 01       	movw	r30, r18
    2a76:	d1 83       	std	Z+1, r29	; 0x01
    2a78:	c0 83       	st	Z, r28
	if (!fs) return FR_NOT_ENABLED;			/* Is the file system object registered? */
    2a7a:	20 97       	sbiw	r28, 0x00	; 0
    2a7c:	11 f4       	brne	.+4      	; 0x2a82 <auto_mount+0x60>
    2a7e:	8c e0       	ldi	r24, 0x0C	; 12
    2a80:	70 c1       	rjmp	.+736    	; 0x2d62 <auto_mount+0x340>

	ENTER_FF(fs);				/* Lock file system */

	if (fs->fs_type) {						/* If the logical drive has been mounted */
    2a82:	88 81       	ld	r24, Y
    2a84:	88 23       	and	r24, r24
    2a86:	29 f0       	breq	.+10     	; 0x2a92 <auto_mount+0x70>
		stat = disk_status(fs->drive);
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <disk_status>
		if (!(stat & STA_NOINIT)) {			/* and physical drive is kept initialized (has not been changed), */
    2a8e:	80 ff       	sbrs	r24, 0
    2a90:	65 c1       	rjmp	.+714    	; 0x2d5c <auto_mount+0x33a>
		}
	}

	/* The logical drive must be re-mounted. Following code attempts to mount the logical drive */

	fs->fs_type = 0;					/* Clear the file system object */
    2a92:	18 82       	st	Y, r1
	fs->drive = LD2PD(drv);				/* Bind the logical drive and a physical drive */
    2a94:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	0e 94 35 0b 	call	0x166a	; 0x166a <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    2a9c:	80 ff       	sbrs	r24, 0
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <auto_mount+0x82>
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	5f c1       	rjmp	.+702    	; 0x2d62 <auto_mount+0x340>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	ce 01       	movw	r24, r28
    2aae:	0e 94 c9 14 	call	0x2992	; 0x2992 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	21 f0       	breq	.+8      	; 0x2abe <auto_mount+0x9c>
    2ab6:	66 24       	eor	r6, r6
    2ab8:	77 24       	eor	r7, r7
    2aba:	43 01       	movw	r8, r6
    2abc:	30 c0       	rjmp	.+96     	; 0x2b1e <auto_mount+0xfc>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(drv) * 16];	/* Partition table */
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e0 52       	subi	r30, 0x20	; 32
    2ac2:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2ac4:	84 81       	ldd	r24, Z+4	; 0x04
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <auto_mount+0xaa>
    2aca:	4a c1       	rjmp	.+660    	; 0x2d60 <auto_mount+0x33e>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2acc:	23 85       	ldd	r18, Z+11	; 0x0b
    2ace:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad0:	61 85       	ldd	r22, Z+9	; 0x09
    2ad2:	e0 84       	ldd	r14, Z+8	; 0x08
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	92 2e       	mov	r9, r18
    2adc:	88 24       	eor	r8, r8
    2ade:	77 24       	eor	r7, r7
    2ae0:	66 24       	eor	r6, r6
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e0       	ldi	r26, 0x00	; 0
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	dc 01       	movw	r26, r24
    2aea:	99 27       	eor	r25, r25
    2aec:	88 27       	eor	r24, r24
    2aee:	68 2a       	or	r6, r24
    2af0:	79 2a       	or	r7, r25
    2af2:	8a 2a       	or	r8, r26
    2af4:	9b 2a       	or	r9, r27
    2af6:	ff 24       	eor	r15, r15
    2af8:	00 e0       	ldi	r16, 0x00	; 0
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	6e 28       	or	r6, r14
    2afe:	7f 28       	or	r7, r15
    2b00:	80 2a       	or	r8, r16
    2b02:	91 2a       	or	r9, r17
    2b04:	96 2f       	mov	r25, r22
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	a0 e0       	ldi	r26, 0x00	; 0
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	68 2a       	or	r6, r24
    2b0e:	79 2a       	or	r7, r25
    2b10:	8a 2a       	or	r8, r26
    2b12:	9b 2a       	or	r9, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2b14:	b4 01       	movw	r22, r8
    2b16:	a3 01       	movw	r20, r6
    2b18:	ce 01       	movw	r24, r28
    2b1a:	0e 94 c9 14 	call	0x2992	; 0x2992 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2b1e:	83 30       	cpi	r24, 0x03	; 3
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <auto_mount+0x104>
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	1e c1       	rjmp	.+572    	; 0x2d62 <auto_mount+0x340>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2b26:	88 23       	and	r24, r24
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <auto_mount+0x10a>
    2b2a:	1a c1       	rjmp	.+564    	; 0x2d60 <auto_mount+0x33e>
    2b2c:	4e a5       	ldd	r20, Y+46	; 0x2e
    2b2e:	2d a5       	ldd	r18, Y+45	; 0x2d
    2b30:	94 2f       	mov	r25, r20
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	82 2b       	or	r24, r18
    2b38:	93 2b       	or	r25, r19
    2b3a:	80 50       	subi	r24, 0x00	; 0
    2b3c:	92 40       	sbci	r25, 0x02	; 2
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <auto_mount+0x120>
    2b40:	0f c1       	rjmp	.+542    	; 0x2d60 <auto_mount+0x33e>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2b42:	49 ad       	ldd	r20, Y+57	; 0x39
    2b44:	28 ad       	ldd	r18, Y+56	; 0x38
    2b46:	94 2f       	mov	r25, r20
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	82 2b       	or	r24, r18
    2b4e:	93 2b       	or	r25, r19
    2b50:	5c 01       	movw	r10, r24
    2b52:	cc 24       	eor	r12, r12
    2b54:	dd 24       	eor	r13, r13
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2b56:	a1 14       	cp	r10, r1
    2b58:	b1 04       	cpc	r11, r1
    2b5a:	c1 04       	cpc	r12, r1
    2b5c:	d1 04       	cpc	r13, r1
    2b5e:	41 f5       	brne	.+80     	; 0x2bb0 <auto_mount+0x18e>
    2b60:	c7 5b       	subi	r28, 0xB7	; 183
    2b62:	df 4f       	sbci	r29, 0xFF	; 255
    2b64:	28 81       	ld	r18, Y
    2b66:	8a 91       	ld	r24, -Y
    2b68:	6a 91       	ld	r22, -Y
    2b6a:	ea 90       	ld	r14, -Y
    2b6c:	c6 54       	subi	r28, 0x46	; 70
    2b6e:	d0 40       	sbci	r29, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	d2 2e       	mov	r13, r18
    2b78:	cc 24       	eor	r12, r12
    2b7a:	bb 24       	eor	r11, r11
    2b7c:	aa 24       	eor	r10, r10
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	dc 01       	movw	r26, r24
    2b86:	99 27       	eor	r25, r25
    2b88:	88 27       	eor	r24, r24
    2b8a:	a8 2a       	or	r10, r24
    2b8c:	b9 2a       	or	r11, r25
    2b8e:	ca 2a       	or	r12, r26
    2b90:	db 2a       	or	r13, r27
    2b92:	ff 24       	eor	r15, r15
    2b94:	00 e0       	ldi	r16, 0x00	; 0
    2b96:	10 e0       	ldi	r17, 0x00	; 0
    2b98:	ae 28       	or	r10, r14
    2b9a:	bf 28       	or	r11, r15
    2b9c:	c0 2a       	or	r12, r16
    2b9e:	d1 2a       	or	r13, r17
    2ba0:	96 2f       	mov	r25, r22
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	a0 e0       	ldi	r26, 0x00	; 0
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	a8 2a       	or	r10, r24
    2baa:	b9 2a       	or	r11, r25
    2bac:	ca 2a       	or	r12, r26
    2bae:	db 2a       	or	r13, r27
	fs->sects_fat = fsize;
    2bb0:	aa 86       	std	Y+10, r10	; 0x0a
    2bb2:	bb 86       	std	Y+11, r11	; 0x0b
    2bb4:	cc 86       	std	Y+12, r12	; 0x0c
    2bb6:	dd 86       	std	Y+13, r13	; 0x0d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2bb8:	2a a9       	ldd	r18, Y+50	; 0x32
    2bba:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	b5 01       	movw	r22, r10
    2bc6:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    2bca:	1b 01       	movw	r2, r22
    2bcc:	2c 01       	movw	r4, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2bce:	49 a9       	ldd	r20, Y+49	; 0x31
    2bd0:	28 a9       	ldd	r18, Y+48	; 0x30
    2bd2:	94 2f       	mov	r25, r20
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	82 2b       	or	r24, r18
    2bda:	93 2b       	or	r25, r19
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	68 0e       	add	r6, r24
    2be2:	79 1e       	adc	r7, r25
    2be4:	8a 1e       	adc	r8, r26
    2be6:	9b 1e       	adc	r9, r27
    2be8:	6a 8a       	std	Y+18, r6	; 0x12
    2bea:	7b 8a       	std	Y+19, r7	; 0x13
    2bec:	8c 8a       	std	Y+20, r8	; 0x14
    2bee:	9d 8a       	std	Y+21, r9	; 0x15
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2bf4:	2c a9       	ldd	r18, Y+52	; 0x34
    2bf6:	3b a9       	ldd	r19, Y+51	; 0x33
    2bf8:	92 2f       	mov	r25, r18
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	e3 2f       	mov	r30, r19
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	e8 2b       	or	r30, r24
    2c02:	f9 2b       	or	r31, r25
    2c04:	f9 87       	std	Y+9, r31	; 0x09
    2c06:	e8 87       	std	Y+8, r30	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    2c08:	4e a9       	ldd	r20, Y+54	; 0x36
    2c0a:	2d a9       	ldd	r18, Y+53	; 0x35
    2c0c:	94 2f       	mov	r25, r20
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	82 2b       	or	r24, r18
    2c14:	93 2b       	or	r25, r19
    2c16:	5c 01       	movw	r10, r24
    2c18:	cc 24       	eor	r12, r12
    2c1a:	dd 24       	eor	r13, r13
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2c1c:	a1 14       	cp	r10, r1
    2c1e:	b1 04       	cpc	r11, r1
    2c20:	c1 04       	cpc	r12, r1
    2c22:	d1 04       	cpc	r13, r1
    2c24:	41 f5       	brne	.+80     	; 0x2c76 <auto_mount+0x254>
    2c26:	cb 5b       	subi	r28, 0xBB	; 187
    2c28:	df 4f       	sbci	r29, 0xFF	; 255
    2c2a:	28 81       	ld	r18, Y
    2c2c:	8a 91       	ld	r24, -Y
    2c2e:	6a 91       	ld	r22, -Y
    2c30:	ea 90       	ld	r14, -Y
    2c32:	c2 54       	subi	r28, 0x42	; 66
    2c34:	d0 40       	sbci	r29, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	d2 2e       	mov	r13, r18
    2c3e:	cc 24       	eor	r12, r12
    2c40:	bb 24       	eor	r11, r11
    2c42:	aa 24       	eor	r10, r10
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	99 27       	eor	r25, r25
    2c4e:	88 27       	eor	r24, r24
    2c50:	a8 2a       	or	r10, r24
    2c52:	b9 2a       	or	r11, r25
    2c54:	ca 2a       	or	r12, r26
    2c56:	db 2a       	or	r13, r27
    2c58:	ff 24       	eor	r15, r15
    2c5a:	00 e0       	ldi	r16, 0x00	; 0
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	ae 28       	or	r10, r14
    2c60:	bf 28       	or	r11, r15
    2c62:	c0 2a       	or	r12, r16
    2c64:	d1 2a       	or	r13, r17
    2c66:	96 2f       	mov	r25, r22
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	a8 2a       	or	r10, r24
    2c70:	b9 2a       	or	r11, r25
    2c72:	ca 2a       	or	r12, r26
    2c74:	db 2a       	or	r13, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    2c76:	49 a9       	ldd	r20, Y+49	; 0x31
    2c78:	28 a9       	ldd	r18, Y+48	; 0x30
    2c7a:	94 2f       	mov	r25, r20
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	82 2b       	or	r24, r18
    2c82:	93 2b       	or	r25, r19
    2c84:	a0 e0       	ldi	r26, 0x00	; 0
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	a8 1a       	sub	r10, r24
    2c8a:	b9 0a       	sbc	r11, r25
    2c8c:	ca 0a       	sbc	r12, r26
    2c8e:	db 0a       	sbc	r13, r27
    2c90:	a2 18       	sub	r10, r2
    2c92:	b3 08       	sbc	r11, r3
    2c94:	c4 08       	sbc	r12, r4
    2c96:	d5 08       	sbc	r13, r5
    2c98:	14 e0       	ldi	r17, 0x04	; 4
    2c9a:	f6 95       	lsr	r31
    2c9c:	e7 95       	ror	r30
    2c9e:	1a 95       	dec	r17
    2ca0:	e1 f7       	brne	.-8      	; 0x2c9a <auto_mount+0x278>
    2ca2:	cf 01       	movw	r24, r30
    2ca4:	a0 e0       	ldi	r26, 0x00	; 0
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	a8 1a       	sub	r10, r24
    2caa:	b9 0a       	sbc	r11, r25
    2cac:	ca 0a       	sbc	r12, r26
    2cae:	db 0a       	sbc	r13, r27
    2cb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	c6 01       	movw	r24, r12
    2cba:	b5 01       	movw	r22, r10
    2cbc:	0e 94 76 28 	call	0x50ec	; 0x50ec <__udivmodsi4>
    2cc0:	2e 5f       	subi	r18, 0xFE	; 254
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	2e 87       	std	Y+14, r18	; 0x0e
    2cca:	3f 87       	std	Y+15, r19	; 0x0f
    2ccc:	48 8b       	std	Y+16, r20	; 0x10
    2cce:	59 8b       	std	Y+17, r21	; 0x11
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;				/* Number of clusters >= 0xFF5 */
    2cd0:	27 3f       	cpi	r18, 0xF7	; 247
    2cd2:	8f e0       	ldi	r24, 0x0F	; 15
    2cd4:	38 07       	cpc	r19, r24
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	48 07       	cpc	r20, r24
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	58 07       	cpc	r21, r24
    2cde:	10 f4       	brcc	.+4      	; 0x2ce4 <auto_mount+0x2c2>
    2ce0:	61 e0       	ldi	r22, 0x01	; 1
    2ce2:	07 c0       	rjmp	.+14     	; 0x2cf2 <auto_mount+0x2d0>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;			/* Number of clusters >= 0xFFF5 */
    2ce4:	27 5f       	subi	r18, 0xF7	; 247
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	40 40       	sbci	r20, 0x00	; 0
    2cea:	50 40       	sbci	r21, 0x00	; 0
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <auto_mount+0x2ce>
    2cee:	4c c0       	rjmp	.+152    	; 0x2d88 <auto_mount+0x366>
    2cf0:	62 e0       	ldi	r22, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2cf2:	8a 89       	ldd	r24, Y+18	; 0x12
    2cf4:	9b 89       	ldd	r25, Y+19	; 0x13
    2cf6:	ac 89       	ldd	r26, Y+20	; 0x14
    2cf8:	bd 89       	ldd	r27, Y+21	; 0x15
    2cfa:	82 0d       	add	r24, r2
    2cfc:	93 1d       	adc	r25, r3
    2cfe:	a4 1d       	adc	r26, r4
    2d00:	b5 1d       	adc	r27, r5
    2d02:	8e 8b       	std	Y+22, r24	; 0x16
    2d04:	9f 8b       	std	Y+23, r25	; 0x17
    2d06:	a8 8f       	std	Y+24, r26	; 0x18
    2d08:	b9 8f       	std	Y+25, r27	; 0x19
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2d0a:	88 85       	ldd	r24, Y+8	; 0x08
    2d0c:	99 85       	ldd	r25, Y+9	; 0x09
    2d0e:	b4 e0       	ldi	r27, 0x04	; 4
    2d10:	96 95       	lsr	r25
    2d12:	87 95       	ror	r24
    2d14:	ba 95       	dec	r27
    2d16:	e1 f7       	brne	.-8      	; 0x2d10 <auto_mount+0x2ee>
    2d18:	a0 e0       	ldi	r26, 0x00	; 0
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	2a 89       	ldd	r18, Y+18	; 0x12
    2d1e:	3b 89       	ldd	r19, Y+19	; 0x13
    2d20:	4c 89       	ldd	r20, Y+20	; 0x14
    2d22:	5d 89       	ldd	r21, Y+21	; 0x15
    2d24:	82 0f       	add	r24, r18
    2d26:	93 1f       	adc	r25, r19
    2d28:	a4 1f       	adc	r26, r20
    2d2a:	b5 1f       	adc	r27, r21
    2d2c:	82 0d       	add	r24, r2
    2d2e:	93 1d       	adc	r25, r3
    2d30:	a4 1d       	adc	r26, r4
    2d32:	b5 1d       	adc	r27, r5
    2d34:	8a 8f       	std	Y+26, r24	; 0x1a
    2d36:	9b 8f       	std	Y+27, r25	; 0x1b
    2d38:	ac 8f       	std	Y+28, r26	; 0x1c
    2d3a:	bd 8f       	std	Y+29, r27	; 0x1d
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->winsect = 0;
    2d3c:	1e 8e       	std	Y+30, r1	; 0x1e
    2d3e:	1f 8e       	std	Y+31, r1	; 0x1f
    2d40:	18 a2       	std	Y+32, r1	; 0x20
    2d42:	19 a2       	std	Y+33, r1	; 0x21
	fs->fs_type = fmt;			/* FAT syb-type */
    2d44:	68 83       	st	Y, r22
	fs->id = ++Fsid;			/* File system mount ID */
    2d46:	80 91 dc 04 	lds	r24, 0x04DC
    2d4a:	90 91 dd 04 	lds	r25, 0x04DD
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	90 93 dd 04 	sts	0x04DD, r25
    2d54:	80 93 dc 04 	sts	0x04DC, r24
    2d58:	9f 83       	std	Y+7, r25	; 0x07
    2d5a:	8e 83       	std	Y+6, r24	; 0x06
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	01 c0       	rjmp	.+2      	; 0x2d62 <auto_mount+0x340>
	res = FR_OK;

	return res;
    2d60:	8d e0       	ldi	r24, 0x0D	; 13
}
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	7f 90       	pop	r7
    2d7c:	6f 90       	pop	r6
    2d7e:	5f 90       	pop	r5
    2d80:	4f 90       	pop	r4
    2d82:	3f 90       	pop	r3
    2d84:	2f 90       	pop	r2
    2d86:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;				/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;			/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2d88:	cf 5a       	subi	r28, 0xAF	; 175
    2d8a:	df 4f       	sbci	r29, 0xFF	; 255
    2d8c:	28 81       	ld	r18, Y
    2d8e:	8a 91       	ld	r24, -Y
    2d90:	6a 91       	ld	r22, -Y
    2d92:	ea 90       	ld	r14, -Y
    2d94:	ce 54       	subi	r28, 0x4E	; 78
    2d96:	d0 40       	sbci	r29, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	52 2f       	mov	r21, r18
    2da0:	44 27       	eor	r20, r20
    2da2:	33 27       	eor	r19, r19
    2da4:	22 27       	eor	r18, r18
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	dc 01       	movw	r26, r24
    2dae:	99 27       	eor	r25, r25
    2db0:	88 27       	eor	r24, r24
    2db2:	28 2b       	or	r18, r24
    2db4:	39 2b       	or	r19, r25
    2db6:	4a 2b       	or	r20, r26
    2db8:	5b 2b       	or	r21, r27
    2dba:	ff 24       	eor	r15, r15
    2dbc:	00 e0       	ldi	r16, 0x00	; 0
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
    2dc0:	2e 29       	or	r18, r14
    2dc2:	3f 29       	or	r19, r15
    2dc4:	40 2b       	or	r20, r16
    2dc6:	51 2b       	or	r21, r17
    2dc8:	96 2f       	mov	r25, r22
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	a0 e0       	ldi	r26, 0x00	; 0
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	28 2b       	or	r18, r24
    2dd2:	39 2b       	or	r19, r25
    2dd4:	4a 2b       	or	r20, r26
    2dd6:	5b 2b       	or	r21, r27
    2dd8:	2e 8b       	std	Y+22, r18	; 0x16
    2dda:	3f 8b       	std	Y+23, r19	; 0x17
    2ddc:	48 8f       	std	Y+24, r20	; 0x18
    2dde:	59 8f       	std	Y+25, r21	; 0x19
    2de0:	63 e0       	ldi	r22, 0x03	; 3
    2de2:	93 cf       	rjmp	.-218    	; 0x2d0a <auto_mount+0x2e8>

00002de4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
    2de4:	2f 92       	push	r2
    2de6:	3f 92       	push	r3
    2de8:	4f 92       	push	r4
    2dea:	5f 92       	push	r5
    2dec:	6f 92       	push	r6
    2dee:	7f 92       	push	r7
    2df0:	8f 92       	push	r8
    2df2:	9f 92       	push	r9
    2df4:	af 92       	push	r10
    2df6:	bf 92       	push	r11
    2df8:	cf 92       	push	r12
    2dfa:	df 92       	push	r13
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	6c 01       	movw	r12, r24
    2e0a:	3b 01       	movw	r6, r22
	FRESULT res;
	BYTE *dir, stat;


	if (*path == '/' || *path == '\\' ) path++;	/* Strip heading separator */
    2e0c:	db 01       	movw	r26, r22
    2e0e:	8c 91       	ld	r24, X
    2e10:	8f 32       	cpi	r24, 0x2F	; 47
    2e12:	11 f0       	breq	.+4      	; 0x2e18 <follow_path+0x34>
    2e14:	8c 35       	cpi	r24, 0x5C	; 92
    2e16:	19 f4       	brne	.+6      	; 0x2e1e <follow_path+0x3a>
    2e18:	08 94       	sec
    2e1a:	61 1c       	adc	r6, r1
    2e1c:	71 1c       	adc	r7, r1

	dj->sclust =						/* Set start directory (root dir) */
    2e1e:	d6 01       	movw	r26, r12
    2e20:	14 96       	adiw	r26, 0x04	; 4
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	15 97       	sbiw	r26, 0x05	; 5
    2e28:	80 81       	ld	r24, Z
    2e2a:	83 30       	cpi	r24, 0x03	; 3
    2e2c:	29 f0       	breq	.+10     	; 0x2e38 <follow_path+0x54>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	04 c0       	rjmp	.+8      	; 0x2e40 <follow_path+0x5c>
    2e38:	86 89       	ldd	r24, Z+22	; 0x16
    2e3a:	97 89       	ldd	r25, Z+23	; 0x17
    2e3c:	a0 8d       	ldd	r26, Z+24	; 0x18
    2e3e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2e40:	f6 01       	movw	r30, r12
    2e42:	86 83       	std	Z+6, r24	; 0x06
    2e44:	97 83       	std	Z+7, r25	; 0x07
    2e46:	a0 87       	std	Z+8, r26	; 0x08
    2e48:	b1 87       	std	Z+9, r27	; 0x09
		(dj->fs->fs_type == FS_FAT32) ? dj->fs->dirbase : 0;

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
    2e4a:	d3 01       	movw	r26, r6
    2e4c:	8c 91       	ld	r24, X
    2e4e:	80 32       	cpi	r24, 0x20	; 32
    2e50:	48 f4       	brcc	.+18     	; 0x2e64 <follow_path+0x80>
		res = dir_seek(dj, 0);
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	c6 01       	movw	r24, r12
    2e58:	0e 94 2d 10 	call	0x205a	; 0x205a <dir_seek>
		dj->dir = NULL;
    2e5c:	f6 01       	movw	r30, r12
    2e5e:	13 8a       	std	Z+19, r1	; 0x13
    2e60:	12 8a       	std	Z+18, r1	; 0x12
    2e62:	1b c1       	rjmp	.+566    	; 0x309a <follow_path+0x2b6>

	} else {							/* Follow path */
		for (;;) {
			res = dir_seek(dj, 0);			/* Rewind directory object */
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	c6 01       	movw	r24, r12
    2e6a:	0e 94 2d 10 	call	0x205a	; 0x205a <dir_seek>
			if (res != FR_OK) break;
    2e6e:	88 23       	and	r24, r24
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <follow_path+0x90>
    2e72:	13 c1       	rjmp	.+550    	; 0x309a <follow_path+0x2b6>
	BYTE c, d, b, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2e74:	d6 01       	movw	r26, r12
    2e76:	54 96       	adiw	r26, 0x14	; 20
    2e78:	ed 90       	ld	r14, X+
    2e7a:	fc 90       	ld	r15, X
    2e7c:	55 97       	sbiw	r26, 0x15	; 21
	MemSet(sfn, ' ', 11);
    2e7e:	4b e0       	ldi	r20, 0x0B	; 11
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	60 e2       	ldi	r22, 0x20	; 32
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	c7 01       	movw	r24, r14
    2e88:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <memset>
    2e8c:	c0 e0       	ldi	r28, 0x00	; 0
    2e8e:	d0 e0       	ldi	r29, 0x00	; 0
    2e90:	aa 24       	eor	r10, r10
    2e92:	bb 24       	eor	r11, r11
    2e94:	98 e0       	ldi	r25, 0x08	; 8
    2e96:	89 2e       	mov	r8, r25
    2e98:	91 2c       	mov	r9, r1
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
	si = i = b = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    2e9c:	f3 01       	movw	r30, r6
    2e9e:	ea 0d       	add	r30, r10
    2ea0:	fb 1d       	adc	r31, r11
    2ea2:	10 81       	ld	r17, Z
    2ea4:	08 94       	sec
    2ea6:	a1 1c       	adc	r10, r1
    2ea8:	b1 1c       	adc	r11, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2eaa:	10 32       	cpi	r17, 0x20	; 32
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <follow_path+0xcc>
    2eae:	60 c0       	rjmp	.+192    	; 0x2f70 <follow_path+0x18c>
    2eb0:	1f 32       	cpi	r17, 0x2F	; 47
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <follow_path+0xd2>
    2eb4:	05 c1       	rjmp	.+522    	; 0x30c0 <follow_path+0x2dc>
    2eb6:	1c 35       	cpi	r17, 0x5C	; 92
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <follow_path+0xd8>
    2eba:	02 c1       	rjmp	.+516    	; 0x30c0 <follow_path+0x2dc>
		if (c == '.' || i >= ni) {
    2ebc:	1e 32       	cpi	r17, 0x2E	; 46
    2ebe:	19 f0       	breq	.+6      	; 0x2ec6 <follow_path+0xe2>
    2ec0:	c8 15       	cp	r28, r8
    2ec2:	d9 05       	cpc	r29, r9
    2ec4:	84 f0       	brlt	.+32     	; 0x2ee6 <follow_path+0x102>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2ec6:	b8 e0       	ldi	r27, 0x08	; 8
    2ec8:	8b 16       	cp	r8, r27
    2eca:	91 04       	cpc	r9, r1
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <follow_path+0xec>
    2ece:	e0 c0       	rjmp	.+448    	; 0x3090 <follow_path+0x2ac>
    2ed0:	1e 32       	cpi	r17, 0x2E	; 46
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <follow_path+0xf2>
    2ed4:	dd c0       	rjmp	.+442    	; 0x3090 <follow_path+0x2ac>
			i = 8; ni = 11;
			b <<= 2; continue;
    2ed6:	00 0f       	add	r16, r16
    2ed8:	00 0f       	add	r16, r16
    2eda:	c8 e0       	ldi	r28, 0x08	; 8
    2edc:	d0 e0       	ldi	r29, 0x00	; 0
    2ede:	8b e0       	ldi	r24, 0x0B	; 11
    2ee0:	88 2e       	mov	r8, r24
    2ee2:	91 2c       	mov	r9, r1
    2ee4:	db cf       	rjmp	.-74     	; 0x2e9c <follow_path+0xb8>
		}
		if (c >= 0x80) b |= 3;			/* If there is any extended char, eliminate NT flag */
    2ee6:	17 fd       	sbrc	r17, 7
    2ee8:	03 60       	ori	r16, 0x03	; 3
		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
    2eea:	81 2f       	mov	r24, r17
    2eec:	81 58       	subi	r24, 0x81	; 129
    2eee:	8f 31       	cpi	r24, 0x1F	; 31
    2ef0:	18 f0       	brcs	.+6      	; 0x2ef8 <follow_path+0x114>
    2ef2:	8f 55       	subi	r24, 0x5F	; 95
    2ef4:	8d 31       	cpi	r24, 0x1D	; 29
    2ef6:	08 f5       	brcc	.+66     	; 0x2f3a <follow_path+0x156>
			d = p[si++];				/* Get 2nd byte */
    2ef8:	f3 01       	movw	r30, r6
    2efa:	ea 0d       	add	r30, r10
    2efc:	fb 1d       	adc	r31, r11
    2efe:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2f00:	82 2f       	mov	r24, r18
    2f02:	80 54       	subi	r24, 0x40	; 64
    2f04:	8f 33       	cpi	r24, 0x3F	; 63
    2f06:	20 f0       	brcs	.+8      	; 0x2f10 <follow_path+0x12c>
    2f08:	80 54       	subi	r24, 0x40	; 64
    2f0a:	8d 37       	cpi	r24, 0x7D	; 125
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <follow_path+0x12c>
    2f0e:	c0 c0       	rjmp	.+384    	; 0x3090 <follow_path+0x2ac>
    2f10:	c4 01       	movw	r24, r8
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	c8 17       	cp	r28, r24
    2f16:	d9 07       	cpc	r29, r25
    2f18:	0c f0       	brlt	.+2      	; 0x2f1c <follow_path+0x138>
    2f1a:	ba c0       	rjmp	.+372    	; 0x3090 <follow_path+0x2ac>
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) b |= 3;			/* If there is any extended char, eliminate NT flag */
		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
			d = p[si++];				/* Get 2nd byte */
    2f1c:	08 94       	sec
    2f1e:	a1 1c       	adc	r10, r1
    2f20:	b1 1c       	adc	r11, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2f22:	f7 01       	movw	r30, r14
    2f24:	ec 0f       	add	r30, r28
    2f26:	fd 1f       	adc	r31, r29
    2f28:	10 83       	st	Z, r17
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2f2e:	f7 01       	movw	r30, r14
    2f30:	e8 0f       	add	r30, r24
    2f32:	f9 1f       	adc	r31, r25
    2f34:	20 83       	st	Z, r18
    2f36:	ec 01       	movw	r28, r24
    2f38:	19 c0       	rjmp	.+50     	; 0x2f6c <follow_path+0x188>
		} else {
			if (StrChr(" +,;[=]\"*:<>?|\x7F", c))	/* Reject unallowable chrs for SFN */
    2f3a:	61 2f       	mov	r22, r17
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	89 e5       	ldi	r24, 0x59	; 89
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 81 25 	call	0x4b02	; 0x4b02 <strchr>
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <follow_path+0x168>
    2f4a:	a2 c0       	rjmp	.+324    	; 0x3090 <follow_path+0x2ac>
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    2f4c:	81 2f       	mov	r24, r17
    2f4e:	81 54       	subi	r24, 0x41	; 65
    2f50:	8a 31       	cpi	r24, 0x1A	; 26
    2f52:	10 f4       	brcc	.+4      	; 0x2f58 <follow_path+0x174>
				b |= 2;
    2f54:	02 60       	ori	r16, 0x02	; 2
    2f56:	06 c0       	rjmp	.+12     	; 0x2f64 <follow_path+0x180>
			} else {
				if (IsLower(c)) {
    2f58:	81 2f       	mov	r24, r17
    2f5a:	81 56       	subi	r24, 0x61	; 97
    2f5c:	8a 31       	cpi	r24, 0x1A	; 26
    2f5e:	10 f4       	brcc	.+4      	; 0x2f64 <follow_path+0x180>
					b |= 1; c -= 0x20;
    2f60:	01 60       	ori	r16, 0x01	; 1
    2f62:	10 52       	subi	r17, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2f64:	f7 01       	movw	r30, r14
    2f66:	ec 0f       	add	r30, r28
    2f68:	fd 1f       	adc	r31, r29
    2f6a:	10 83       	st	Z, r17
    2f6c:	21 96       	adiw	r28, 0x01	; 1
    2f6e:	96 cf       	rjmp	.-212    	; 0x2e9c <follow_path+0xb8>
    2f70:	90 2f       	mov	r25, r16
    2f72:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? 4 : 0;				/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2f74:	cd 2b       	or	r28, r29
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <follow_path+0x196>
    2f78:	8b c0       	rjmp	.+278    	; 0x3090 <follow_path+0x2ac>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2f7a:	f7 01       	movw	r30, r14
    2f7c:	80 81       	ld	r24, Z
    2f7e:	85 3e       	cpi	r24, 0xE5	; 229
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <follow_path+0x1a2>
    2f82:	85 e0       	ldi	r24, 0x05	; 5
    2f84:	80 83       	st	Z, r24

	if (ni == 8) b <<= 2;
    2f86:	a8 e0       	ldi	r26, 0x08	; 8
    2f88:	8a 16       	cp	r8, r26
    2f8a:	91 04       	cpc	r9, r1
    2f8c:	19 f4       	brne	.+6      	; 0x2f94 <follow_path+0x1b0>
    2f8e:	90 2f       	mov	r25, r16
    2f90:	99 0f       	add	r25, r25
    2f92:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= 0x10;	/* NT flag (Extension has only small capital) */
    2f94:	29 2f       	mov	r18, r25
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	c9 01       	movw	r24, r18
    2f9a:	83 70       	andi	r24, 0x03	; 3
    2f9c:	90 70       	andi	r25, 0x00	; 0
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <follow_path+0x1c0>
    2fa2:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= 0x08;	/* NT flag (Filename has only small capital) */
    2fa4:	2c 70       	andi	r18, 0x0C	; 12
    2fa6:	30 70       	andi	r19, 0x00	; 0
    2fa8:	24 30       	cpi	r18, 0x04	; 4
    2faa:	31 05       	cpc	r19, r1
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <follow_path+0x1cc>
    2fae:	48 60       	ori	r20, 0x08	; 8

	sfn[11] = c;		/* Store NT flag, File name is created */
    2fb0:	f7 01       	movw	r30, r14
    2fb2:	43 87       	std	Z+11, r20	; 0x0b
	FRESULT res;
	BYTE a, c, stat, ord, sum, *dir;

	ord = sum = 0xFF; stat = *(dj->fn+11);
	do {
		res = move_window(dj->fs, dj->sect);
    2fb4:	d6 01       	movw	r26, r12
    2fb6:	1e 96       	adiw	r26, 0x0e	; 14
    2fb8:	4d 91       	ld	r20, X+
    2fba:	5d 91       	ld	r21, X+
    2fbc:	6d 91       	ld	r22, X+
    2fbe:	7c 91       	ld	r23, X
    2fc0:	51 97       	sbiw	r26, 0x11	; 17
    2fc2:	14 96       	adiw	r26, 0x04	; 4
    2fc4:	8d 91       	ld	r24, X+
    2fc6:	9c 91       	ld	r25, X
    2fc8:	15 97       	sbiw	r26, 0x05	; 5
    2fca:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    2fce:	18 2f       	mov	r17, r24
		if (res != FR_OK) break;
    2fd0:	88 23       	and	r24, r24
    2fd2:	29 f5       	brne	.+74     	; 0x301e <follow_path+0x23a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2fd4:	d6 01       	movw	r26, r12
    2fd6:	52 96       	adiw	r26, 0x12	; 18
    2fd8:	ed 91       	ld	r30, X+
    2fda:	fc 91       	ld	r31, X
    2fdc:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    2fde:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2fe0:	99 23       	and	r25, r25
    2fe2:	11 f4       	brne	.+4      	; 0x2fe8 <follow_path+0x204>
    2fe4:	14 e0       	ldi	r17, 0x04	; 4
    2fe6:	1b c0       	rjmp	.+54     	; 0x301e <follow_path+0x23a>
		a = dir[DIR_Attr] & AM_MASK;
    2fe8:	83 85       	ldd	r24, Z+11	; 0x0b
					if (!MemCmp(dir, dj->fn, 11)) break;
				}
			}
		}
#else	/* Non LFN configuration */
		if (c != 0xE5 && c != '.' && !(a & AM_VOL) && !MemCmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2fea:	95 3e       	cpi	r25, 0xE5	; 229
    2fec:	89 f0       	breq	.+34     	; 0x3010 <follow_path+0x22c>
    2fee:	9e 32       	cpi	r25, 0x2E	; 46
    2ff0:	79 f0       	breq	.+30     	; 0x3010 <follow_path+0x22c>
    2ff2:	8f 73       	andi	r24, 0x3F	; 63
    2ff4:	83 fd       	sbrc	r24, 3
    2ff6:	0c c0       	rjmp	.+24     	; 0x3010 <follow_path+0x22c>
    2ff8:	d6 01       	movw	r26, r12
    2ffa:	54 96       	adiw	r26, 0x14	; 20
    2ffc:	6d 91       	ld	r22, X+
    2ffe:	7c 91       	ld	r23, X
    3000:	55 97       	sbiw	r26, 0x15	; 21
    3002:	4b e0       	ldi	r20, 0x0B	; 11
    3004:	50 e0       	ldi	r21, 0x00	; 0
    3006:	cf 01       	movw	r24, r30
    3008:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <memcmp>
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	39 f0       	breq	.+14     	; 0x301e <follow_path+0x23a>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	c6 01       	movw	r24, r12
    3014:	0e 94 18 11 	call	0x2230	; 0x2230 <dir_next>
    3018:	18 2f       	mov	r17, r24
	} while (res == FR_OK);
    301a:	88 23       	and	r24, r24
    301c:	59 f2       	breq	.-106    	; 0x2fb4 <follow_path+0x1d0>
			res = dir_seek(dj, 0);			/* Rewind directory object */
			if (res != FR_OK) break;
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			stat = *(dj->fn+11);
    301e:	d6 01       	movw	r26, r12
    3020:	54 96       	adiw	r26, 0x14	; 20
    3022:	ed 91       	ld	r30, X+
    3024:	fc 91       	ld	r31, X
    3026:	55 97       	sbiw	r26, 0x15	; 21
    3028:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Could not find the object */
    302a:	11 23       	and	r17, r17
    302c:	31 f0       	breq	.+12     	; 0x303a <follow_path+0x256>
    302e:	81 2f       	mov	r24, r17
				if (res == FR_NO_FILE && !(stat & 4))
    3030:	14 30       	cpi	r17, 0x04	; 4
    3032:	81 f5       	brne	.+96     	; 0x3094 <follow_path+0x2b0>
    3034:	92 ff       	sbrs	r25, 2
    3036:	30 c0       	rjmp	.+96     	; 0x3098 <follow_path+0x2b4>
    3038:	30 c0       	rjmp	.+96     	; 0x309a <follow_path+0x2b6>
					res = FR_NO_PATH;
				break;
			}
			if (stat & 4) break;			/* Last segment match. Function completed. */
    303a:	92 fd       	sbrc	r25, 2
    303c:	2b c0       	rjmp	.+86     	; 0x3094 <follow_path+0x2b0>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    303e:	d6 01       	movw	r26, r12
    3040:	52 96       	adiw	r26, 0x12	; 18
    3042:	ed 91       	ld	r30, X+
    3044:	fc 91       	ld	r31, X
    3046:	53 97       	sbiw	r26, 0x13	; 19
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    3048:	83 85       	ldd	r24, Z+11	; 0x0b
    304a:	84 ff       	sbrs	r24, 4
    304c:	25 c0       	rjmp	.+74     	; 0x3098 <follow_path+0x2b4>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    304e:	6a 0c       	add	r6, r10
    3050:	7b 1c       	adc	r7, r11
			if (stat & 4) break;			/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3052:	65 89       	ldd	r22, Z+21	; 0x15
    3054:	84 89       	ldd	r24, Z+20	; 0x14
    3056:	73 8d       	ldd	r23, Z+27	; 0x1b
    3058:	22 8d       	ldd	r18, Z+26	; 0x1a
    305a:	36 2e       	mov	r3, r22
    305c:	22 24       	eor	r2, r2
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	82 29       	or	r24, r2
    3062:	93 29       	or	r25, r3
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	dc 01       	movw	r26, r24
    306a:	99 27       	eor	r25, r25
    306c:	88 27       	eor	r24, r24
    306e:	57 2e       	mov	r5, r23
    3070:	44 24       	eor	r4, r4
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	24 29       	or	r18, r4
    3076:	35 29       	or	r19, r5
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	82 2b       	or	r24, r18
    307e:	93 2b       	or	r25, r19
    3080:	a4 2b       	or	r26, r20
    3082:	b5 2b       	or	r27, r21
    3084:	f6 01       	movw	r30, r12
    3086:	86 83       	std	Z+6, r24	; 0x06
    3088:	97 83       	std	Z+7, r25	; 0x07
    308a:	a0 87       	std	Z+8, r26	; 0x08
    308c:	b1 87       	std	Z+9, r27	; 0x09
    308e:	ea ce       	rjmp	.-556    	; 0x2e64 <follow_path+0x80>
		}
    3090:	86 e0       	ldi	r24, 0x06	; 6
    3092:	03 c0       	rjmp	.+6      	; 0x309a <follow_path+0x2b6>
    3094:	81 2f       	mov	r24, r17
    3096:	01 c0       	rjmp	.+2      	; 0x309a <follow_path+0x2b6>
    3098:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	bf 90       	pop	r11
    30ac:	af 90       	pop	r10
    30ae:	9f 90       	pop	r9
    30b0:	8f 90       	pop	r8
    30b2:	7f 90       	pop	r7
    30b4:	6f 90       	pop	r6
    30b6:	5f 90       	pop	r5
    30b8:	4f 90       	pop	r4
    30ba:	3f 90       	pop	r3
    30bc:	2f 90       	pop	r2
    30be:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    30c0:	90 2f       	mov	r25, r16
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	57 cf       	rjmp	.-338    	; 0x2f74 <follow_path+0x190>

000030c6 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	2e 97       	sbiw	r28, 0x0e	; 14
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	8c 01       	movw	r16, r24
    30e0:	7e 87       	std	Y+14, r23	; 0x0e
    30e2:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    30e4:	bc 01       	movw	r22, r24
    30e6:	6c 5f       	subi	r22, 0xFC	; 252
    30e8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	ce 01       	movw	r24, r28
    30ee:	0d 96       	adiw	r24, 0x0d	; 13
    30f0:	0e 94 11 15 	call	0x2a22	; 0x2a22 <auto_mount>
    30f4:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    30f6:	88 23       	and	r24, r24
    30f8:	09 f0       	breq	.+2      	; 0x30fc <f_opendir+0x36>
    30fa:	67 c0       	rjmp	.+206    	; 0x31ca <f_opendir+0x104>
		INITBUF((*dj), sfn, lfn);
    30fc:	ce 01       	movw	r24, r28
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	d8 01       	movw	r26, r16
    3102:	55 96       	adiw	r26, 0x15	; 21
    3104:	9c 93       	st	X, r25
    3106:	8e 93       	st	-X, r24
    3108:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    310a:	6d 85       	ldd	r22, Y+13	; 0x0d
    310c:	7e 85       	ldd	r23, Y+14	; 0x0e
    310e:	c8 01       	movw	r24, r16
    3110:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <follow_path>
    3114:	28 2f       	mov	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    3116:	88 23       	and	r24, r24
    3118:	09 f0       	breq	.+2      	; 0x311c <f_opendir+0x56>
    311a:	54 c0       	rjmp	.+168    	; 0x31c4 <f_opendir+0xfe>
			dir = dj->dir;
    311c:	f8 01       	movw	r30, r16
    311e:	a2 89       	ldd	r26, Z+18	; 0x12
    3120:	b3 89       	ldd	r27, Z+19	; 0x13
			if (dir) {							/* It is not the root dir */
    3122:	10 97       	sbiw	r26, 0x00	; 0
    3124:	69 f1       	breq	.+90     	; 0x3180 <f_opendir+0xba>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3126:	1b 96       	adiw	r26, 0x0b	; 11
    3128:	8c 91       	ld	r24, X
    312a:	1b 97       	sbiw	r26, 0x0b	; 11
    312c:	84 ff       	sbrs	r24, 4
    312e:	3f c0       	rjmp	.+126    	; 0x31ae <f_opendir+0xe8>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3130:	55 96       	adiw	r26, 0x15	; 21
    3132:	ec 91       	ld	r30, X
    3134:	55 97       	sbiw	r26, 0x15	; 21
    3136:	54 96       	adiw	r26, 0x14	; 20
    3138:	8c 91       	ld	r24, X
    313a:	54 97       	sbiw	r26, 0x14	; 20
    313c:	5b 96       	adiw	r26, 0x1b	; 27
    313e:	fc 91       	ld	r31, X
    3140:	5b 97       	sbiw	r26, 0x1b	; 27
    3142:	5a 96       	adiw	r26, 0x1a	; 26
    3144:	6c 91       	ld	r22, X
    3146:	3e 2f       	mov	r19, r30
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	28 2b       	or	r18, r24
    314e:	39 2b       	or	r19, r25
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	a9 01       	movw	r20, r18
    3156:	33 27       	eor	r19, r19
    3158:	22 27       	eor	r18, r18
    315a:	9f 2f       	mov	r25, r31
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	70 e0       	ldi	r23, 0x00	; 0
    3160:	86 2b       	or	r24, r22
    3162:	97 2b       	or	r25, r23
    3164:	a0 e0       	ldi	r26, 0x00	; 0
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	28 2b       	or	r18, r24
    316a:	39 2b       	or	r19, r25
    316c:	4a 2b       	or	r20, r26
    316e:	5b 2b       	or	r21, r27
    3170:	d8 01       	movw	r26, r16
    3172:	16 96       	adiw	r26, 0x06	; 6
    3174:	2d 93       	st	X+, r18
    3176:	3d 93       	st	X+, r19
    3178:	4d 93       	st	X+, r20
    317a:	5c 93       	st	X, r21
    317c:	19 97       	sbiw	r26, 0x09	; 9
    317e:	31 c0       	rjmp	.+98     	; 0x31e2 <f_opendir+0x11c>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			} else {							/* It is the root dir */
				dj->sclust = (dj->fs->fs_type == FS_FAT32) ? dj->fs->dirbase : 0;
    3180:	d8 01       	movw	r26, r16
    3182:	14 96       	adiw	r26, 0x04	; 4
    3184:	ed 91       	ld	r30, X+
    3186:	fc 91       	ld	r31, X
    3188:	15 97       	sbiw	r26, 0x05	; 5
    318a:	80 81       	ld	r24, Z
    318c:	83 30       	cpi	r24, 0x03	; 3
    318e:	29 f0       	breq	.+10     	; 0x319a <f_opendir+0xd4>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a0 e0       	ldi	r26, 0x00	; 0
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	04 c0       	rjmp	.+8      	; 0x31a2 <f_opendir+0xdc>
    319a:	86 89       	ldd	r24, Z+22	; 0x16
    319c:	97 89       	ldd	r25, Z+23	; 0x17
    319e:	a0 8d       	ldd	r26, Z+24	; 0x18
    31a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    31a2:	f8 01       	movw	r30, r16
    31a4:	86 83       	std	Z+6, r24	; 0x06
    31a6:	97 83       	std	Z+7, r25	; 0x07
    31a8:	a0 87       	std	Z+8, r26	; 0x08
    31aa:	b1 87       	std	Z+9, r27	; 0x09
    31ac:	1a c0       	rjmp	.+52     	; 0x31e2 <f_opendir+0x11c>
    31ae:	25 e0       	ldi	r18, 0x05	; 5
			}
			if (res == FR_OK) res = dir_seek(dj, 0);
			dj->id = dj->fs->id;
    31b0:	d8 01       	movw	r26, r16
    31b2:	14 96       	adiw	r26, 0x04	; 4
    31b4:	ed 91       	ld	r30, X+
    31b6:	fc 91       	ld	r31, X
    31b8:	15 97       	sbiw	r26, 0x05	; 5
    31ba:	86 81       	ldd	r24, Z+6	; 0x06
    31bc:	97 81       	ldd	r25, Z+7	; 0x07
    31be:	8d 93       	st	X+, r24
    31c0:	9c 93       	st	X, r25
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <f_opendir+0x104>
		} else {
			if (res == FR_NO_FILE) res = FR_NO_PATH;
    31c4:	84 30       	cpi	r24, 0x04	; 4
    31c6:	09 f4       	brne	.+2      	; 0x31ca <f_opendir+0x104>
    31c8:	25 e0       	ldi	r18, 0x05	; 5
		}
	}

	LEAVE_FF(dj->fs, res);
}
    31ca:	82 2f       	mov	r24, r18
    31cc:	2e 96       	adiw	r28, 0x0e	; 14
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	08 95       	ret
					res = FR_NO_PATH;
				}
			} else {							/* It is the root dir */
				dj->sclust = (dj->fs->fs_type == FS_FAT32) ? dj->fs->dirbase : 0;
			}
			if (res == FR_OK) res = dir_seek(dj, 0);
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	70 e0       	ldi	r23, 0x00	; 0
    31e6:	c8 01       	movw	r24, r16
    31e8:	0e 94 2d 10 	call	0x205a	; 0x205a <dir_seek>
    31ec:	28 2f       	mov	r18, r24
    31ee:	e0 cf       	rjmp	.-64     	; 0x31b0 <f_opendir+0xea>

000031f0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const char *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    31f0:	bf 92       	push	r11
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	a4 97       	sbiw	r28, 0x24	; 36
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	6c 01       	movw	r12, r24
    3214:	7c a3       	std	Y+36, r23	; 0x24
    3216:	6b a3       	std	Y+35, r22	; 0x23
    3218:	e4 2e       	mov	r14, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    321a:	dc 01       	movw	r26, r24
    321c:	1d 92       	st	X+, r1
    321e:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	be 01       	movw	r22, r28
    3224:	6f 5e       	subi	r22, 0xEF	; 239
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	ce 01       	movw	r24, r28
    322a:	83 96       	adiw	r24, 0x23	; 35
    322c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <auto_mount>
    3230:	b8 2e       	mov	r11, r24
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    3232:	88 23       	and	r24, r24
    3234:	09 f0       	breq	.+2      	; 0x3238 <f_open+0x48>
    3236:	90 c0       	rjmp	.+288    	; 0x3358 <f_open+0x168>
	INITBUF(dj, sfn, lfn);
    3238:	ce 01       	movw	r24, r28
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	9a a3       	std	Y+34, r25	; 0x22
    323e:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    3240:	6b a1       	ldd	r22, Y+35	; 0x23
    3242:	7c a1       	ldd	r23, Y+36	; 0x24
    3244:	ce 01       	movw	r24, r28
    3246:	0d 96       	adiw	r24, 0x0d	; 13
    3248:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <follow_path>
    324c:	b8 2e       	mov	r11, r24
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    324e:	88 23       	and	r24, r24
    3250:	09 f0       	breq	.+2      	; 0x3254 <f_open+0x64>
    3252:	82 c0       	rjmp	.+260    	; 0x3358 <f_open+0x168>
		dir = dj.dir;
    3254:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3256:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    3258:	01 15       	cp	r16, r1
    325a:	11 05       	cpc	r17, r1
    325c:	09 f4       	brne	.+2      	; 0x3260 <f_open+0x70>
    325e:	7a c0       	rjmp	.+244    	; 0x3354 <f_open+0x164>
    3260:	f8 01       	movw	r30, r16
    3262:	83 85       	ldd	r24, Z+11	; 0x0b
    3264:	84 fd       	sbrc	r24, 4
    3266:	76 c0       	rjmp	.+236    	; 0x3354 <f_open+0x164>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
    3268:	f1 e0       	ldi	r31, 0x01	; 1
    326a:	ef 22       	and	r14, r31
    326c:	d6 01       	movw	r26, r12
    326e:	14 96       	adiw	r26, 0x04	; 4
    3270:	ec 92       	st	X, r14
	fp->org_clust =						/* File start cluster */
    3272:	d8 01       	movw	r26, r16
    3274:	55 96       	adiw	r26, 0x15	; 21
    3276:	ec 91       	ld	r30, X
    3278:	55 97       	sbiw	r26, 0x15	; 21
    327a:	54 96       	adiw	r26, 0x14	; 20
    327c:	8c 91       	ld	r24, X
    327e:	54 97       	sbiw	r26, 0x14	; 20
    3280:	5b 96       	adiw	r26, 0x1b	; 27
    3282:	fc 91       	ld	r31, X
    3284:	5b 97       	sbiw	r26, 0x1b	; 27
    3286:	5a 96       	adiw	r26, 0x1a	; 26
    3288:	6c 91       	ld	r22, X
    328a:	3e 2f       	mov	r19, r30
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	28 2b       	or	r18, r24
    3292:	39 2b       	or	r19, r25
    3294:	40 e0       	ldi	r20, 0x00	; 0
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	a9 01       	movw	r20, r18
    329a:	33 27       	eor	r19, r19
    329c:	22 27       	eor	r18, r18
    329e:	9f 2f       	mov	r25, r31
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	86 2b       	or	r24, r22
    32a6:	97 2b       	or	r25, r23
    32a8:	a0 e0       	ldi	r26, 0x00	; 0
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	28 2b       	or	r18, r24
    32ae:	39 2b       	or	r19, r25
    32b0:	4a 2b       	or	r20, r26
    32b2:	5b 2b       	or	r21, r27
    32b4:	f6 01       	movw	r30, r12
    32b6:	26 87       	std	Z+14, r18	; 0x0e
    32b8:	37 87       	std	Z+15, r19	; 0x0f
    32ba:	40 8b       	std	Z+16, r20	; 0x10
    32bc:	51 8b       	std	Z+17, r21	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    32be:	d8 01       	movw	r26, r16
    32c0:	5f 96       	adiw	r26, 0x1f	; 31
    32c2:	2c 91       	ld	r18, X
    32c4:	5f 97       	sbiw	r26, 0x1f	; 31
    32c6:	5e 96       	adiw	r26, 0x1e	; 30
    32c8:	8c 91       	ld	r24, X
    32ca:	5e 97       	sbiw	r26, 0x1e	; 30
    32cc:	5d 96       	adiw	r26, 0x1d	; 29
    32ce:	6c 91       	ld	r22, X
    32d0:	5d 97       	sbiw	r26, 0x1d	; 29
    32d2:	5c 96       	adiw	r26, 0x1c	; 28
    32d4:	ec 90       	ld	r14, X
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	52 2f       	mov	r21, r18
    32de:	44 27       	eor	r20, r20
    32e0:	33 27       	eor	r19, r19
    32e2:	22 27       	eor	r18, r18
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	a0 e0       	ldi	r26, 0x00	; 0
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	dc 01       	movw	r26, r24
    32ec:	99 27       	eor	r25, r25
    32ee:	88 27       	eor	r24, r24
    32f0:	28 2b       	or	r18, r24
    32f2:	39 2b       	or	r19, r25
    32f4:	4a 2b       	or	r20, r26
    32f6:	5b 2b       	or	r21, r27
    32f8:	ff 24       	eor	r15, r15
    32fa:	00 e0       	ldi	r16, 0x00	; 0
    32fc:	10 e0       	ldi	r17, 0x00	; 0
    32fe:	2e 29       	or	r18, r14
    3300:	3f 29       	or	r19, r15
    3302:	40 2b       	or	r20, r16
    3304:	51 2b       	or	r21, r17
    3306:	96 2f       	mov	r25, r22
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	a0 e0       	ldi	r26, 0x00	; 0
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	28 2b       	or	r18, r24
    3310:	39 2b       	or	r19, r25
    3312:	4a 2b       	or	r20, r26
    3314:	5b 2b       	or	r21, r27
    3316:	22 87       	std	Z+10, r18	; 0x0a
    3318:	33 87       	std	Z+11, r19	; 0x0b
    331a:	44 87       	std	Z+12, r20	; 0x0c
    331c:	55 87       	std	Z+13, r21	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    331e:	d6 01       	movw	r26, r12
    3320:	16 96       	adiw	r26, 0x06	; 6
    3322:	1d 92       	st	X+, r1
    3324:	1d 92       	st	X+, r1
    3326:	1d 92       	st	X+, r1
    3328:	1c 92       	st	X, r1
    332a:	19 97       	sbiw	r26, 0x09	; 9
    332c:	8f ef       	ldi	r24, 0xFF	; 255
    332e:	15 96       	adiw	r26, 0x05	; 5
    3330:	8c 93       	st	X, r24
    3332:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    3334:	16 8a       	std	Z+22, r1	; 0x16
    3336:	17 8a       	std	Z+23, r1	; 0x17
    3338:	10 8e       	std	Z+24, r1	; 0x18
    333a:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    333c:	e9 89       	ldd	r30, Y+17	; 0x11
    333e:	fa 89       	ldd	r31, Y+18	; 0x12
    3340:	11 96       	adiw	r26, 0x01	; 1
    3342:	fc 93       	st	X, r31
    3344:	ee 93       	st	-X, r30
    3346:	86 81       	ldd	r24, Z+6	; 0x06
    3348:	97 81       	ldd	r25, Z+7	; 0x07
    334a:	13 96       	adiw	r26, 0x03	; 3
    334c:	9c 93       	st	X, r25
    334e:	8e 93       	st	-X, r24
    3350:	12 97       	sbiw	r26, 0x02	; 2
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <f_open+0x168>

	LEAVE_FF(dj.fs, FR_OK);
    3354:	e4 e0       	ldi	r30, 0x04	; 4
    3356:	be 2e       	mov	r11, r30
}
    3358:	8b 2d       	mov	r24, r11
    335a:	a4 96       	adiw	r28, 0x24	; 36
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	bf 90       	pop	r11
    3378:	08 95       	ret

0000337a <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    337a:	2f 92       	push	r2
    337c:	3f 92       	push	r3
    337e:	4f 92       	push	r4
    3380:	5f 92       	push	r5
    3382:	7f 92       	push	r7
    3384:	8f 92       	push	r8
    3386:	9f 92       	push	r9
    3388:	af 92       	push	r10
    338a:	bf 92       	push	r11
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	ec 01       	movw	r28, r24
    339e:	16 2f       	mov	r17, r22
    33a0:	07 2f       	mov	r16, r23
    33a2:	5a 01       	movw	r10, r20
    33a4:	29 01       	movw	r4, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    33a6:	f9 01       	movw	r30, r18
    33a8:	11 82       	std	Z+1, r1	; 0x01
    33aa:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    33ac:	6a 81       	ldd	r22, Y+2	; 0x02
    33ae:	7b 81       	ldd	r23, Y+3	; 0x03
    33b0:	88 81       	ld	r24, Y
    33b2:	99 81       	ldd	r25, Y+1	; 0x01
    33b4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <validate>
    33b8:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    33ba:	88 23       	and	r24, r24
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <f_read+0x46>
    33be:	0a c1       	rjmp	.+532    	; 0x35d4 <f_read+0x25a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    33c0:	8c 81       	ldd	r24, Y+4	; 0x04
    33c2:	87 fd       	sbrc	r24, 7
    33c4:	4f c0       	rjmp	.+158    	; 0x3464 <f_read+0xea>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    33c6:	80 fd       	sbrc	r24, 0
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <f_read+0x56>
    33ca:	f7 e0       	ldi	r31, 0x07	; 7
    33cc:	7f 2e       	mov	r7, r31
    33ce:	02 c1       	rjmp	.+516    	; 0x35d4 <f_read+0x25a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    33d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    33d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    33d4:	4c 85       	ldd	r20, Y+12	; 0x0c
    33d6:	5d 85       	ldd	r21, Y+13	; 0x0d
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	a8 85       	ldd	r26, Y+8	; 0x08
    33de:	b9 85       	ldd	r27, Y+9	; 0x09
    33e0:	28 1b       	sub	r18, r24
    33e2:	39 0b       	sbc	r19, r25
    33e4:	4a 0b       	sbc	r20, r26
    33e6:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    33e8:	c5 01       	movw	r24, r10
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	28 17       	cp	r18, r24
    33f0:	39 07       	cpc	r19, r25
    33f2:	4a 07       	cpc	r20, r26
    33f4:	5b 07       	cpc	r21, r27
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <f_read+0x80>
    33f8:	59 01       	movw	r10, r18
    33fa:	81 2f       	mov	r24, r17
    33fc:	90 2f       	mov	r25, r16
    33fe:	9c 01       	movw	r18, r24
    3400:	49 01       	movw	r8, r18
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3402:	21 2c       	mov	r2, r1
    3404:	e2 e0       	ldi	r30, 0x02	; 2
    3406:	3e 2e       	mov	r3, r30
    3408:	e1 c0       	rjmp	.+450    	; 0x35cc <f_read+0x252>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    340a:	2e 81       	ldd	r18, Y+6	; 0x06
    340c:	3f 81       	ldd	r19, Y+7	; 0x07
    340e:	48 85       	ldd	r20, Y+8	; 0x08
    3410:	59 85       	ldd	r21, Y+9	; 0x09
    3412:	da 01       	movw	r26, r20
    3414:	c9 01       	movw	r24, r18
    3416:	91 70       	andi	r25, 0x01	; 1
    3418:	a0 70       	andi	r26, 0x00	; 0
    341a:	b0 70       	andi	r27, 0x00	; 0
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	a1 05       	cpc	r26, r1
    3420:	b1 05       	cpc	r27, r1
    3422:	09 f0       	breq	.+2      	; 0x3426 <f_read+0xac>
    3424:	8e c0       	rjmp	.+284    	; 0x3542 <f_read+0x1c8>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3426:	e8 81       	ld	r30, Y
    3428:	f9 81       	ldd	r31, Y+1	; 0x01
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	98 17       	cp	r25, r24
    3430:	50 f1       	brcs	.+84     	; 0x3486 <f_read+0x10c>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    3432:	21 15       	cp	r18, r1
    3434:	31 05       	cpc	r19, r1
    3436:	41 05       	cpc	r20, r1
    3438:	51 05       	cpc	r21, r1
    343a:	29 f4       	brne	.+10     	; 0x3446 <f_read+0xcc>
    343c:	6e 85       	ldd	r22, Y+14	; 0x0e
    343e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3440:	88 89       	ldd	r24, Y+16	; 0x10
    3442:	99 89       	ldd	r25, Y+17	; 0x11
    3444:	07 c0       	rjmp	.+14     	; 0x3454 <f_read+0xda>
    3446:	4a 89       	ldd	r20, Y+18	; 0x12
    3448:	5b 89       	ldd	r21, Y+19	; 0x13
    344a:	6c 89       	ldd	r22, Y+20	; 0x14
    344c:	7d 89       	ldd	r23, Y+21	; 0x15
    344e:	cf 01       	movw	r24, r30
    3450:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <get_cluster>
					fp->org_clust : get_cluster(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3454:	62 30       	cpi	r22, 0x02	; 2
    3456:	71 05       	cpc	r23, r1
    3458:	81 05       	cpc	r24, r1
    345a:	91 05       	cpc	r25, r1
    345c:	30 f4       	brcc	.+12     	; 0x346a <f_read+0xf0>
    345e:	8c 81       	ldd	r24, Y+4	; 0x04
    3460:	80 68       	ori	r24, 0x80	; 128
    3462:	8c 83       	std	Y+4, r24	; 0x04
    3464:	72 e0       	ldi	r23, 0x02	; 2
    3466:	77 2e       	mov	r7, r23
    3468:	b5 c0       	rjmp	.+362    	; 0x35d4 <f_read+0x25a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    346a:	6f 3f       	cpi	r22, 0xFF	; 255
    346c:	ff ef       	ldi	r31, 0xFF	; 255
    346e:	7f 07       	cpc	r23, r31
    3470:	ff ef       	ldi	r31, 0xFF	; 255
    3472:	8f 07       	cpc	r24, r31
    3474:	ff ef       	ldi	r31, 0xFF	; 255
    3476:	9f 07       	cpc	r25, r31
    3478:	09 f4       	brne	.+2      	; 0x347c <f_read+0x102>
    347a:	71 c0       	rjmp	.+226    	; 0x355e <f_read+0x1e4>
				fp->curr_clust = clst;				/* Update current cluster */
    347c:	6a 8b       	std	Y+18, r22	; 0x12
    347e:	7b 8b       	std	Y+19, r23	; 0x13
    3480:	8c 8b       	std	Y+20, r24	; 0x14
    3482:	9d 8b       	std	Y+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3484:	1d 82       	std	Y+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3486:	c8 80       	ld	r12, Y
    3488:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    348a:	2a 89       	ldd	r18, Y+18	; 0x12
    348c:	3b 89       	ldd	r19, Y+19	; 0x13
    348e:	4c 89       	ldd	r20, Y+20	; 0x14
    3490:	5d 89       	ldd	r21, Y+21	; 0x15
    3492:	22 50       	subi	r18, 0x02	; 2
    3494:	30 40       	sbci	r19, 0x00	; 0
    3496:	40 40       	sbci	r20, 0x00	; 0
    3498:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    349a:	f6 01       	movw	r30, r12
    349c:	86 85       	ldd	r24, Z+14	; 0x0e
    349e:	97 85       	ldd	r25, Z+15	; 0x0f
    34a0:	a0 89       	ldd	r26, Z+16	; 0x10
    34a2:	b1 89       	ldd	r27, Z+17	; 0x11
    34a4:	02 97       	sbiw	r24, 0x02	; 2
    34a6:	a1 09       	sbc	r26, r1
    34a8:	b1 09       	sbc	r27, r1
    34aa:	28 17       	cp	r18, r24
    34ac:	39 07       	cpc	r19, r25
    34ae:	4a 07       	cpc	r20, r26
    34b0:	5b 07       	cpc	r21, r27
    34b2:	a8 f6       	brcc	.-86     	; 0x345e <f_read+0xe4>
	return clst * fs->csize + fs->database;
    34b4:	12 81       	ldd	r17, Z+2	; 0x02
    34b6:	61 2f       	mov	r22, r17
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    34c2:	9b 01       	movw	r18, r22
    34c4:	ac 01       	movw	r20, r24
    34c6:	f6 01       	movw	r30, r12
    34c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    34ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    34cc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    34ce:	b5 8d       	ldd	r27, Z+29	; 0x1d
    34d0:	28 0f       	add	r18, r24
    34d2:	39 1f       	adc	r19, r25
    34d4:	4a 1f       	adc	r20, r26
    34d6:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    34d8:	21 15       	cp	r18, r1
    34da:	31 05       	cpc	r19, r1
    34dc:	41 05       	cpc	r20, r1
    34de:	51 05       	cpc	r21, r1
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <f_read+0x16a>
    34e2:	bd cf       	rjmp	.-134    	; 0x345e <f_read+0xe4>
			sect += fp->csect;
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	28 0f       	add	r18, r24
    34e8:	31 1d       	adc	r19, r1
    34ea:	41 1d       	adc	r20, r1
    34ec:	51 1d       	adc	r21, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    34ee:	75 01       	movw	r14, r10
    34f0:	ef 2c       	mov	r14, r15
    34f2:	ff 24       	eor	r15, r15
    34f4:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    34f6:	e1 14       	cp	r14, r1
    34f8:	f1 04       	cpc	r15, r1
    34fa:	e9 f0       	breq	.+58     	; 0x3536 <f_read+0x1bc>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    34fc:	a8 2f       	mov	r26, r24
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	c7 01       	movw	r24, r14
    3502:	8a 0f       	add	r24, r26
    3504:	9b 1f       	adc	r25, r27
    3506:	e1 2f       	mov	r30, r17
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	e8 17       	cp	r30, r24
    350c:	f9 07       	cpc	r31, r25
    350e:	18 f4       	brcc	.+6      	; 0x3516 <f_read+0x19c>
					cc = fp->fs->csize - fp->csect;
    3510:	7f 01       	movw	r14, r30
    3512:	ea 1a       	sub	r14, r26
    3514:	fb 0a       	sbc	r15, r27
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3516:	0e 2d       	mov	r16, r14
    3518:	b4 01       	movw	r22, r8
    351a:	f6 01       	movw	r30, r12
    351c:	81 81       	ldd	r24, Z+1	; 0x01
    351e:	0e 94 06 0c 	call	0x180c	; 0x180c <disk_read>
    3522:	88 23       	and	r24, r24
    3524:	e1 f4       	brne	.+56     	; 0x355e <f_read+0x1e4>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	8e 0d       	add	r24, r14
    352a:	8d 83       	std	Y+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    352c:	87 01       	movw	r16, r14
    352e:	10 2f       	mov	r17, r16
    3530:	00 27       	eor	r16, r16
    3532:	11 0f       	add	r17, r17
    3534:	31 c0       	rjmp	.+98     	; 0x3598 <f_read+0x21e>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3536:	2e 8b       	std	Y+22, r18	; 0x16
    3538:	3f 8b       	std	Y+23, r19	; 0x17
    353a:	48 8f       	std	Y+24, r20	; 0x18
    353c:	59 8f       	std	Y+25, r21	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    353e:	8f 5f       	subi	r24, 0xFF	; 255
    3540:	8d 83       	std	Y+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3542:	ee 80       	ldd	r14, Y+6	; 0x06
    3544:	ff 80       	ldd	r15, Y+7	; 0x07
    3546:	08 85       	ldd	r16, Y+8	; 0x08
    3548:	19 85       	ldd	r17, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    354a:	4e 89       	ldd	r20, Y+22	; 0x16
    354c:	5f 89       	ldd	r21, Y+23	; 0x17
    354e:	68 8d       	ldd	r22, Y+24	; 0x18
    3550:	79 8d       	ldd	r23, Y+25	; 0x19
    3552:	88 81       	ld	r24, Y
    3554:	99 81       	ldd	r25, Y+1	; 0x01
    3556:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <move_window>
    355a:	88 23       	and	r24, r24
    355c:	31 f0       	breq	.+12     	; 0x356a <f_read+0x1f0>
			ABORT(fp->fs, FR_DISK_ERR);
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	80 68       	ori	r24, 0x80	; 128
    3562:	8c 83       	std	Y+4, r24	; 0x04
    3564:	77 24       	eor	r7, r7
    3566:	73 94       	inc	r7
    3568:	35 c0       	rjmp	.+106    	; 0x35d4 <f_read+0x25a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    356a:	c7 01       	movw	r24, r14
    356c:	91 70       	andi	r25, 0x01	; 1
    356e:	91 01       	movw	r18, r2
    3570:	28 1b       	sub	r18, r24
    3572:	39 0b       	sbc	r19, r25
    3574:	85 01       	movw	r16, r10
    3576:	2a 15       	cp	r18, r10
    3578:	3b 05       	cpc	r19, r11
    357a:	08 f4       	brcc	.+2      	; 0x357e <f_read+0x204>
    357c:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		MemCpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    357e:	8e 81       	ldd	r24, Y+6	; 0x06
    3580:	9f 81       	ldd	r25, Y+7	; 0x07
    3582:	91 70       	andi	r25, 0x01	; 1
    3584:	82 96       	adiw	r24, 0x22	; 34
    3586:	28 81       	ld	r18, Y
    3588:	39 81       	ldd	r19, Y+1	; 0x01
    358a:	28 0f       	add	r18, r24
    358c:	39 1f       	adc	r19, r25
    358e:	a8 01       	movw	r20, r16
    3590:	b9 01       	movw	r22, r18
    3592:	c4 01       	movw	r24, r8
    3594:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <memcpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3598:	80 0e       	add	r8, r16
    359a:	91 1e       	adc	r9, r17
    359c:	c8 01       	movw	r24, r16
    359e:	a0 e0       	ldi	r26, 0x00	; 0
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	2e 81       	ldd	r18, Y+6	; 0x06
    35a4:	3f 81       	ldd	r19, Y+7	; 0x07
    35a6:	48 85       	ldd	r20, Y+8	; 0x08
    35a8:	59 85       	ldd	r21, Y+9	; 0x09
    35aa:	28 0f       	add	r18, r24
    35ac:	39 1f       	adc	r19, r25
    35ae:	4a 1f       	adc	r20, r26
    35b0:	5b 1f       	adc	r21, r27
    35b2:	2e 83       	std	Y+6, r18	; 0x06
    35b4:	3f 83       	std	Y+7, r19	; 0x07
    35b6:	48 87       	std	Y+8, r20	; 0x08
    35b8:	59 87       	std	Y+9, r21	; 0x09
    35ba:	f2 01       	movw	r30, r4
    35bc:	80 81       	ld	r24, Z
    35be:	91 81       	ldd	r25, Z+1	; 0x01
    35c0:	80 0f       	add	r24, r16
    35c2:	91 1f       	adc	r25, r17
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
    35c8:	a0 1a       	sub	r10, r16
    35ca:	b1 0a       	sbc	r11, r17
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    35cc:	a1 14       	cp	r10, r1
    35ce:	b1 04       	cpc	r11, r1
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <f_read+0x25a>
    35d2:	1b cf       	rjmp	.-458    	; 0x340a <f_read+0x90>
#endif
	}


	LEAVE_FF(fp->fs, FR_OK);
}
    35d4:	87 2d       	mov	r24, r7
    35d6:	df 91       	pop	r29
    35d8:	cf 91       	pop	r28
    35da:	1f 91       	pop	r17
    35dc:	0f 91       	pop	r16
    35de:	ff 90       	pop	r15
    35e0:	ef 90       	pop	r14
    35e2:	df 90       	pop	r13
    35e4:	cf 90       	pop	r12
    35e6:	bf 90       	pop	r11
    35e8:	af 90       	pop	r10
    35ea:	9f 90       	pop	r9
    35ec:	8f 90       	pop	r8
    35ee:	7f 90       	pop	r7
    35f0:	5f 90       	pop	r5
    35f2:	4f 90       	pop	r4
    35f4:	3f 90       	pop	r3
    35f6:	2f 90       	pop	r2
    35f8:	08 95       	ret

000035fa <LCDSend>:
		llc, llc, xxc,
	}
};

void LCDSend(unsigned char data, unsigned char registerSelect)
{
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	00 d0       	rcall	.+0      	; 0x3608 <LCDSend+0xe>
    3608:	00 d0       	rcall	.+0      	; 0x360a <LCDSend+0x10>
    360a:	0f 92       	push	r0
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	8d 83       	std	Y+5, r24	; 0x05
	if(registerSelect != 0) // decide RS pin state
    3612:	66 23       	and	r22, r22
    3614:	11 f0       	breq	.+4      	; 0x361a <LCDSend+0x20>
	{
		sbi(LCDCtrlPort, LCDRSPin); // send text
    3616:	12 9a       	sbi	0x02, 2	; 2
    3618:	01 c0       	rjmp	.+2      	; 0x361c <LCDSend+0x22>
	}
	else
	{
		cbi(LCDCtrlPort, LCDRSPin); // send command
    361a:	12 98       	cbi	0x02, 2	; 2
	}

	unsigned char i;
	unsigned char temp[4];
	temp[0] = LCDDataBit0;
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = LCDDataBit1;
    3620:	85 e0       	ldi	r24, 0x05	; 5
    3622:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = LCDDataBit2;
    3624:	86 e0       	ldi	r24, 0x06	; 6
    3626:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = LCDDataBit3;
    3628:	87 e0       	ldi	r24, 0x07	; 7
    362a:	8c 83       	std	Y+4, r24	; 0x04
    362c:	de 01       	movw	r26, r28
    362e:	11 96       	adiw	r26, 0x01	; 1
    3630:	7d 01       	movw	r14, r26
    3632:	44 e0       	ldi	r20, 0x04	; 4
    3634:	50 e0       	ldi	r21, 0x00	; 0

	for(i = 0; i < 4; i++)
	{
		if(bit_is_set(data, i + 4))
    3636:	8e 01       	movw	r16, r28
    3638:	0b 5f       	subi	r16, 0xFB	; 251
    363a:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			sbi(LCDDataPort, temp[i]);
		}
		else
		{
			cbi(LCDDataPort, temp[i]);
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	70 e0       	ldi	r23, 0x00	; 0
	temp[2] = LCDDataBit2;
	temp[3] = LCDDataBit3;

	for(i = 0; i < 4; i++)
	{
		if(bit_is_set(data, i + 4))
    3640:	f8 01       	movw	r30, r16
    3642:	80 81       	ld	r24, Z
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	04 2e       	mov	r0, r20
    3648:	02 c0       	rjmp	.+4      	; 0x364e <LCDSend+0x54>
    364a:	95 95       	asr	r25
    364c:	87 95       	ror	r24
    364e:	0a 94       	dec	r0
    3650:	e2 f7       	brpl	.-8      	; 0x364a <LCDSend+0x50>
    3652:	f7 01       	movw	r30, r14
    3654:	90 81       	ld	r25, Z
    3656:	80 ff       	sbrs	r24, 0
    3658:	0a c0       	rjmp	.+20     	; 0x366e <LCDSend+0x74>
		{
			sbi(LCDDataPort, temp[i]);
    365a:	22 b1       	in	r18, 0x02	; 2
    365c:	fb 01       	movw	r30, r22
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <LCDSend+0x6a>
    3660:	ee 0f       	add	r30, r30
    3662:	ff 1f       	adc	r31, r31
    3664:	9a 95       	dec	r25
    3666:	e2 f7       	brpl	.-8      	; 0x3660 <LCDSend+0x66>
    3668:	2e 2b       	or	r18, r30
    366a:	22 b9       	out	0x02, r18	; 2
    366c:	0b c0       	rjmp	.+22     	; 0x3684 <LCDSend+0x8a>
		}
		else
		{
			cbi(LCDDataPort, temp[i]);
    366e:	22 b1       	in	r18, 0x02	; 2
    3670:	fb 01       	movw	r30, r22
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <LCDSend+0x7e>
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	9a 95       	dec	r25
    367a:	e2 f7       	brpl	.-8      	; 0x3674 <LCDSend+0x7a>
    367c:	cf 01       	movw	r24, r30
    367e:	80 95       	com	r24
    3680:	82 23       	and	r24, r18
    3682:	82 b9       	out	0x02, r24	; 2
    3684:	4f 5f       	subi	r20, 0xFF	; 255
    3686:	5f 4f       	sbci	r21, 0xFF	; 255
    3688:	08 94       	sec
    368a:	e1 1c       	adc	r14, r1
    368c:	f1 1c       	adc	r15, r1
	temp[0] = LCDDataBit0;
	temp[1] = LCDDataBit1;
	temp[2] = LCDDataBit2;
	temp[3] = LCDDataBit3;

	for(i = 0; i < 4; i++)
    368e:	48 30       	cpi	r20, 0x08	; 8
    3690:	51 05       	cpc	r21, r1
    3692:	b1 f6       	brne	.-84     	; 0x3640 <LCDSend+0x46>
    3694:	fe 01       	movw	r30, r28
    3696:	35 96       	adiw	r30, 0x05	; 5
		{
			cbi(LCDDataPort, temp[i]);
		}
	}
	
	sbi(LCDCtrlPort, LCDEPin);		
    3698:	13 9a       	sbi	0x02, 3	; 2
	cbi(LCDCtrlPort, LCDEPin);
    369a:	13 98       	cbi	0x02, 3	; 2
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
		{
			sbi(LCDDataPort, temp[i]);
		}
		else
		{
			cbi(LCDDataPort, temp[i]);
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	70 e0       	ldi	r23, 0x00	; 0
	sbi(LCDCtrlPort, LCDEPin);		
	cbi(LCDCtrlPort, LCDEPin);

	for(i = 0; i < 4; i++)
	{
		if(bit_is_set(data, i))
    36a4:	80 81       	ld	r24, Z
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	04 2e       	mov	r0, r20
    36aa:	02 c0       	rjmp	.+4      	; 0x36b0 <LCDSend+0xb6>
    36ac:	95 95       	asr	r25
    36ae:	87 95       	ror	r24
    36b0:	0a 94       	dec	r0
    36b2:	e2 f7       	brpl	.-8      	; 0x36ac <LCDSend+0xb2>
    36b4:	9c 91       	ld	r25, X
    36b6:	80 ff       	sbrs	r24, 0
    36b8:	0a c0       	rjmp	.+20     	; 0x36ce <LCDSend+0xd4>
		{
			sbi(LCDDataPort, temp[i]);
    36ba:	22 b1       	in	r18, 0x02	; 2
    36bc:	8b 01       	movw	r16, r22
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <LCDSend+0xca>
    36c0:	00 0f       	add	r16, r16
    36c2:	11 1f       	adc	r17, r17
    36c4:	9a 95       	dec	r25
    36c6:	e2 f7       	brpl	.-8      	; 0x36c0 <LCDSend+0xc6>
    36c8:	20 2b       	or	r18, r16
    36ca:	22 b9       	out	0x02, r18	; 2
    36cc:	0b c0       	rjmp	.+22     	; 0x36e4 <LCDSend+0xea>
		}
		else
		{
			cbi(LCDDataPort, temp[i]);
    36ce:	22 b1       	in	r18, 0x02	; 2
    36d0:	8b 01       	movw	r16, r22
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <LCDSend+0xde>
    36d4:	00 0f       	add	r16, r16
    36d6:	11 1f       	adc	r17, r17
    36d8:	9a 95       	dec	r25
    36da:	e2 f7       	brpl	.-8      	; 0x36d4 <LCDSend+0xda>
    36dc:	c8 01       	movw	r24, r16
    36de:	80 95       	com	r24
    36e0:	82 23       	and	r24, r18
    36e2:	82 b9       	out	0x02, r24	; 2
    36e4:	4f 5f       	subi	r20, 0xFF	; 255
    36e6:	5f 4f       	sbci	r21, 0xFF	; 255
    36e8:	11 96       	adiw	r26, 0x01	; 1
	}
	
	sbi(LCDCtrlPort, LCDEPin);		
	cbi(LCDCtrlPort, LCDEPin);

	for(i = 0; i < 4; i++)
    36ea:	44 30       	cpi	r20, 0x04	; 4
    36ec:	51 05       	cpc	r21, r1
    36ee:	d1 f6       	brne	.-76     	; 0x36a4 <LCDSend+0xaa>
		{
			cbi(LCDDataPort, temp[i]);
		}
	}

	sbi(LCDCtrlPort, LCDEPin);		
    36f0:	13 9a       	sbi	0x02, 3	; 2
	cbi(LCDCtrlPort, LCDEPin);
    36f2:	13 98       	cbi	0x02, 3	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36f4:	8a e6       	ldi	r24, 0x6A	; 106
    36f6:	8a 95       	dec	r24
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <LCDSend+0xfc>

	_delay_us(40); // wait for command to execute
}
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	ff 90       	pop	r15
    370e:	ef 90       	pop	r14
    3710:	08 95       	ret

00003712 <LCDPrintTime>:

void LCDPrintTime(unsigned char h, unsigned char m)
{
    3712:	8f 92       	push	r8
    3714:	9f 92       	push	r9
    3716:	af 92       	push	r10
    3718:	bf 92       	push	r11
    371a:	cf 92       	push	r12
    371c:	df 92       	push	r13
    371e:	ef 92       	push	r14
    3720:	ff 92       	push	r15
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	00 d0       	rcall	.+0      	; 0x372c <LCDPrintTime+0x1a>
    372c:	00 d0       	rcall	.+0      	; 0x372e <LCDPrintTime+0x1c>
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	28 2f       	mov	r18, r24
    3734:	36 2f       	mov	r19, r22
	unsigned char a[4];

	a[0] = h / 10;
    3736:	6a e0       	ldi	r22, 0x0A	; 10
    3738:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
    373c:	89 83       	std	Y+1, r24	; 0x01
	a[1] = h % 10;
    373e:	82 2f       	mov	r24, r18
    3740:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
    3744:	9a 83       	std	Y+2, r25	; 0x02
	a[2] = m / 10;
    3746:	83 2f       	mov	r24, r19
    3748:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
    374c:	8b 83       	std	Y+3, r24	; 0x03
	a[3] = m % 10;
    374e:	83 2f       	mov	r24, r19
    3750:	0e 94 57 28 	call	0x50ae	; 0x50ae <__udivmodqi4>
    3754:	9c 83       	std	Y+4, r25	; 0x04
    3756:	4e 01       	movw	r8, r28
    3758:	08 94       	sec
    375a:	81 1c       	adc	r8, r1
    375c:	91 1c       	adc	r9, r1
    375e:	54 01       	movw	r10, r8
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	00 e0       	ldi	r16, 0x00	; 0
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <LCDPrintTime+0x60>
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	8a 2d       	mov	r24, r10
    376a:	88 19       	sub	r24, r8
    376c:	82 30       	cpi	r24, 0x02	; 2
    376e:	08 f0       	brcs	.+2      	; 0x3772 <LCDPrintTime+0x60>
    3770:	91 e0       	ldi	r25, 0x01	; 1
			j = 0;
		}

		unsigned char d = a[i];

		unsigned char e = (i * 4) + j;
    3772:	10 2f       	mov	r17, r16
    3774:	19 0f       	add	r17, r25

		LCDSend(0b10000000 + e, 0);
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	81 2f       	mov	r24, r17
    377a:	80 58       	subi	r24, 0x80	; 128
    377c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][0]), 1);
    3780:	f5 01       	movw	r30, r10
    3782:	81 91       	ld	r24, Z+
    3784:	5f 01       	movw	r10, r30
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	7c 01       	movw	r14, r24
    378a:	ee 0c       	add	r14, r14
    378c:	ff 1c       	adc	r15, r15
    378e:	e8 0e       	add	r14, r24
    3790:	f9 1e       	adc	r15, r25
    3792:	67 01       	movw	r12, r14
    3794:	cc 0c       	add	r12, r12
    3796:	dd 1c       	adc	r13, r13
    3798:	f6 01       	movw	r30, r12
    379a:	ec 5a       	subi	r30, 0xAC	; 172
    379c:	fd 4f       	sbci	r31, 0xFD	; 253
    379e:	e4 91       	lpm	r30, Z+
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	8e 2f       	mov	r24, r30
    37a4:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][1]), 1);
    37a8:	f6 01       	movw	r30, r12
    37aa:	eb 5a       	subi	r30, 0xAB	; 171
    37ac:	fd 4f       	sbci	r31, 0xFD	; 253
    37ae:	e4 91       	lpm	r30, Z+
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	8e 2f       	mov	r24, r30
    37b4:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][2]), 1);
    37b8:	76 01       	movw	r14, r12
    37ba:	86 e5       	ldi	r24, 0x56	; 86
    37bc:	92 e0       	ldi	r25, 0x02	; 2
    37be:	e8 0e       	add	r14, r24
    37c0:	f9 1e       	adc	r15, r25
    37c2:	f7 01       	movw	r30, r14
    37c4:	84 91       	lpm	r24, Z+
    37c6:	61 e0       	ldi	r22, 0x01	; 1
    37c8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(0b11000000 + e, 0);
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	81 2f       	mov	r24, r17
    37d0:	80 54       	subi	r24, 0x40	; 64
    37d2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][3]), 1);
    37d6:	f6 01       	movw	r30, r12
    37d8:	e9 5a       	subi	r30, 0xA9	; 169
    37da:	fd 4f       	sbci	r31, 0xFD	; 253
    37dc:	e4 91       	lpm	r30, Z+
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	8e 2f       	mov	r24, r30
    37e2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][4]), 1);
    37e6:	f6 01       	movw	r30, r12
    37e8:	e8 5a       	subi	r30, 0xA8	; 168
    37ea:	fd 4f       	sbci	r31, 0xFD	; 253
    37ec:	e4 91       	lpm	r30, Z+
    37ee:	61 e0       	ldi	r22, 0x01	; 1
    37f0:	8e 2f       	mov	r24, r30
    37f2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
		LCDSend(pgm_read_byte(&numchar[d][5]), 1);
    37f6:	89 e5       	ldi	r24, 0x59	; 89
    37f8:	92 e0       	ldi	r25, 0x02	; 2
    37fa:	c8 0e       	add	r12, r24
    37fc:	d9 1e       	adc	r13, r25
    37fe:	f6 01       	movw	r30, r12
    3800:	84 91       	lpm	r24, Z+
    3802:	61 e0       	ldi	r22, 0x01	; 1
    3804:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    3808:	0c 5f       	subi	r16, 0xFC	; 252
	a[0] = h / 10;
	a[1] = h % 10;
	a[2] = m / 10;
	a[3] = m % 10;

	for(unsigned char i = 0; i < 4; i++)
    380a:	00 31       	cpi	r16, 0x10	; 16
    380c:	09 f0       	breq	.+2      	; 0x3810 <LCDPrintTime+0xfe>
    380e:	ab cf       	rjmp	.-170    	; 0x3766 <LCDPrintTime+0x54>
		LCDSend(pgm_read_byte(&numchar[d][3]), 1);
		LCDSend(pgm_read_byte(&numchar[d][4]), 1);
		LCDSend(pgm_read_byte(&numchar[d][5]), 1);
	}
	
	LCDSend(0b10000000 + 4 + 3, 0);
    3810:	60 e0       	ldi	r22, 0x00	; 0
    3812:	87 e8       	ldi	r24, 0x87	; 135
    3814:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(largecolonleftaddr, 1);
    3818:	61 e0       	ldi	r22, 0x01	; 1
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b10000000 + 8, 0);
    3820:	60 e0       	ldi	r22, 0x00	; 0
    3822:	88 e8       	ldi	r24, 0x88	; 136
    3824:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(largecolonrightaddr, 1);
    3828:	61 e0       	ldi	r22, 0x01	; 1
    382a:	84 e0       	ldi	r24, 0x04	; 4
    382c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b11000000 + 4 + 3, 0);
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	87 ec       	ldi	r24, 0xC7	; 199
    3834:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(largecolonleftaddr, 1);
    3838:	61 e0       	ldi	r22, 0x01	; 1
    383a:	83 e0       	ldi	r24, 0x03	; 3
    383c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b11000000 + 8, 0);
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	88 ec       	ldi	r24, 0xC8	; 200
    3844:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(largecolonrightaddr, 1);
    3848:	61 e0       	ldi	r22, 0x01	; 1
    384a:	84 e0       	ldi	r24, 0x04	; 4
    384c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b10000000 + 3, 0);
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	83 e8       	ldi	r24, 0x83	; 131
    3854:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(' ', 1);
    3858:	61 e0       	ldi	r22, 0x01	; 1
    385a:	80 e2       	ldi	r24, 0x20	; 32
    385c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b11000000 + 3, 0);
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	83 ec       	ldi	r24, 0xC3	; 195
    3864:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(' ', 1);
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	80 e2       	ldi	r24, 0x20	; 32
    386c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b10000000 + 12, 0);
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	8c e8       	ldi	r24, 0x8C	; 140
    3874:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(' ', 1);
    3878:	61 e0       	ldi	r22, 0x01	; 1
    387a:	80 e2       	ldi	r24, 0x20	; 32
    387c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b11000000 + 12, 0);
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	8c ec       	ldi	r24, 0xCC	; 204
    3884:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(' ', 1);
    3888:	61 e0       	ldi	r22, 0x01	; 1
    388a:	80 e2       	ldi	r24, 0x20	; 32
    388c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	df 90       	pop	r13
    38a6:	cf 90       	pop	r12
    38a8:	bf 90       	pop	r11
    38aa:	af 90       	pop	r10
    38ac:	9f 90       	pop	r9
    38ae:	8f 90       	pop	r8
    38b0:	08 95       	ret

000038b2 <LCDSetPos>:

void LCDSetPos(unsigned char x, unsigned char y)
{
    38b2:	62 30       	cpi	r22, 0x02	; 2
    38b4:	19 f4       	brne	.+6      	; 0x38bc <LCDSetPos+0xa>
	// this function sets the next position to be writen on the LCD
	// LCDSetPos(1, 1); would be the first character of the first line
	if(y == 2)
	{
		LCDSend(0b11000000 + x - 1, 0);
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	81 54       	subi	r24, 0x41	; 65
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <LCDSetPos+0xe>
	}
	else
	{
		LCDSend(0b10000000 + x - 1, 0);
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	81 58       	subi	r24, 0x81	; 129
    38c0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    38c4:	08 95       	ret

000038c6 <LCDPrint_P>:
	}
}

void LCDPrint_P(const char * data, unsigned char x, unsigned char y)
{
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	ec 01       	movw	r28, r24
    38cc:	86 2f       	mov	r24, r22
	LCDSetPos(x, y);
    38ce:	64 2f       	mov	r22, r20
    38d0:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
    38d4:	03 c0       	rjmp	.+6      	; 0x38dc <LCDPrint_P+0x16>
	// This function lets you send a string to the LCD
	char c;
	while((c = pgm_read_byte(data++)))
	{
		LCDSend(c, 1);
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    38dc:	fe 01       	movw	r30, r28
void LCDPrint_P(const char * data, unsigned char x, unsigned char y)
{
	LCDSetPos(x, y);
	// This function lets you send a string to the LCD
	char c;
	while((c = pgm_read_byte(data++)))
    38de:	21 96       	adiw	r28, 0x01	; 1
    38e0:	84 91       	lpm	r24, Z+
    38e2:	88 23       	and	r24, r24
    38e4:	c1 f7       	brne	.-16     	; 0x38d6 <LCDPrint_P+0x10>
	{
		LCDSend(c, 1);
	}
}
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	08 95       	ret

000038ec <LCDPrint>:

void LCDPrint(char * data)
{
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	ec 01       	movw	r28, r24
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <LCDPrint+0x10>
	// This function lets you send a string to the LCD
	while(*data)
	{
		LCDSend(*data++, 1);
    38f4:	21 96       	adiw	r28, 0x01	; 1
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
}

void LCDPrint(char * data)
{
	// This function lets you send a string to the LCD
	while(*data)
    38fc:	88 81       	ld	r24, Y
    38fe:	88 23       	and	r24, r24
    3900:	c9 f7       	brne	.-14     	; 0x38f4 <LCDPrint+0x8>
	{
		LCDSend(*data++, 1);
	}
}
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	08 95       	ret

00003908 <LCDClear>:

void LCDClear(unsigned char y)
{
    3908:	1f 93       	push	r17
    390a:	18 2f       	mov	r17, r24
	// clears a line by writing 16 spaces to it
	LCDPrint_P(PSTR("                "), 1, y);
    390c:	48 2f       	mov	r20, r24
    390e:	61 e0       	ldi	r22, 0x01	; 1
    3910:	80 e9       	ldi	r24, 0x90	; 144
    3912:	92 e0       	ldi	r25, 0x02	; 2
    3914:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCDPrint_P>
	LCDSetPos(1, y);
    3918:	61 2f       	mov	r22, r17
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
}
    3920:	1f 91       	pop	r17
    3922:	08 95       	ret

00003924 <LCDBL>:

void LCDBL(unsigned char data)
{
    3924:	88 23       	and	r24, r24
    3926:	11 f0       	breq	.+4      	; 0x392c <LCDBL+0x8>
	if(data != 0)
	{
		sbi(LCDBLPort, LCDBLPin);
    3928:	5f 9a       	sbi	0x0b, 7	; 11
    392a:	08 95       	ret
	}
	else
	{
		cbi(LCDBLPort, LCDBLPin);
    392c:	5f 98       	cbi	0x0b, 7	; 11
    392e:	08 95       	ret

00003930 <LCDCustomChar>:
	}
}

void LCDCustomChar(unsigned char address, unsigned char * dataArray)
{
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	8b 01       	movw	r16, r22
	unsigned char addr = address * 8;
	LCDSend(0b01000000 + addr, 0);
    393a:	88 0f       	add	r24, r24
    393c:	88 0f       	add	r24, r24
    393e:	88 0f       	add	r24, r24
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	80 5c       	subi	r24, 0xC0	; 192
    3944:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    3948:	c0 e0       	ldi	r28, 0x00	; 0
    394a:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	for(i = 0; i < 8; i++)
	{
		LCDSend(dataArray[i], 1);
    394c:	f8 01       	movw	r30, r16
    394e:	ec 0f       	add	r30, r28
    3950:	fd 1f       	adc	r31, r29
    3952:	61 e0       	ldi	r22, 0x01	; 1
    3954:	80 81       	ld	r24, Z
    3956:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    395a:	21 96       	adiw	r28, 0x01	; 1
void LCDCustomChar(unsigned char address, unsigned char * dataArray)
{
	unsigned char addr = address * 8;
	LCDSend(0b01000000 + addr, 0);
	unsigned char i;
	for(i = 0; i < 8; i++)
    395c:	c8 30       	cpi	r28, 0x08	; 8
    395e:	d1 05       	cpc	r29, r1
    3960:	a9 f7       	brne	.-22     	; 0x394c <LCDCustomChar+0x1c>
	{
		LCDSend(dataArray[i], 1);
	}
}
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <LCDInit>:

void LCDInit()
{
    396c:	0f 93       	push	r16
    396e:	1f 93       	push	r17
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	28 97       	sbiw	r28, 0x08	; 8
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
	// LCD Initialization Function

	// backlight as output, turn backlight on
	sbi(LCDBLDDR, LCDBLPin);
    3984:	57 9a       	sbi	0x0a, 7	; 10

void LCDBL(unsigned char data)
{
	if(data != 0)
	{
		sbi(LCDBLPort, LCDBLPin);
    3986:	5f 9a       	sbi	0x0b, 7	; 11
	//LCDDataDDR  0xFF; // data port as output

	// 4 bit code
	unsigned char i;
	unsigned char temp[8];
	temp[0] = LCDDataBit0;
    3988:	84 e0       	ldi	r24, 0x04	; 4
    398a:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = LCDDataBit1;
    398c:	85 e0       	ldi	r24, 0x05	; 5
    398e:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = LCDDataBit2;
    3990:	86 e0       	ldi	r24, 0x06	; 6
    3992:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = LCDDataBit3;
    3994:	87 e0       	ldi	r24, 0x07	; 7
    3996:	8c 83       	std	Y+4, r24	; 0x04

	for(i = 0; i < 4; i++)
	{
		sbi(LCDDataDDR, temp[i]);
    3998:	41 e0       	ldi	r20, 0x01	; 1
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	0c 9a       	sbi	0x01, 4	; 1
    399e:	21 b1       	in	r18, 0x01	; 1
    39a0:	ca 01       	movw	r24, r20
    39a2:	0a 80       	ldd	r0, Y+2	; 0x02
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <LCDInit+0x3e>
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	0a 94       	dec	r0
    39ac:	e2 f7       	brpl	.-8      	; 0x39a6 <LCDInit+0x3a>
    39ae:	28 2b       	or	r18, r24
    39b0:	21 b9       	out	0x01, r18	; 1
    39b2:	81 b1       	in	r24, 0x01	; 1
    39b4:	0b 80       	ldd	r0, Y+3	; 0x03
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <LCDInit+0x50>
    39b8:	44 0f       	add	r20, r20
    39ba:	55 1f       	adc	r21, r21
    39bc:	0a 94       	dec	r0
    39be:	e2 f7       	brpl	.-8      	; 0x39b8 <LCDInit+0x4c>
    39c0:	84 2b       	or	r24, r20
    39c2:	81 b9       	out	0x01, r24	; 1
    39c4:	0f 9a       	sbi	0x01, 7	; 1
	}

	sbi(LCDCtrlDDR, LCDRSPin); // control pins as output
    39c6:	0a 9a       	sbi	0x01, 2	; 1
	sbi(LCDCtrlDDR, LCDRWPin);
    39c8:	09 9a       	sbi	0x01, 1	; 1
	sbi(LCDCtrlDDR, LCDEPin);
    39ca:	0b 9a       	sbi	0x01, 3	; 1

	// clear the port and pins
	LCDDataPort = 0;
    39cc:	12 b8       	out	0x02, r1	; 2
	cbi(LCDCtrlPort, LCDRSPin);
    39ce:	12 98       	cbi	0x02, 2	; 2
	cbi(LCDCtrlPort, LCDRWPin);
    39d0:	11 98       	cbi	0x02, 1	; 2
	cbi(LCDCtrlPort, LCDEPin);
    39d2:	13 98       	cbi	0x02, 3	; 2

	sbi(LCDBLDDR, LCDBLPin);
    39d4:	57 9a       	sbi	0x0a, 7	; 10
	sbi(LCDBLPort, LCDBLPin);
    39d6:	5f 9a       	sbi	0x0b, 7	; 11
    39d8:	82 ee       	ldi	r24, 0xE2	; 226
    39da:	94 e0       	ldi	r25, 0x04	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39dc:	28 ec       	ldi	r18, 0xC8	; 200
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	f9 01       	movw	r30, r18
    39e2:	31 97       	sbiw	r30, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <LCDInit+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e8:	d9 f7       	brne	.-10     	; 0x39e0 <LCDInit+0x74>

	_delay_ms(125); // wait for LCD driver to warm up

	// 4 bit code
	LCDSend(0b00000001, 0); // all clear command
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    39f2:	00 e6       	ldi	r16, 0x60	; 96
    39f4:	19 e0       	ldi	r17, 0x09	; 9
    39f6:	c8 01       	movw	r24, r16
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	f1 f7       	brne	.-4      	; 0x39f8 <LCDInit+0x8c>
	_delay_us(1200); // wait for LCD to execute
	LCDSend(0b00000010, 0); // return home command
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
    3a04:	c8 01       	movw	r24, r16
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <LCDInit+0x9a>
	_delay_us(1200); // wait for LCD to execute
	LCDSend(0b00101000, 0); // function set 4 bit, 2 line, 5x8 character
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	88 e2       	ldi	r24, 0x28	; 40
    3a0e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSend(0b00001100, 0); // cursor off
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	8c e0       	ldi	r24, 0x0C	; 12
    3a16:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	LCDSetPos(1, 1); // set position to (1, 1)
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCDSetPos>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&upperlinechar[i]);
    3a26:	be 01       	movw	r22, r28
    3a28:	6f 5f       	subi	r22, 0xFF	; 255
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	e4 5e       	subi	r30, 0xE4	; 228
    3a30:	fd 4f       	sbci	r31, 0xFD	; 253
    3a32:	e4 91       	lpm	r30, Z+
    3a34:	db 01       	movw	r26, r22
    3a36:	a8 0f       	add	r26, r24
    3a38:	b9 1f       	adc	r27, r25
    3a3a:	ec 93       	st	X, r30
    3a3c:	01 96       	adiw	r24, 0x01	; 1
	_delay_us(1200); // wait for LCD to execute
	LCDSend(0b00101000, 0); // function set 4 bit, 2 line, 5x8 character
	LCDSend(0b00001100, 0); // cursor off
	LCDSetPos(1, 1); // set position to (1, 1)

	for(unsigned char i = 0; i < 8; i++)
    3a3e:	88 30       	cpi	r24, 0x08	; 8
    3a40:	91 05       	cpc	r25, r1
    3a42:	a1 f7       	brne	.-24     	; 0x3a2c <LCDInit+0xc0>
	{
		temp[i] = pgm_read_byte(&upperlinechar[i]);
	}
	LCDCustomChar(upperlineaddr, temp);
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&lowerlinechar[i]);
    3a4e:	be 01       	movw	r22, r28
    3a50:	6f 5f       	subi	r22, 0xFF	; 255
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	fc 01       	movw	r30, r24
    3a56:	ec 5d       	subi	r30, 0xDC	; 220
    3a58:	fd 4f       	sbci	r31, 0xFD	; 253
    3a5a:	e4 91       	lpm	r30, Z+
    3a5c:	db 01       	movw	r26, r22
    3a5e:	a8 0f       	add	r26, r24
    3a60:	b9 1f       	adc	r27, r25
    3a62:	ec 93       	st	X, r30
    3a64:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&upperlinechar[i]);
	}
	LCDCustomChar(upperlineaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3a66:	88 30       	cpi	r24, 0x08	; 8
    3a68:	91 05       	cpc	r25, r1
    3a6a:	a1 f7       	brne	.-24     	; 0x3a54 <LCDInit+0xe8>
	{
		temp[i] = pgm_read_byte(&lowerlinechar[i]);
	}
	LCDCustomChar(lowerlineaddr, temp);
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&bothlinechar[i]);
    3a76:	be 01       	movw	r22, r28
    3a78:	6f 5f       	subi	r22, 0xFF	; 255
    3a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	e4 5d       	subi	r30, 0xD4	; 212
    3a80:	fd 4f       	sbci	r31, 0xFD	; 253
    3a82:	e4 91       	lpm	r30, Z+
    3a84:	db 01       	movw	r26, r22
    3a86:	a8 0f       	add	r26, r24
    3a88:	b9 1f       	adc	r27, r25
    3a8a:	ec 93       	st	X, r30
    3a8c:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&lowerlinechar[i]);
	}
	LCDCustomChar(lowerlineaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3a8e:	88 30       	cpi	r24, 0x08	; 8
    3a90:	91 05       	cpc	r25, r1
    3a92:	a1 f7       	brne	.-24     	; 0x3a7c <LCDInit+0x110>
	{
		temp[i] = pgm_read_byte(&bothlinechar[i]);
	}
	LCDCustomChar(bothlineaddr, temp);
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&largecolonleftchar[i]);
    3a9e:	be 01       	movw	r22, r28
    3aa0:	6f 5f       	subi	r22, 0xFF	; 255
    3aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	ec 5c       	subi	r30, 0xCC	; 204
    3aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    3aaa:	e4 91       	lpm	r30, Z+
    3aac:	db 01       	movw	r26, r22
    3aae:	a8 0f       	add	r26, r24
    3ab0:	b9 1f       	adc	r27, r25
    3ab2:	ec 93       	st	X, r30
    3ab4:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&bothlinechar[i]);
	}
	LCDCustomChar(bothlineaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3ab6:	88 30       	cpi	r24, 0x08	; 8
    3ab8:	91 05       	cpc	r25, r1
    3aba:	a1 f7       	brne	.-24     	; 0x3aa4 <LCDInit+0x138>
	{
		temp[i] = pgm_read_byte(&largecolonleftchar[i]);
	}
	LCDCustomChar(largecolonleftaddr, temp);
    3abc:	83 e0       	ldi	r24, 0x03	; 3
    3abe:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&largecolonrightchar[i]);
    3ac6:	be 01       	movw	r22, r28
    3ac8:	6f 5f       	subi	r22, 0xFF	; 255
    3aca:	7f 4f       	sbci	r23, 0xFF	; 255
    3acc:	fc 01       	movw	r30, r24
    3ace:	e4 5c       	subi	r30, 0xC4	; 196
    3ad0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ad2:	e4 91       	lpm	r30, Z+
    3ad4:	db 01       	movw	r26, r22
    3ad6:	a8 0f       	add	r26, r24
    3ad8:	b9 1f       	adc	r27, r25
    3ada:	ec 93       	st	X, r30
    3adc:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&largecolonleftchar[i]);
	}
	LCDCustomChar(largecolonleftaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3ade:	88 30       	cpi	r24, 0x08	; 8
    3ae0:	91 05       	cpc	r25, r1
    3ae2:	a1 f7       	brne	.-24     	; 0x3acc <LCDInit+0x160>
	{
		temp[i] = pgm_read_byte(&largecolonrightchar[i]);
	}
	LCDCustomChar(largecolonrightaddr, temp);
    3ae4:	84 e0       	ldi	r24, 0x04	; 4
    3ae6:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&upchar[i]);
    3aee:	be 01       	movw	r22, r28
    3af0:	6f 5f       	subi	r22, 0xFF	; 255
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	fc 01       	movw	r30, r24
    3af6:	ec 5b       	subi	r30, 0xBC	; 188
    3af8:	fd 4f       	sbci	r31, 0xFD	; 253
    3afa:	e4 91       	lpm	r30, Z+
    3afc:	db 01       	movw	r26, r22
    3afe:	a8 0f       	add	r26, r24
    3b00:	b9 1f       	adc	r27, r25
    3b02:	ec 93       	st	X, r30
    3b04:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&largecolonrightchar[i]);
	}
	LCDCustomChar(largecolonrightaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3b06:	88 30       	cpi	r24, 0x08	; 8
    3b08:	91 05       	cpc	r25, r1
    3b0a:	a1 f7       	brne	.-24     	; 0x3af4 <LCDInit+0x188>
	{
		temp[i] = pgm_read_byte(&upchar[i]);
	}
	LCDCustomChar(upcharaddr, temp);
    3b0c:	85 e0       	ldi	r24, 0x05	; 5
    3b0e:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0

	for(unsigned char i = 0; i < 8; i++)
	{
		temp[i] = pgm_read_byte(&downchar[i]);
    3b16:	be 01       	movw	r22, r28
    3b18:	6f 5f       	subi	r22, 0xFF	; 255
    3b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e4 5b       	subi	r30, 0xB4	; 180
    3b20:	fd 4f       	sbci	r31, 0xFD	; 253
    3b22:	e4 91       	lpm	r30, Z+
    3b24:	db 01       	movw	r26, r22
    3b26:	a8 0f       	add	r26, r24
    3b28:	b9 1f       	adc	r27, r25
    3b2a:	ec 93       	st	X, r30
    3b2c:	01 96       	adiw	r24, 0x01	; 1
	{
		temp[i] = pgm_read_byte(&upchar[i]);
	}
	LCDCustomChar(upcharaddr, temp);

	for(unsigned char i = 0; i < 8; i++)
    3b2e:	88 30       	cpi	r24, 0x08	; 8
    3b30:	91 05       	cpc	r25, r1
    3b32:	a1 f7       	brne	.-24     	; 0x3b1c <LCDInit+0x1b0>
	{
		temp[i] = pgm_read_byte(&downchar[i]);
	}
	LCDCustomChar(downcharaddr, temp);
    3b34:	86 e0       	ldi	r24, 0x06	; 6
    3b36:	0e 94 98 1c 	call	0x3930	; 0x3930 <LCDCustomChar>
}
    3b3a:	28 96       	adiw	r28, 0x08	; 8
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <LCD_putc>:

int LCD_putc(char c, FILE *stream)
{
    3b50:	1f 93       	push	r17
	if(c == '\n')
    3b52:	8a 30       	cpi	r24, 0x0A	; 10
    3b54:	49 f4       	brne	.+18     	; 0x3b68 <LCD_putc+0x18>
    3b56:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(unsigned char i = 0; i < 16; i++)
		{
			LCDSend(' ', 1);
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	80 e2       	ldi	r24, 0x20	; 32
    3b5c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>

int LCD_putc(char c, FILE *stream)
{
	if(c == '\n')
	{
		for(unsigned char i = 0; i < 16; i++)
    3b60:	1f 5f       	subi	r17, 0xFF	; 255
    3b62:	10 31       	cpi	r17, 0x10	; 16
    3b64:	c9 f7       	brne	.-14     	; 0x3b58 <LCD_putc+0x8>
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <LCD_putc+0x1e>
			LCDSend(' ', 1);
		}
	}
	else
	{
		LCDSend(c, 1);
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCDSend>
	}
	return 0;
}
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	1f 91       	pop	r17
    3b74:	08 95       	ret

00003b76 <MP3WriteReg>:
	return 0;
}

// write two bytes to register
void MP3WriteReg(unsigned char addr, unsigned char hC, unsigned char lC)
{
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	18 2f       	mov	r17, r24
    3b7e:	06 2f       	mov	r16, r22
    3b80:	f4 2e       	mov	r15, r20
	cbi(MP3_Port, MP3_xCS_Pin);
    3b82:	2a 98       	cbi	0x05, 2	; 5
	
	SPITx(0b00000010);
    3b84:	82 e0       	ldi	r24, 0x02	; 2
    3b86:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	
	SPITx(addr);
    3b8a:	81 2f       	mov	r24, r17
    3b8c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	
	SPITx(hC);
    3b90:	80 2f       	mov	r24, r16
    3b92:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	SPITx(lC);
    3b96:	8f 2d       	mov	r24, r15
    3b98:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	
	sbi(MP3_Port, MP3_xCS_Pin);
    3b9c:	2a 9a       	sbi	0x05, 2	; 5
}
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	08 95       	ret

00003ba6 <MP3SetVol>:
	return r;
}

// set volume
void MP3SetVol(unsigned char lC, unsigned char rC)
{
    3ba6:	46 2f       	mov	r20, r22
	lC = 255 - lC;
	rC = 255 - rC;
	MP3WriteReg(MP3_Reg_VOL, lC, rC);
    3ba8:	40 95       	com	r20
    3baa:	80 95       	com	r24
    3bac:	68 2f       	mov	r22, r24
    3bae:	8b e0       	ldi	r24, 0x0B	; 11
    3bb0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <MP3WriteReg>
}
    3bb4:	08 95       	ret

00003bb6 <MP3Init>:
{
	while(MP3Play(f) != 2);
}

void MP3Init(unsigned char vol, unsigned char invert)
{
    3bb6:	1f 93       	push	r17
    3bb8:	18 2f       	mov	r17, r24
	// DREQ as input with pullup resistor
	cbi(MP3_Port, MP3_DREQ_Pin);
    3bba:	28 98       	cbi	0x05, 0	; 5
	cbi(MP3_DDR, MP3_DREQ_Pin);
    3bbc:	20 98       	cbi	0x04, 0	; 4

	// chip select both output and high
	sbi(MP3_Port, MP3_xCS_Pin);
    3bbe:	2a 9a       	sbi	0x05, 2	; 5
	sbi(MP3_Port, MP3_xCDS_Pin);
    3bc0:	29 9a       	sbi	0x05, 1	; 5
	sbi(MP3_DDR, MP3_xCS_Pin);
    3bc2:	22 9a       	sbi	0x04, 2	; 4
	sbi(MP3_DDR, MP3_xCDS_Pin);
    3bc4:	21 9a       	sbi	0x04, 1	; 4

	sbi(DDRD, 4); // reset pin as output
    3bc6:	54 9a       	sbi	0x0a, 4	; 10

	// reset the decoder
	sbi(PORTD, 4);
    3bc8:	5c 9a       	sbi	0x0b, 4	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bca:	8a e1       	ldi	r24, 0x1A	; 26
    3bcc:	98 2f       	mov	r25, r24
    3bce:	9a 95       	dec	r25
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <MP3Init+0x18>
	_delay_us(10);
	cbi(PORTD, 4);
    3bd2:	5c 98       	cbi	0x0b, 4	; 11
    3bd4:	8a 95       	dec	r24
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <MP3Init+0x1e>
	_delay_us(10);
	sbi(PORTD, 4);
    3bd8:	5c 9a       	sbi	0x0b, 4	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bda:	80 e7       	ldi	r24, 0x70	; 112
    3bdc:	97 e1       	ldi	r25, 0x17	; 23
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <MP3Init+0x28>

	_delay_ms(3);

	// wait for reset
	while(bit_is_clear(MP3_PinIn, MP3_DREQ_Pin));
    3be2:	18 9b       	sbis	0x03, 0	; 3
    3be4:	fe cf       	rjmp	.-4      	; 0x3be2 <MP3Init+0x2c>

	// initial setup
	if(invert == 1)
    3be6:	61 30       	cpi	r22, 0x01	; 1
    3be8:	11 f4       	brne	.+4      	; 0x3bee <MP3Init+0x38>
	{
		MP3WriteReg(MP3_Reg_MODE, 0x08, 0x01);
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <MP3Init+0x3a>
	}
	else
	{
		MP3WriteReg(MP3_Reg_MODE, 0x08, 0x00);
    3bee:	40 e0       	ldi	r20, 0x00	; 0
    3bf0:	68 e0       	ldi	r22, 0x08	; 8
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <MP3WriteReg>
	}
	MP3WriteReg(MP3_Reg_CLOCKF, 0x98, 0x00);
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	68 e9       	ldi	r22, 0x98	; 152
    3bfc:	83 e0       	ldi	r24, 0x03	; 3
    3bfe:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <MP3WriteReg>
	MP3SetVol(vol, vol);
    3c02:	61 2f       	mov	r22, r17
    3c04:	81 2f       	mov	r24, r17
    3c06:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <MP3SetVol>
}
    3c0a:	1f 91       	pop	r17
    3c0c:	08 95       	ret

00003c0e <MP3DataTx>:
#include "mp3.h"

// transfer data via SPI to SDI
void MP3DataTx(unsigned char * d, unsigned char len)
{
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	06 2f       	mov	r16, r22
	cbi(MP3_Port, MP3_xCDS_Pin);
    3c18:	29 98       	cbi	0x05, 1	; 5
    3c1a:	ec 01       	movw	r28, r24
    3c1c:	10 e0       	ldi	r17, 0x00	; 0
    3c1e:	04 c0       	rjmp	.+8      	; 0x3c28 <MP3DataTx+0x1a>

	unsigned char i;
	for(i = 0; i < len; i++)
	{
		SPITx(d[i]);
    3c20:	89 91       	ld	r24, Y+
    3c22:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
void MP3DataTx(unsigned char * d, unsigned char len)
{
	cbi(MP3_Port, MP3_xCDS_Pin);

	unsigned char i;
	for(i = 0; i < len; i++)
    3c26:	1f 5f       	subi	r17, 0xFF	; 255
    3c28:	10 17       	cp	r17, r16
    3c2a:	d0 f3       	brcs	.-12     	; 0x3c20 <MP3DataTx+0x12>
	{
		SPITx(d[i]);
	}

	sbi(MP3_Port, MP3_xCDS_Pin);
    3c2c:	29 9a       	sbi	0x05, 1	; 5
}
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	0f 91       	pop	r16
    3c36:	08 95       	ret

00003c38 <MP3Play>:
	}
	MP3WriteReg(MP3_Reg_VOL, vol, vol);	
}

volatile unsigned char MP3Play(MP3File * f)
{
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	a1 97       	sbiw	r28, 0x21	; 33
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
	unsigned char d[MP3PacketSize + 1];

	if(bit_is_set(MP3_PinIn, MP3_DREQ_Pin))
    3c50:	18 99       	sbic	0x03, 0	; 3
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <MP3Play+0x20>
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	17 c0       	rjmp	.+46     	; 0x3c86 <MP3Play+0x4e>
	{
		// read then forward to decoder
		f_read(&(f->fh), d, MP3PacketSize, &d[MP3PacketSize]);
    3c58:	9e 01       	movw	r18, r28
    3c5a:	2f 5d       	subi	r18, 0xDF	; 223
    3c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5e:	40 e2       	ldi	r20, 0x20	; 32
    3c60:	50 e0       	ldi	r21, 0x00	; 0
    3c62:	8e 01       	movw	r16, r28
    3c64:	0f 5f       	subi	r16, 0xFF	; 255
    3c66:	1f 4f       	sbci	r17, 0xFF	; 255
    3c68:	b8 01       	movw	r22, r16
    3c6a:	8b 50       	subi	r24, 0x0B	; 11
    3c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6e:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
		MP3DataTx(d, d[MP3PacketSize]);
    3c72:	69 a1       	ldd	r22, Y+33	; 0x21
    3c74:	c8 01       	movw	r24, r16
    3c76:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <MP3DataTx>

		if(d[MP3PacketSize] != MP3PacketSize) return 2; else return 0;
    3c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c7c:	80 32       	cpi	r24, 0x20	; 32
    3c7e:	11 f4       	brne	.+4      	; 0x3c84 <MP3Play+0x4c>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	01 c0       	rjmp	.+2      	; 0x3c86 <MP3Play+0x4e>
    3c84:	82 e0       	ldi	r24, 0x02	; 2
	}
	else return 1;
}
    3c86:	a1 96       	adiw	r28, 0x21	; 33
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	08 95       	ret

00003c9c <MP3PlayToEnd>:

void MP3PlayToEnd(MP3File * f)
{
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	ec 01       	movw	r28, r24
	while(MP3Play(f) != 2);
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <MP3Play>
    3ca8:	82 30       	cpi	r24, 0x02	; 2
    3caa:	d9 f7       	brne	.-10     	; 0x3ca2 <MP3PlayToEnd+0x6>
}
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	08 95       	ret

00003cb2 <MP3ReadReg>:
	sbi(MP3_Port, MP3_xCS_Pin);
}

// read 2 bytes from register
unsigned int MP3ReadReg(unsigned char addr)
{
    3cb2:	1f 93       	push	r17
    3cb4:	18 2f       	mov	r17, r24
	unsigned char lC;
	unsigned char hC;
	unsigned int r;
	
	cbi(MP3_Port, MP3_xCS_Pin);
    3cb6:	2a 98       	cbi	0x05, 2	; 5
	
	SPITx(0b00000011);
    3cb8:	83 e0       	ldi	r24, 0x03	; 3
    3cba:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	
	SPITx(addr);
    3cbe:	81 2f       	mov	r24, r17
    3cc0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <SPITx>
	
	hC = SPIRx(0);
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	0e 94 da 23 	call	0x47b4	; 0x47b4 <SPIRx>
    3cca:	18 2f       	mov	r17, r24
	lC = SPIRx(0);
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	0e 94 da 23 	call	0x47b4	; 0x47b4 <SPIRx>
	
	sbi(MP3_Port, MP3_xCS_Pin);
    3cd2:	2a 9a       	sbi	0x05, 2	; 5
    3cd4:	31 2f       	mov	r19, r17
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	28 0f       	add	r18, r24
    3cda:	31 1d       	adc	r19, r1
	
	r = ((unsigned int)hC << 8) + lC;
	return r;
}
    3cdc:	c9 01       	movw	r24, r18
    3cde:	1f 91       	pop	r17
    3ce0:	08 95       	ret

00003ce2 <MP3ChangeVol>:
	rC = 255 - rC;
	MP3WriteReg(MP3_Reg_VOL, lC, rC);
}

void MP3ChangeVol(signed char v)
{
    3ce2:	0f 93       	push	r16
    3ce4:	1f 93       	push	r17
    3ce6:	08 2f       	mov	r16, r24
	union {
		unsigned char c[2];
		unsigned short s;
	} cur;
	cur.s = MP3ReadReg(MP3_Reg_VOL);
    3ce8:	8b e0       	ldi	r24, 0x0B	; 11
    3cea:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <MP3ReadReg>
	signed short vol = ((signed short)cur.c[0] + (signed short)cur.c[1] + 1) / 2;
    3cee:	49 2f       	mov	r20, r25
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	48 0f       	add	r20, r24
    3cf4:	51 1d       	adc	r21, r1
    3cf6:	4f 5f       	subi	r20, 0xFF	; 255
    3cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfa:	55 95       	asr	r21
    3cfc:	47 95       	ror	r20
	vol -= v;
    3cfe:	11 27       	eor	r17, r17
    3d00:	07 fd       	sbrc	r16, 7
    3d02:	10 95       	com	r17
    3d04:	40 1b       	sub	r20, r16
    3d06:	51 0b       	sbc	r21, r17
    3d08:	4f 3f       	cpi	r20, 0xFF	; 255
    3d0a:	51 05       	cpc	r21, r1
    3d0c:	19 f0       	breq	.+6      	; 0x3d14 <MP3ChangeVol+0x32>
    3d0e:	14 f0       	brlt	.+4      	; 0x3d14 <MP3ChangeVol+0x32>
    3d10:	4f ef       	ldi	r20, 0xFF	; 255
    3d12:	50 e0       	ldi	r21, 0x00	; 0
	}
	else if(vol > 255)
	{
		vol = 255;
	}
	MP3WriteReg(MP3_Reg_VOL, vol, vol);	
    3d14:	ba 01       	movw	r22, r20
    3d16:	57 ff       	sbrs	r21, 7
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <MP3ChangeVol+0x3c>
    3d1a:	60 e0       	ldi	r22, 0x00	; 0
    3d1c:	70 e0       	ldi	r23, 0x00	; 0
    3d1e:	46 2f       	mov	r20, r22
    3d20:	8b e0       	ldi	r24, 0x0B	; 11
    3d22:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <MP3WriteReg>
}
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	08 95       	ret

00003d2c <MP3Open>:

	sbi(MP3_Port, MP3_xCDS_Pin);
}

volatile unsigned char MP3Open(FILINFO * fno, MP3File * mf, char * p)
{
    3d2c:	8f 92       	push	r8
    3d2e:	9f 92       	push	r9
    3d30:	af 92       	push	r10
    3d32:	bf 92       	push	r11
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ef 92       	push	r14
    3d3a:	ff 92       	push	r15
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	c3 5f       	subi	r28, 0xF3	; 243
    3d4a:	d0 40       	sbci	r29, 0x00	; 0
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	7c 01       	movw	r14, r24
    3d58:	6b 01       	movw	r12, r22
	mf->open = 0;
    3d5a:	2f e0       	ldi	r18, 0x0F	; 15
    3d5c:	31 e0       	ldi	r19, 0x01	; 1
    3d5e:	c2 0e       	add	r12, r18
    3d60:	d3 1e       	adc	r13, r19
    3d62:	d6 01       	movw	r26, r12
    3d64:	1c 92       	st	X, r1
    3d66:	e1 ef       	ldi	r30, 0xF1	; 241
    3d68:	fe ef       	ldi	r31, 0xFE	; 254
    3d6a:	ce 0e       	add	r12, r30
    3d6c:	df 1e       	adc	r13, r31
    3d6e:	da 01       	movw	r26, r20
    3d70:	81 e8       	ldi	r24, 0x81	; 129
    3d72:	90 e0       	ldi	r25, 0x00	; 0
		r.eLen = 0;
		r.aLen = 0;
		r.pLen = 0;
		for(unsigned char i = 0; i < 128 && *p != 0; i++)
		{
			r.p[r.pLen] = *p;
    3d74:	8e 01       	movw	r16, r28
    3d76:	00 59       	subi	r16, 0x90	; 144
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	05 c0       	rjmp	.+10     	; 0x3d86 <MP3Open+0x5a>
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	e6 0f       	add	r30, r22
    3d80:	f1 1d       	adc	r31, r1
    3d82:	20 83       	st	Z, r18
			r.pLen++;
			p++;
    3d84:	11 96       	adiw	r26, 0x01	; 1
    3d86:	6a 2f       	mov	r22, r26
    3d88:	64 1b       	sub	r22, r20
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
		FileName83 r;
		r.nLen = 0;
		r.eLen = 0;
		r.aLen = 0;
		r.pLen = 0;
		for(unsigned char i = 0; i < 128 && *p != 0; i++)
    3d8c:	19 f0       	breq	.+6      	; 0x3d94 <MP3Open+0x68>
    3d8e:	2c 91       	ld	r18, X
    3d90:	22 23       	and	r18, r18
    3d92:	a1 f7       	brne	.-24     	; 0x3d7c <MP3Open+0x50>
		{
			r.p[r.pLen] = *p;
			r.pLen++;
			p++;
		}
		r.p[r.pLen] = 0;
    3d94:	86 2f       	mov	r24, r22
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	de 01       	movw	r26, r28
    3d9a:	a0 59       	subi	r26, 0x90	; 144
    3d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9e:	a8 0f       	add	r26, r24
    3da0:	b9 1f       	adc	r27, r25
    3da2:	1c 92       	st	X, r1
		if(fno != 0)
    3da4:	e1 14       	cp	r14, r1
    3da6:	f1 04       	cpc	r15, r1
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <MP3Open+0x88>
    3daa:	96 2f       	mov	r25, r22
		{
			unsigned char slash = 0;
			unsigned char slashpos = 0;
			for(unsigned char i = r.pLen; i != 0; i--)
			{
				if(r.p[i - 1] == '/')
    3dac:	9e 01       	movw	r18, r28
    3dae:	21 59       	subi	r18, 0x91	; 145
    3db0:	3f 4f       	sbci	r19, 0xFF	; 255
    3db2:	84 c0       	rjmp	.+264    	; 0x3ebc <MP3Open+0x190>
			p++;
		}
		r.p[r.pLen] = 0;
		if(fno != 0)
		{
			if(r.p[r.pLen - 1] != '/')
    3db4:	fe 01       	movw	r30, r28
    3db6:	e1 59       	subi	r30, 0x91	; 145
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	e8 0f       	add	r30, r24
    3dbc:	f9 1f       	adc	r31, r25
    3dbe:	80 81       	ld	r24, Z
    3dc0:	8f 32       	cpi	r24, 0x2F	; 47
    3dc2:	19 f0       	breq	.+6      	; 0x3dca <MP3Open+0x9e>
			{
				r.p[r.pLen] = '/';
    3dc4:	8f e2       	ldi	r24, 0x2F	; 47
    3dc6:	8c 93       	st	X, r24
				r.pLen++;
    3dc8:	6f 5f       	subi	r22, 0xFF	; 255
    3dca:	97 01       	movw	r18, r14
    3dcc:	de 01       	movw	r26, r28
    3dce:	9b 96       	adiw	r26, 0x2b	; 43
    3dd0:	76 2f       	mov	r23, r22
    3dd2:	00 e0       	ldi	r16, 0x00	; 0
					r.nLen++;

					r.a[r.aLen] = fno->fname[i];
					r.aLen++;

					r.p[r.pLen] = fno->fname[i];
    3dd4:	ae 01       	movw	r20, r28
    3dd6:	40 59       	subi	r20, 0x90	; 144
    3dd8:	5f 4f       	sbci	r21, 0xFF	; 255
				r.p[r.pLen] = '/';
				r.pLen++;
			}
			for(unsigned char i = 0; i < 8 + 1 + 3 + 1; i++)
			{
				if(fno->fname[i] != '.' && fno->fname[i] != 0)
    3dda:	f9 01       	movw	r30, r18
    3ddc:	81 85       	ldd	r24, Z+9	; 0x09
    3dde:	8e 32       	cpi	r24, 0x2E	; 46
    3de0:	91 f0       	breq	.+36     	; 0x3e06 <MP3Open+0xda>
    3de2:	88 23       	and	r24, r24
    3de4:	01 f1       	breq	.+64     	; 0x3e26 <MP3Open+0xfa>
				{
					r.n[r.nLen] = fno->fname[i];
    3de6:	8c 93       	st	X, r24
					r.nLen++;
    3de8:	0f 5f       	subi	r16, 0xFF	; 255

					r.a[r.aLen] = fno->fname[i];
    3dea:	95 96       	adiw	r26, 0x25	; 37
    3dec:	8c 93       	st	X, r24
    3dee:	95 97       	sbiw	r26, 0x25	; 37
					r.aLen++;

					r.p[r.pLen] = fno->fname[i];
    3df0:	fa 01       	movw	r30, r20
    3df2:	e7 0f       	add	r30, r23
    3df4:	f1 1d       	adc	r31, r1
    3df6:	80 83       	st	Z, r24
					r.pLen++;
    3df8:	7f 5f       	subi	r23, 0xFF	; 255
    3dfa:	2f 5f       	subi	r18, 0xFF	; 255
    3dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfe:	11 96       	adiw	r26, 0x01	; 1
			if(r.p[r.pLen - 1] != '/')
			{
				r.p[r.pLen] = '/';
				r.pLen++;
			}
			for(unsigned char i = 0; i < 8 + 1 + 3 + 1; i++)
    3e00:	0d 30       	cpi	r16, 0x0D	; 13
    3e02:	59 f7       	brne	.-42     	; 0x3dda <MP3Open+0xae>
    3e04:	10 c0       	rjmp	.+32     	; 0x3e26 <MP3Open+0xfa>
					r.p[r.pLen] = fno->fname[i];
					r.pLen++;
				}
				else if(fno->fname[i] == '.')
				{
					r.a[r.aLen] = fno->fname[i];
    3e06:	fe 01       	movw	r30, r28
    3e08:	e0 5b       	subi	r30, 0xB0	; 176
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	e0 0f       	add	r30, r16
    3e0e:	f1 1d       	adc	r31, r1
    3e10:	80 83       	st	Z, r24
					r.aLen++;
    3e12:	60 2f       	mov	r22, r16
    3e14:	6f 5f       	subi	r22, 0xFF	; 255

					r.p[r.pLen] = fno->fname[i];
    3e16:	fe 01       	movw	r30, r28
    3e18:	e0 59       	subi	r30, 0x90	; 144
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	e7 0f       	add	r30, r23
    3e1e:	f1 1d       	adc	r31, r1
    3e20:	80 83       	st	Z, r24
					r.pLen++;
    3e22:	7f 5f       	subi	r23, 0xFF	; 255
    3e24:	01 c0       	rjmp	.+2      	; 0x3e28 <MP3Open+0xfc>
					break;
    3e26:	60 2f       	mov	r22, r16
				}
				else break;
			}
			r.n[r.nLen] = 0;
    3e28:	9e 01       	movw	r18, r28
    3e2a:	25 5d       	subi	r18, 0xD5	; 213
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	f9 01       	movw	r30, r18
    3e30:	e0 0f       	add	r30, r16
    3e32:	f1 1d       	adc	r31, r1
    3e34:	10 82       	st	Z, r1
			r.a[r.aLen] = 0;
    3e36:	ae 01       	movw	r20, r28
    3e38:	40 5b       	subi	r20, 0xB0	; 176
    3e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3c:	fa 01       	movw	r30, r20
    3e3e:	e6 0f       	add	r30, r22
    3e40:	f1 1d       	adc	r31, r1
    3e42:	10 82       	st	Z, r1
			r.p[r.pLen] = 0;
    3e44:	ce 01       	movw	r24, r28
    3e46:	80 59       	subi	r24, 0x90	; 144
    3e48:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	e7 0f       	add	r30, r23
    3e4e:	f1 1d       	adc	r31, r1
    3e50:	10 82       	st	Z, r1
    3e52:	b0 e2       	ldi	r27, 0x20	; 32
    3e54:	ab 2e       	mov	r10, r27
    3e56:	b1 2c       	mov	r11, r1
    3e58:	a2 0e       	add	r10, r18
    3e5a:	b3 1e       	adc	r11, r19
    3e5c:	36 2f       	mov	r19, r22
    3e5e:	10 e0       	ldi	r17, 0x00	; 0
						c += 'a';
					}
					r.e[r.eLen] = c;
					r.eLen++;
				
					r.a[r.aLen] = fno->fname[i];
    3e60:	4a 01       	movw	r8, r20
					r.aLen++;

					r.p[r.pLen] = fno->fname[i];
    3e62:	ac 01       	movw	r20, r24
    3e64:	1d c0       	rjmp	.+58     	; 0x3ea0 <MP3Open+0x174>
			r.n[r.nLen] = 0;
			r.a[r.aLen] = 0;
			r.p[r.pLen] = 0;
			for(unsigned char i = r.aLen; i < 8 + 1 + 3 + 1; i++)
			{
				if(fno->fname[i] != 0)
    3e66:	a3 2f       	mov	r26, r19
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	f7 01       	movw	r30, r14
    3e6c:	ea 0f       	add	r30, r26
    3e6e:	fb 1f       	adc	r31, r27
    3e70:	21 85       	ldd	r18, Z+9	; 0x09
    3e72:	22 23       	and	r18, r18
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <MP3Open+0x14c>
    3e76:	95 c0       	rjmp	.+298    	; 0x3fa2 <MP3Open+0x276>
				{
					signed char c = fno->fname[i];
					if(c >= 'A' && c <= 'Z')
    3e78:	82 2f       	mov	r24, r18
    3e7a:	81 54       	subi	r24, 0x41	; 65
    3e7c:	8a 31       	cpi	r24, 0x1A	; 26
    3e7e:	10 f0       	brcs	.+4      	; 0x3e84 <MP3Open+0x158>
			r.p[r.pLen] = 0;
			for(unsigned char i = r.aLen; i < 8 + 1 + 3 + 1; i++)
			{
				if(fno->fname[i] != 0)
				{
					signed char c = fno->fname[i];
    3e80:	82 2f       	mov	r24, r18
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <MP3Open+0x15c>
					if(c >= 'A' && c <= 'Z')
					{
						c -= 'A';
						c += 'a';
    3e84:	82 2f       	mov	r24, r18
    3e86:	80 5e       	subi	r24, 0xE0	; 224
					}
					r.e[r.eLen] = c;
    3e88:	f5 01       	movw	r30, r10
    3e8a:	81 93       	st	Z+, r24
    3e8c:	5f 01       	movw	r10, r30
					r.eLen++;
				
					r.a[r.aLen] = fno->fname[i];
    3e8e:	a8 0d       	add	r26, r8
    3e90:	b9 1d       	adc	r27, r9
    3e92:	2c 93       	st	X, r18
					r.aLen++;

					r.p[r.pLen] = fno->fname[i];
    3e94:	fa 01       	movw	r30, r20
    3e96:	e6 0f       	add	r30, r22
    3e98:	f1 1d       	adc	r31, r1
    3e9a:	20 83       	st	Z, r18
				else break;
			}
			r.n[r.nLen] = 0;
			r.a[r.aLen] = 0;
			r.p[r.pLen] = 0;
			for(unsigned char i = r.aLen; i < 8 + 1 + 3 + 1; i++)
    3e9c:	3f 5f       	subi	r19, 0xFF	; 255
    3e9e:	1f 5f       	subi	r17, 0xFF	; 255
    3ea0:	61 2f       	mov	r22, r17
    3ea2:	67 0f       	add	r22, r23
    3ea4:	3d 30       	cpi	r19, 0x0D	; 13
    3ea6:	f8 f2       	brcs	.-66     	; 0x3e66 <MP3Open+0x13a>
    3ea8:	7c c0       	rjmp	.+248    	; 0x3fa2 <MP3Open+0x276>
		{
			unsigned char slash = 0;
			unsigned char slashpos = 0;
			for(unsigned char i = r.pLen; i != 0; i--)
			{
				if(r.p[i - 1] == '/')
    3eaa:	f9 01       	movw	r30, r18
    3eac:	e9 0f       	add	r30, r25
    3eae:	f1 1d       	adc	r31, r1
    3eb0:	80 81       	ld	r24, Z
    3eb2:	8f 32       	cpi	r24, 0x2F	; 47
    3eb4:	11 f4       	brne	.+4      	; 0x3eba <MP3Open+0x18e>
    3eb6:	89 2f       	mov	r24, r25
    3eb8:	04 c0       	rjmp	.+8      	; 0x3ec2 <MP3Open+0x196>
		}
		else
		{
			unsigned char slash = 0;
			unsigned char slashpos = 0;
			for(unsigned char i = r.pLen; i != 0; i--)
    3eba:	91 50       	subi	r25, 0x01	; 1
    3ebc:	99 23       	and	r25, r25
    3ebe:	a9 f7       	brne	.-22     	; 0x3eaa <MP3Open+0x17e>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	de 01       	movw	r26, r28
    3ec4:	9b 96       	adiw	r26, 0x2b	; 43
    3ec6:	9d 01       	movw	r18, r26
    3ec8:	00 e0       	ldi	r16, 0x00	; 0
				}
			}

			for(unsigned char i = 0; i < 32; i++, slash++)
			{
				if(r.p[slash] != '.' && r.p[slash] != 0)
    3eca:	ae 01       	movw	r20, r28
    3ecc:	40 59       	subi	r20, 0x90	; 144
    3ece:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed0:	fa 01       	movw	r30, r20
    3ed2:	e8 0f       	add	r30, r24
    3ed4:	f1 1d       	adc	r31, r1
    3ed6:	70 81       	ld	r23, Z
    3ed8:	7e 32       	cpi	r23, 0x2E	; 46
    3eda:	49 f0       	breq	.+18     	; 0x3eee <MP3Open+0x1c2>
    3edc:	77 23       	and	r23, r23
    3ede:	39 f0       	breq	.+14     	; 0x3eee <MP3Open+0x1c2>
				{
					r.n[r.nLen] = r.p[slash];
    3ee0:	f9 01       	movw	r30, r18
    3ee2:	71 93       	st	Z+, r23
    3ee4:	9f 01       	movw	r18, r30
					r.nLen++;
    3ee6:	0f 5f       	subi	r16, 0xFF	; 255
					slashpos = i;
					break;
				}
			}

			for(unsigned char i = 0; i < 32; i++, slash++)
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	00 32       	cpi	r16, 0x20	; 32
    3eec:	89 f7       	brne	.-30     	; 0x3ed0 <MP3Open+0x1a4>
					r.n[r.nLen] = r.p[slash];
					r.nLen++;
				}
				else break;
			}
			slash++;
    3eee:	8f 5f       	subi	r24, 0xFF	; 255
    3ef0:	9e 01       	movw	r18, r28
    3ef2:	25 5b       	subi	r18, 0xB5	; 181
    3ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef6:	10 e0       	ldi	r17, 0x00	; 0
			for(unsigned char i = 0; i < 3; i++, slash++)
			{
				if(r.p[slash] != 0)
    3ef8:	ae 01       	movw	r20, r28
    3efa:	40 59       	subi	r20, 0x90	; 144
    3efc:	5f 4f       	sbci	r21, 0xFF	; 255
    3efe:	fa 01       	movw	r30, r20
    3f00:	e8 0f       	add	r30, r24
    3f02:	f1 1d       	adc	r31, r1
    3f04:	70 81       	ld	r23, Z
    3f06:	77 23       	and	r23, r23
    3f08:	41 f0       	breq	.+16     	; 0x3f1a <MP3Open+0x1ee>
				{
					r.e[r.eLen] = r.p[slash];
    3f0a:	f9 01       	movw	r30, r18
    3f0c:	71 93       	st	Z+, r23
    3f0e:	9f 01       	movw	r18, r30
					r.eLen++;
    3f10:	1f 5f       	subi	r17, 0xFF	; 255
					r.nLen++;
				}
				else break;
			}
			slash++;
			for(unsigned char i = 0; i < 3; i++, slash++)
    3f12:	13 30       	cpi	r17, 0x03	; 3
    3f14:	11 f0       	breq	.+4      	; 0x3f1a <MP3Open+0x1ee>
    3f16:	8f 5f       	subi	r24, 0xFF	; 255
    3f18:	f2 cf       	rjmp	.-28     	; 0x3efe <MP3Open+0x1d2>
					r.eLen++;
				}
				else break;
			}

			if(r.nLen > 8)
    3f1a:	09 30       	cpi	r16, 0x09	; 9
    3f1c:	08 f4       	brcc	.+2      	; 0x3f20 <MP3Open+0x1f4>
    3f1e:	3f c0       	rjmp	.+126    	; 0x3f9e <MP3Open+0x272>
    3f20:	49 2f       	mov	r20, r25
			{
				for(unsigned char i = 0; i < 6; i++, slashpos++)
				{
					r.p[slashpos] = r.n[i];
    3f22:	9e 01       	movw	r18, r28
    3f24:	20 59       	subi	r18, 0x90	; 144
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
				else break;
			}

			if(r.nLen > 8)
			{
				for(unsigned char i = 0; i < 6; i++, slashpos++)
    3f28:	be 01       	movw	r22, r28
    3f2a:	6f 5c       	subi	r22, 0xCF	; 207
    3f2c:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					r.p[slashpos] = r.n[i];
    3f2e:	f9 01       	movw	r30, r18
    3f30:	e4 0f       	add	r30, r20
    3f32:	f1 1d       	adc	r31, r1
    3f34:	8d 91       	ld	r24, X+
    3f36:	80 83       	st	Z, r24
				else break;
			}

			if(r.nLen > 8)
			{
				for(unsigned char i = 0; i < 6; i++, slashpos++)
    3f38:	4f 5f       	subi	r20, 0xFF	; 255
    3f3a:	a6 17       	cp	r26, r22
    3f3c:	b7 07       	cpc	r27, r23
    3f3e:	b9 f7       	brne	.-18     	; 0x3f2e <MP3Open+0x202>
    3f40:	9a 5f       	subi	r25, 0xFA	; 250
				{
					r.p[slashpos] = r.n[i];
				}
				r.p[slashpos] = '~';
    3f42:	f9 01       	movw	r30, r18
    3f44:	e9 0f       	add	r30, r25
    3f46:	f1 1d       	adc	r31, r1
    3f48:	8e e7       	ldi	r24, 0x7E	; 126
    3f4a:	80 83       	st	Z, r24
				slashpos++;
    3f4c:	9f 5f       	subi	r25, 0xFF	; 255
				r.p[slashpos] = '1';
    3f4e:	f9 01       	movw	r30, r18
    3f50:	e9 0f       	add	r30, r25
    3f52:	f1 1d       	adc	r31, r1
    3f54:	81 e3       	ldi	r24, 0x31	; 49
    3f56:	80 83       	st	Z, r24
				slashpos++;
    3f58:	9f 5f       	subi	r25, 0xFF	; 255
				r.p[slashpos] = '.';
    3f5a:	f9 01       	movw	r30, r18
    3f5c:	e9 0f       	add	r30, r25
    3f5e:	f1 1d       	adc	r31, r1
    3f60:	8e e2       	ldi	r24, 0x2E	; 46
    3f62:	80 83       	st	Z, r24
				slashpos++;
    3f64:	9f 5f       	subi	r25, 0xFF	; 255
				for(unsigned char i = 0; i < 3; i++, slashpos++)
				{
					r.p[slashpos] = r.e[i];
    3f66:	d9 01       	movw	r26, r18
    3f68:	a9 0f       	add	r26, r25
    3f6a:	b1 1d       	adc	r27, r1
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e5 5b       	subi	r30, 0xB5	; 181
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	8c 93       	st	X, r24
				slashpos++;
				r.p[slashpos] = '1';
				slashpos++;
				r.p[slashpos] = '.';
				slashpos++;
				for(unsigned char i = 0; i < 3; i++, slashpos++)
    3f76:	9f 5f       	subi	r25, 0xFF	; 255
				{
					r.p[slashpos] = r.e[i];
    3f78:	d9 01       	movw	r26, r18
    3f7a:	a9 0f       	add	r26, r25
    3f7c:	b1 1d       	adc	r27, r1
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e4 5b       	subi	r30, 0xB4	; 180
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 81       	ld	r24, Z
    3f86:	8c 93       	st	X, r24
    3f88:	9f 5f       	subi	r25, 0xFF	; 255
    3f8a:	29 0f       	add	r18, r25
    3f8c:	31 1d       	adc	r19, r1
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e3 5b       	subi	r30, 0xB3	; 179
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	d9 01       	movw	r26, r18
    3f98:	8c 93       	st	X, r24
    3f9a:	69 2f       	mov	r22, r25
    3f9c:	6f 5f       	subi	r22, 0xFF	; 255
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	01 c0       	rjmp	.+2      	; 0x3fa4 <MP3Open+0x278>
    3fa2:	93 2f       	mov	r25, r19
				}
				r.pLen = slashpos;
			}

		}
		r.e[r.eLen] = 0;
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e5 5b       	subi	r30, 0xB5	; 181
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	df 01       	movw	r26, r30
    3fac:	a1 0f       	add	r26, r17
    3fae:	b1 1d       	adc	r27, r1
    3fb0:	1c 92       	st	X, r1
		r.a[r.aLen] = 0;
		r.p[r.pLen] = 0;

		if(r.e[0] != 'm' || r.e[1] != 'p' || r.e[2] != '3') return 255;
    3fb2:	80 81       	ld	r24, Z
    3fb4:	8d 36       	cpi	r24, 0x6D	; 109
    3fb6:	09 f0       	breq	.+2      	; 0x3fba <MP3Open+0x28e>
    3fb8:	dc c2       	rjmp	.+1464   	; 0x4572 <MP3Open+0x846>
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e4 5b       	subi	r30, 0xB4	; 180
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	80 37       	cpi	r24, 0x70	; 112
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <MP3Open+0x29c>
    3fc6:	d5 c2       	rjmp	.+1450   	; 0x4572 <MP3Open+0x846>
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e3 5b       	subi	r30, 0xB3	; 179
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	83 33       	cpi	r24, 0x33	; 51
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <MP3Open+0x2aa>
    3fd4:	ce c2       	rjmp	.+1436   	; 0x4572 <MP3Open+0x846>

		mf->fn = r;
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e0 51       	subi	r30, 0x10	; 16
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	00 83       	st	Z, r16
    3fde:	fe 01       	movw	r30, r28
    3fe0:	ef 50       	subi	r30, 0x0F	; 15
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	10 83       	st	Z, r17
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	ee 50       	subi	r30, 0x0E	; 14
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	90 83       	st	Z, r25
    3fee:	fe 01       	movw	r30, r28
    3ff0:	ed 50       	subi	r30, 0x0D	; 13
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	60 83       	st	Z, r22
			}

		}
		r.e[r.eLen] = 0;
		r.a[r.aLen] = 0;
		r.p[r.pLen] = 0;
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e0 59       	subi	r30, 0x90	; 144
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	e6 0f       	add	r30, r22
    3ffe:	f1 1d       	adc	r31, r1
    4000:	10 82       	st	Z, r1
				r.pLen = slashpos;
			}

		}
		r.e[r.eLen] = 0;
		r.a[r.aLen] = 0;
    4002:	fe 01       	movw	r30, r28
    4004:	e0 5b       	subi	r30, 0xB0	; 176
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	e9 0f       	add	r30, r25
    400a:	f1 1d       	adc	r31, r1
    400c:	10 82       	st	Z, r1
		r.p[r.pLen] = 0;

		if(r.e[0] != 'm' || r.e[1] != 'p' || r.e[2] != '3') return 255;

		mf->fn = r;
    400e:	d6 01       	movw	r26, r12
    4010:	fe 01       	movw	r30, r28
    4012:	bb 96       	adiw	r30, 0x2b	; 43
    4014:	89 ec       	ldi	r24, 0xC9	; 201
    4016:	01 90       	ld	r0, Z+
    4018:	0d 92       	st	X+, r0
    401a:	81 50       	subi	r24, 0x01	; 1
    401c:	e1 f7       	brne	.-8      	; 0x4016 <MP3Open+0x2ea>

		FIL temp_fh;
		unsigned char err = f_open(&temp_fh, mf->fn.p, FA_READ);
    401e:	b6 01       	movw	r22, r12
    4020:	6b 5b       	subi	r22, 0xBB	; 187
    4022:	7f 4f       	sbci	r23, 0xFF	; 255
    4024:	8e 01       	movw	r16, r28
    4026:	0f 5e       	subi	r16, 0xEF	; 239
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	41 e0       	ldi	r20, 0x01	; 1
    402c:	c8 01       	movw	r24, r16
    402e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <f_open>
    4032:	98 2e       	mov	r9, r24
		if(err != 0) return err;
    4034:	88 23       	and	r24, r24
    4036:	09 f0       	breq	.+2      	; 0x403a <MP3Open+0x30e>
    4038:	9e c2       	rjmp	.+1340   	; 0x4576 <MP3Open+0x84a>
		mf->fh = temp_fh;
    403a:	d6 01       	movw	r26, r12
    403c:	ab 50       	subi	r26, 0x0B	; 11
    403e:	bf 4f       	sbci	r27, 0xFF	; 255
    4040:	f8 01       	movw	r30, r16
    4042:	8a e1       	ldi	r24, 0x1A	; 26
    4044:	01 90       	ld	r0, Z+
    4046:	0d 92       	st	X+, r0
    4048:	81 50       	subi	r24, 0x01	; 1
    404a:	e1 f7       	brne	.-8      	; 0x4044 <MP3Open+0x318>
	}

	if(mf->fh.fsize < 128) return 253;
    404c:	ef ef       	ldi	r30, 0xFF	; 255
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	ce 0e       	add	r12, r30
    4052:	df 1e       	adc	r13, r31
    4054:	f6 01       	movw	r30, r12
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	a2 81       	ldd	r26, Z+2	; 0x02
    405c:	b3 81       	ldd	r27, Z+3	; 0x03
    405e:	21 e0       	ldi	r18, 0x01	; 1
    4060:	3f ef       	ldi	r19, 0xFF	; 255
    4062:	c2 0e       	add	r12, r18
    4064:	d3 1e       	adc	r13, r19
    4066:	80 38       	cpi	r24, 0x80	; 128
    4068:	91 05       	cpc	r25, r1
    406a:	a1 05       	cpc	r26, r1
    406c:	b1 05       	cpc	r27, r1
    406e:	18 f4       	brcc	.+6      	; 0x4076 <MP3Open+0x34a>
    4070:	ad ef       	ldi	r26, 0xFD	; 253
    4072:	9a 2e       	mov	r9, r26
    4074:	80 c2       	rjmp	.+1280   	; 0x4576 <MP3Open+0x84a>
	else
	{
		unsigned char id3v2[5];

		f_lseek(&(mf->fh), 0);
    4076:	f5 ef       	ldi	r31, 0xF5	; 245
    4078:	af 2e       	mov	r10, r31
    407a:	b1 2c       	mov	r11, r1
    407c:	ac 0c       	add	r10, r12
    407e:	bd 1c       	adc	r11, r13
    4080:	40 e0       	ldi	r20, 0x00	; 0
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	c5 01       	movw	r24, r10
    408a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>
		f_read(&(mf->fh), id3v2, 3, &id3v2[4]);
    408e:	9e 01       	movw	r18, r28
    4090:	25 5f       	subi	r18, 0xF5	; 245
    4092:	3f 4f       	sbci	r19, 0xFF	; 255
    4094:	43 e0       	ldi	r20, 0x03	; 3
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	be 01       	movw	r22, r28
    409a:	69 5f       	subi	r22, 0xF9	; 249
    409c:	7f 4f       	sbci	r23, 0xFF	; 255
    409e:	c5 01       	movw	r24, r10
    40a0:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>

		if(id3v2[0] == 'I' && id3v2[1] == 'D' && id3v2[2] == '3')
    40a4:	8f 81       	ldd	r24, Y+7	; 0x07
    40a6:	89 34       	cpi	r24, 0x49	; 73
    40a8:	09 f0       	breq	.+2      	; 0x40ac <MP3Open+0x380>
    40aa:	66 c0       	rjmp	.+204    	; 0x4178 <MP3Open+0x44c>
    40ac:	88 85       	ldd	r24, Y+8	; 0x08
    40ae:	84 34       	cpi	r24, 0x44	; 68
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <MP3Open+0x388>
    40b2:	62 c0       	rjmp	.+196    	; 0x4178 <MP3Open+0x44c>
    40b4:	89 85       	ldd	r24, Y+9	; 0x09
    40b6:	83 33       	cpi	r24, 0x33	; 51
    40b8:	09 f0       	breq	.+2      	; 0x40bc <MP3Open+0x390>
    40ba:	5e c0       	rjmp	.+188    	; 0x4178 <MP3Open+0x44c>
		{
			f_lseek(&(mf->fh), 0);
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	c5 01       	movw	r24, r10
    40c6:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>

			unsigned char pb[5];
			pb[4] = 0;
    40ca:	18 8a       	std	Y+16, r1	; 0x10

			while(1)
			{
				// loop for TIT2 title tag

				f_read(&(mf->fh), c, 1, &c[1]);
    40cc:	e2 e0       	ldi	r30, 0x02	; 2
    40ce:	ee 2e       	mov	r14, r30
    40d0:	f1 2c       	mov	r15, r1
    40d2:	ec 0e       	add	r14, r28
    40d4:	fd 1e       	adc	r15, r29
    40d6:	8e 01       	movw	r16, r28
    40d8:	0f 5f       	subi	r16, 0xFF	; 255
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	97 01       	movw	r18, r14
    40de:	41 e0       	ldi	r20, 0x01	; 1
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	b8 01       	movw	r22, r16
    40e4:	c5 01       	movw	r24, r10
    40e6:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
				
				pb[3] = pb[2];
    40ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    40ec:	3f 87       	std	Y+15, r19	; 0x0f
				pb[2] = pb[1];
    40ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    40f0:	2e 87       	std	Y+14, r18	; 0x0e
				pb[1] = pb[0];
    40f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    40f4:	9d 87       	std	Y+13, r25	; 0x0d
				pb[0] = c[0];
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	8c 87       	std	Y+12, r24	; 0x0c

				if(pb[0] == '2' && pb[1] == 'T' && pb[2] == 'I' && pb[3] == 'T')
    40fa:	82 33       	cpi	r24, 0x32	; 50
    40fc:	c1 f5       	brne	.+112    	; 0x416e <MP3Open+0x442>
    40fe:	94 35       	cpi	r25, 0x54	; 84
    4100:	b1 f5       	brne	.+108    	; 0x416e <MP3Open+0x442>
    4102:	29 34       	cpi	r18, 0x49	; 73
    4104:	a1 f5       	brne	.+104    	; 0x416e <MP3Open+0x442>
    4106:	34 35       	cpi	r19, 0x54	; 84
    4108:	91 f5       	brne	.+100    	; 0x416e <MP3Open+0x442>
				{
					// TIT2 tag found, read length of title

					f_read(&(mf->fh), pb, 4, &c[1]);
    410a:	97 01       	movw	r18, r14
    410c:	44 e0       	ldi	r20, 0x04	; 4
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	be 01       	movw	r22, r28
    4112:	64 5f       	subi	r22, 0xF4	; 244
    4114:	7f 4f       	sbci	r23, 0xFF	; 255
    4116:	c5 01       	movw	r24, r10
    4118:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
					unsigned long tl = ((unsigned long)pb[0] << (8 * 3)) + ((unsigned long)pb[1] << (8 * 2)) + ((unsigned long)pb[2] << (8 * 1)) + pb[3];

					mf->titleLen = tl - 1;
    411c:	8f 85       	ldd	r24, Y+15	; 0x0f
    411e:	81 50       	subi	r24, 0x01	; 1
    4120:	f6 01       	movw	r30, r12
    4122:	e8 51       	subi	r30, 0x18	; 24
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 83       	st	Z, r24
					if(mf->titleLen > 30) mf->titleLen = 30; // too long
    4128:	8f 31       	cpi	r24, 0x1F	; 31
    412a:	10 f0       	brcs	.+4      	; 0x4130 <MP3Open+0x404>
    412c:	8e e1       	ldi	r24, 0x1E	; 30
    412e:	80 83       	st	Z, r24

					// skip 3 null, then read in title
					f_read(&(mf->fh), pb, 3, &c[1]);
    4130:	97 01       	movw	r18, r14
    4132:	43 e0       	ldi	r20, 0x03	; 3
    4134:	50 e0       	ldi	r21, 0x00	; 0
    4136:	be 01       	movw	r22, r28
    4138:	64 5f       	subi	r22, 0xF4	; 244
    413a:	7f 4f       	sbci	r23, 0xFF	; 255
    413c:	c5 01       	movw	r24, r10
    413e:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
					f_read(&(mf->fh), mf->title, mf->titleLen, &c[1]);
    4142:	86 01       	movw	r16, r12
    4144:	08 51       	subi	r16, 0x18	; 24
    4146:	1f 4f       	sbci	r17, 0xFF	; 255
    4148:	d8 01       	movw	r26, r16
    414a:	4c 91       	ld	r20, X
    414c:	b6 01       	movw	r22, r12
    414e:	67 53       	subi	r22, 0x37	; 55
    4150:	7f 4f       	sbci	r23, 0xFF	; 255
    4152:	97 01       	movw	r18, r14
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	c5 01       	movw	r24, r10
    4158:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>

					mf->title[mf->titleLen] = 0;
    415c:	f8 01       	movw	r30, r16
    415e:	80 81       	ld	r24, Z
    4160:	f6 01       	movw	r30, r12
    4162:	e8 0f       	add	r30, r24
    4164:	f1 1d       	adc	r31, r1
    4166:	e7 53       	subi	r30, 0x37	; 55
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	10 82       	st	Z, r1
    416c:	64 c0       	rjmp	.+200    	; 0x4236 <MP3Open+0x50a>

					break;
				}
				else if(c[1] == 0)
    416e:	8a 81       	ldd	r24, Y+2	; 0x02
    4170:	88 23       	and	r24, r24
    4172:	09 f0       	breq	.+2      	; 0x4176 <MP3Open+0x44a>
    4174:	b3 cf       	rjmp	.-154    	; 0x40dc <MP3Open+0x3b0>
    4176:	4b c0       	rjmp	.+150    	; 0x420e <MP3Open+0x4e2>
		}
		else
		{
			unsigned char id3v1[5];

			f_lseek(&(mf->fh), mf->fh.fsize - 128);
    4178:	4f ef       	ldi	r20, 0xFF	; 255
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	c4 0e       	add	r12, r20
    417e:	d5 1e       	adc	r13, r21
    4180:	d6 01       	movw	r26, r12
    4182:	4d 91       	ld	r20, X+
    4184:	5d 91       	ld	r21, X+
    4186:	6d 91       	ld	r22, X+
    4188:	7c 91       	ld	r23, X
    418a:	e1 e0       	ldi	r30, 0x01	; 1
    418c:	ff ef       	ldi	r31, 0xFF	; 255
    418e:	ce 0e       	add	r12, r30
    4190:	df 1e       	adc	r13, r31
    4192:	40 58       	subi	r20, 0x80	; 128
    4194:	50 40       	sbci	r21, 0x00	; 0
    4196:	60 40       	sbci	r22, 0x00	; 0
    4198:	70 40       	sbci	r23, 0x00	; 0
    419a:	c5 01       	movw	r24, r10
    419c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>
			f_read(&(mf->fh), id3v1, 3, &id3v1[4]);		
    41a0:	9e 01       	movw	r18, r28
    41a2:	20 5f       	subi	r18, 0xF0	; 240
    41a4:	3f 4f       	sbci	r19, 0xFF	; 255
    41a6:	43 e0       	ldi	r20, 0x03	; 3
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	be 01       	movw	r22, r28
    41ac:	64 5f       	subi	r22, 0xF4	; 244
    41ae:	7f 4f       	sbci	r23, 0xFF	; 255
    41b0:	c5 01       	movw	r24, r10
    41b2:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>

			if(id3v1[0] == 'T' && id3v1[1] == 'A' && id3v1[2] == 'G')
    41b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41b8:	84 35       	cpi	r24, 0x54	; 84
    41ba:	49 f5       	brne	.+82     	; 0x420e <MP3Open+0x4e2>
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	81 34       	cpi	r24, 0x41	; 65
    41c0:	31 f5       	brne	.+76     	; 0x420e <MP3Open+0x4e2>
    41c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    41c4:	87 34       	cpi	r24, 0x47	; 71
    41c6:	19 f5       	brne	.+70     	; 0x420e <MP3Open+0x4e2>
			{
				// TAG tag found for id3v1
				// read in title
				f_read(&(mf->fh), mf->title, 30, &id3v1[3]);			
    41c8:	b6 01       	movw	r22, r12
    41ca:	67 53       	subi	r22, 0x37	; 55
    41cc:	7f 4f       	sbci	r23, 0xFF	; 255
    41ce:	9e 01       	movw	r18, r28
    41d0:	21 5f       	subi	r18, 0xF1	; 241
    41d2:	3f 4f       	sbci	r19, 0xFF	; 255
    41d4:	4e e1       	ldi	r20, 0x1E	; 30
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	c5 01       	movw	r24, r10
    41da:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
				mf->titleLen = 30;
    41de:	f6 01       	movw	r30, r12
    41e0:	e8 51       	subi	r30, 0x18	; 24
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	8e e1       	ldi	r24, 0x1E	; 30
    41e6:	80 83       	st	Z, r24
    41e8:	d6 01       	movw	r26, r12
    41ea:	aa 51       	subi	r26, 0x1A	; 26
    41ec:	bf 4f       	sbci	r27, 0xFF	; 255
				// strip spaces and non printables from end
				for(signed char i = 29; i != -1; i--)
    41ee:	96 01       	movw	r18, r12
    41f0:	28 53       	subi	r18, 0x38	; 56
    41f2:	3f 4f       	sbci	r19, 0xFF	; 255
				{
					if(mf->title[i] <= ' ' || mf->title[i] > 126)
    41f4:	8c 91       	ld	r24, X
    41f6:	81 52       	subi	r24, 0x21	; 33
    41f8:	8e 35       	cpi	r24, 0x5E	; 94
    41fa:	e8 f0       	brcs	.+58     	; 0x4236 <MP3Open+0x50a>
					{
						mf->title[i] = 0;
    41fc:	1c 92       	st	X, r1
						mf->titleLen--;
    41fe:	80 81       	ld	r24, Z
    4200:	81 50       	subi	r24, 0x01	; 1
    4202:	80 83       	st	Z, r24
    4204:	11 97       	sbiw	r26, 0x01	; 1
				// TAG tag found for id3v1
				// read in title
				f_read(&(mf->fh), mf->title, 30, &id3v1[3]);			
				mf->titleLen = 30;
				// strip spaces and non printables from end
				for(signed char i = 29; i != -1; i--)
    4206:	a2 17       	cp	r26, r18
    4208:	b3 07       	cpc	r27, r19
    420a:	a1 f7       	brne	.-24     	; 0x41f4 <MP3Open+0x4c8>
    420c:	14 c0       	rjmp	.+40     	; 0x4236 <MP3Open+0x50a>
				}
			}
			else
			{
				// end of file, use file name
				mf->titleLen = mf->fn.nLen;
    420e:	f6 01       	movw	r30, r12
    4210:	e8 51       	subi	r30, 0x18	; 24
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	25 ec       	ldi	r18, 0xC5	; 197
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	c2 0e       	add	r12, r18
    421a:	d3 1e       	adc	r13, r19
    421c:	d6 01       	movw	r26, r12
    421e:	8c 91       	ld	r24, X
    4220:	2b e3       	ldi	r18, 0x3B	; 59
    4222:	3f ef       	ldi	r19, 0xFF	; 255
    4224:	c2 0e       	add	r12, r18
    4226:	d3 1e       	adc	r13, r19
    4228:	80 83       	st	Z, r24
				strcpy(mf->title, mf->fn.n);
    422a:	b6 01       	movw	r22, r12
    422c:	c6 01       	movw	r24, r12
    422e:	87 53       	subi	r24, 0x37	; 55
    4230:	9f 4f       	sbci	r25, 0xFF	; 255
    4232:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <strcpy>
	}

	{
		// finished reading title, now calculate song length

		f_lseek(&mf->fh, 0);
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	60 e0       	ldi	r22, 0x00	; 0
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	c5 01       	movw	r24, r10
    4240:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>

		while(1)
		{
			// loop for mp3 header

			f_read(&mf->fh, c, 1, &c[1]);
    4244:	72 e0       	ldi	r23, 0x02	; 2
    4246:	e7 2e       	mov	r14, r23
    4248:	f1 2c       	mov	r15, r1
    424a:	ec 0e       	add	r14, r28
    424c:	fd 1e       	adc	r15, r29
    424e:	8e 01       	movw	r16, r28
    4250:	0f 5f       	subi	r16, 0xFF	; 255
    4252:	1f 4f       	sbci	r17, 0xFF	; 255
    4254:	97 01       	movw	r18, r14
    4256:	41 e0       	ldi	r20, 0x01	; 1
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	b8 01       	movw	r22, r16
    425c:	c5 01       	movw	r24, r10
    425e:	0e 94 bd 19 	call	0x337a	; 0x337a <f_read>
	
			pb[0] = pb[1];
    4262:	3c 81       	ldd	r19, Y+4	; 0x04
    4264:	3b 83       	std	Y+3, r19	; 0x03
			pb[1] = pb[2];
    4266:	9d 81       	ldd	r25, Y+5	; 0x05
    4268:	9c 83       	std	Y+4, r25	; 0x04
			pb[2] = pb[3];
    426a:	2e 81       	ldd	r18, Y+6	; 0x06
    426c:	2d 83       	std	Y+5, r18	; 0x05
			pb[3] = c[0];
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	8e 83       	std	Y+6, r24	; 0x06

			if((pb[1] & 0b11111110) == 0b11111010 && pb[0] == 0xFF)
    4272:	9e 7f       	andi	r25, 0xFE	; 254
    4274:	9a 3f       	cpi	r25, 0xFA	; 250
    4276:	09 f0       	breq	.+2      	; 0x427a <MP3Open+0x54e>
    4278:	75 c1       	rjmp	.+746    	; 0x4564 <MP3Open+0x838>
    427a:	3f 3f       	cpi	r19, 0xFF	; 255
    427c:	09 f0       	breq	.+2      	; 0x4280 <MP3Open+0x554>
    427e:	72 c1       	rjmp	.+740    	; 0x4564 <MP3Open+0x838>
			{
				// sync found

				mf->headerLoc = mf->fh.fptr - 4;
    4280:	b6 01       	movw	r22, r12
    4282:	6f 50       	subi	r22, 0x0F	; 15
    4284:	7f 4f       	sbci	r23, 0xFF	; 255
    4286:	4b ef       	ldi	r20, 0xFB	; 251
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	c4 0e       	add	r12, r20
    428c:	d5 1e       	adc	r13, r21
    428e:	f6 01       	movw	r30, r12
    4290:	80 81       	ld	r24, Z
    4292:	91 81       	ldd	r25, Z+1	; 0x01
    4294:	a2 81       	ldd	r26, Z+2	; 0x02
    4296:	b3 81       	ldd	r27, Z+3	; 0x03
    4298:	45 e0       	ldi	r20, 0x05	; 5
    429a:	5f ef       	ldi	r21, 0xFF	; 255
    429c:	c4 0e       	add	r12, r20
    429e:	d5 1e       	adc	r13, r21
    42a0:	04 97       	sbiw	r24, 0x04	; 4
    42a2:	a1 09       	sbc	r26, r1
    42a4:	b1 09       	sbc	r27, r1
    42a6:	fb 01       	movw	r30, r22
    42a8:	80 83       	st	Z, r24
    42aa:	91 83       	std	Z+1, r25	; 0x01
    42ac:	a2 83       	std	Z+2, r26	; 0x02
    42ae:	b3 83       	std	Z+3, r27	; 0x03

				// get the bit rate according to which MPEG version
				unsigned long i = ((pb[2] & 0xF0) >> 4);
    42b0:	22 95       	swap	r18
    42b2:	2f 70       	andi	r18, 0x0F	; 15
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e0       	ldi	r20, 0x00	; 0
    42b8:	50 e0       	ldi	r21, 0x00	; 0

				if(bit_is_set(pb[1], 3))
    42ba:	8c 81       	ldd	r24, Y+4	; 0x04
    42bc:	83 ff       	sbrs	r24, 3
    42be:	6c c0       	rjmp	.+216    	; 0x4398 <MP3Open+0x66c>
				{
					// MPEG version 1

					switch(i)
    42c0:	27 30       	cpi	r18, 0x07	; 7
    42c2:	31 05       	cpc	r19, r1
    42c4:	41 05       	cpc	r20, r1
    42c6:	51 05       	cpc	r21, r1
    42c8:	09 f4       	brne	.+2      	; 0x42cc <MP3Open+0x5a0>
    42ca:	f1 c0       	rjmp	.+482    	; 0x44ae <MP3Open+0x782>
    42cc:	28 30       	cpi	r18, 0x08	; 8
    42ce:	31 05       	cpc	r19, r1
    42d0:	41 05       	cpc	r20, r1
    42d2:	51 05       	cpc	r21, r1
    42d4:	28 f5       	brcc	.+74     	; 0x4320 <MP3Open+0x5f4>
    42d6:	23 30       	cpi	r18, 0x03	; 3
    42d8:	31 05       	cpc	r19, r1
    42da:	41 05       	cpc	r20, r1
    42dc:	51 05       	cpc	r21, r1
    42de:	09 f4       	brne	.+2      	; 0x42e2 <MP3Open+0x5b6>
    42e0:	d2 c0       	rjmp	.+420    	; 0x4486 <MP3Open+0x75a>
    42e2:	24 30       	cpi	r18, 0x04	; 4
    42e4:	31 05       	cpc	r19, r1
    42e6:	41 05       	cpc	r20, r1
    42e8:	51 05       	cpc	r21, r1
    42ea:	68 f4       	brcc	.+26     	; 0x4306 <MP3Open+0x5da>
    42ec:	21 30       	cpi	r18, 0x01	; 1
    42ee:	31 05       	cpc	r19, r1
    42f0:	41 05       	cpc	r20, r1
    42f2:	51 05       	cpc	r21, r1
    42f4:	09 f4       	brne	.+2      	; 0x42f8 <MP3Open+0x5cc>
    42f6:	bd c0       	rjmp	.+378    	; 0x4472 <MP3Open+0x746>
    42f8:	22 30       	cpi	r18, 0x02	; 2
    42fa:	31 05       	cpc	r19, r1
    42fc:	41 05       	cpc	r20, r1
    42fe:	51 05       	cpc	r21, r1
    4300:	09 f0       	breq	.+2      	; 0x4304 <MP3Open+0x5d8>
    4302:	e8 c0       	rjmp	.+464    	; 0x44d4 <MP3Open+0x7a8>
    4304:	bb c0       	rjmp	.+374    	; 0x447c <MP3Open+0x750>
    4306:	25 30       	cpi	r18, 0x05	; 5
    4308:	31 05       	cpc	r19, r1
    430a:	41 05       	cpc	r20, r1
    430c:	51 05       	cpc	r21, r1
    430e:	09 f4       	brne	.+2      	; 0x4312 <MP3Open+0x5e6>
    4310:	c4 c0       	rjmp	.+392    	; 0x449a <MP3Open+0x76e>
    4312:	26 30       	cpi	r18, 0x06	; 6
    4314:	31 05       	cpc	r19, r1
    4316:	41 05       	cpc	r20, r1
    4318:	51 05       	cpc	r21, r1
    431a:	08 f0       	brcs	.+2      	; 0x431e <MP3Open+0x5f2>
    431c:	c3 c0       	rjmp	.+390    	; 0x44a4 <MP3Open+0x778>
    431e:	b8 c0       	rjmp	.+368    	; 0x4490 <MP3Open+0x764>
    4320:	2b 30       	cpi	r18, 0x0B	; 11
    4322:	31 05       	cpc	r19, r1
    4324:	41 05       	cpc	r20, r1
    4326:	51 05       	cpc	r21, r1
    4328:	19 f1       	breq	.+70     	; 0x4370 <MP3Open+0x644>
    432a:	2c 30       	cpi	r18, 0x0C	; 12
    432c:	31 05       	cpc	r19, r1
    432e:	41 05       	cpc	r20, r1
    4330:	51 05       	cpc	r21, r1
    4332:	68 f4       	brcc	.+26     	; 0x434e <MP3Open+0x622>
    4334:	29 30       	cpi	r18, 0x09	; 9
    4336:	31 05       	cpc	r19, r1
    4338:	41 05       	cpc	r20, r1
    433a:	51 05       	cpc	r21, r1
    433c:	09 f4       	brne	.+2      	; 0x4340 <MP3Open+0x614>
    433e:	c1 c0       	rjmp	.+386    	; 0x44c2 <MP3Open+0x796>
    4340:	2a 30       	cpi	r18, 0x0A	; 10
    4342:	31 05       	cpc	r19, r1
    4344:	41 05       	cpc	r20, r1
    4346:	51 05       	cpc	r21, r1
    4348:	08 f0       	brcs	.+2      	; 0x434c <MP3Open+0x620>
    434a:	c0 c0       	rjmp	.+384    	; 0x44cc <MP3Open+0x7a0>
    434c:	b5 c0       	rjmp	.+362    	; 0x44b8 <MP3Open+0x78c>
    434e:	2d 30       	cpi	r18, 0x0D	; 13
    4350:	31 05       	cpc	r19, r1
    4352:	41 05       	cpc	r20, r1
    4354:	51 05       	cpc	r21, r1
    4356:	b1 f0       	breq	.+44     	; 0x4384 <MP3Open+0x658>
    4358:	2d 30       	cpi	r18, 0x0D	; 13
    435a:	31 05       	cpc	r19, r1
    435c:	41 05       	cpc	r20, r1
    435e:	51 05       	cpc	r21, r1
    4360:	60 f0       	brcs	.+24     	; 0x437a <MP3Open+0x64e>
    4362:	2e 30       	cpi	r18, 0x0E	; 14
    4364:	31 05       	cpc	r19, r1
    4366:	41 05       	cpc	r20, r1
    4368:	51 05       	cpc	r21, r1
    436a:	09 f0       	breq	.+2      	; 0x436e <MP3Open+0x642>
    436c:	b3 c0       	rjmp	.+358    	; 0x44d4 <MP3Open+0x7a8>
    436e:	0f c0       	rjmp	.+30     	; 0x438e <MP3Open+0x662>
    4370:	20 ec       	ldi	r18, 0xC0	; 192
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e0       	ldi	r20, 0x00	; 0
    4376:	50 e0       	ldi	r21, 0x00	; 0
    4378:	ad c0       	rjmp	.+346    	; 0x44d4 <MP3Open+0x7a8>
						case 10:
							i = 160;
							break;
						case 11:
							i = 192;
							break;
    437a:	20 ee       	ldi	r18, 0xE0	; 224
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	a8 c0       	rjmp	.+336    	; 0x44d4 <MP3Open+0x7a8>
						case 12:
							i = 224;
							break;
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	31 e0       	ldi	r19, 0x01	; 1
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	a3 c0       	rjmp	.+326    	; 0x44d4 <MP3Open+0x7a8>
						case 13:
							i = 256;
							break;
    438e:	20 e4       	ldi	r18, 0x40	; 64
    4390:	31 e0       	ldi	r19, 0x01	; 1
    4392:	40 e0       	ldi	r20, 0x00	; 0
    4394:	50 e0       	ldi	r21, 0x00	; 0
    4396:	9e c0       	rjmp	.+316    	; 0x44d4 <MP3Open+0x7a8>
				}
				else
				{
					// MPEG version 2

					switch(i)
    4398:	27 30       	cpi	r18, 0x07	; 7
    439a:	31 05       	cpc	r19, r1
    439c:	41 05       	cpc	r20, r1
    439e:	51 05       	cpc	r21, r1
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <MP3Open+0x678>
    43a2:	76 c0       	rjmp	.+236    	; 0x4490 <MP3Open+0x764>
    43a4:	28 30       	cpi	r18, 0x08	; 8
    43a6:	31 05       	cpc	r19, r1
    43a8:	41 05       	cpc	r20, r1
    43aa:	51 05       	cpc	r21, r1
    43ac:	20 f5       	brcc	.+72     	; 0x43f6 <MP3Open+0x6ca>
    43ae:	23 30       	cpi	r18, 0x03	; 3
    43b0:	31 05       	cpc	r19, r1
    43b2:	41 05       	cpc	r20, r1
    43b4:	51 05       	cpc	r21, r1
    43b6:	09 f4       	brne	.+2      	; 0x43ba <MP3Open+0x68e>
    43b8:	52 c0       	rjmp	.+164    	; 0x445e <MP3Open+0x732>
    43ba:	24 30       	cpi	r18, 0x04	; 4
    43bc:	31 05       	cpc	r19, r1
    43be:	41 05       	cpc	r20, r1
    43c0:	51 05       	cpc	r21, r1
    43c2:	60 f4       	brcc	.+24     	; 0x43dc <MP3Open+0x6b0>
    43c4:	21 30       	cpi	r18, 0x01	; 1
    43c6:	31 05       	cpc	r19, r1
    43c8:	41 05       	cpc	r20, r1
    43ca:	51 05       	cpc	r21, r1
    43cc:	f1 f1       	breq	.+124    	; 0x444a <MP3Open+0x71e>
    43ce:	22 30       	cpi	r18, 0x02	; 2
    43d0:	31 05       	cpc	r19, r1
    43d2:	41 05       	cpc	r20, r1
    43d4:	51 05       	cpc	r21, r1
    43d6:	09 f0       	breq	.+2      	; 0x43da <MP3Open+0x6ae>
    43d8:	7d c0       	rjmp	.+250    	; 0x44d4 <MP3Open+0x7a8>
    43da:	3c c0       	rjmp	.+120    	; 0x4454 <MP3Open+0x728>
    43dc:	25 30       	cpi	r18, 0x05	; 5
    43de:	31 05       	cpc	r19, r1
    43e0:	41 05       	cpc	r20, r1
    43e2:	51 05       	cpc	r21, r1
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <MP3Open+0x6bc>
    43e6:	4a c0       	rjmp	.+148    	; 0x447c <MP3Open+0x750>
    43e8:	26 30       	cpi	r18, 0x06	; 6
    43ea:	31 05       	cpc	r19, r1
    43ec:	41 05       	cpc	r20, r1
    43ee:	51 05       	cpc	r21, r1
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <MP3Open+0x6c8>
    43f2:	49 c0       	rjmp	.+146    	; 0x4486 <MP3Open+0x75a>
    43f4:	3e c0       	rjmp	.+124    	; 0x4472 <MP3Open+0x746>
    43f6:	2b 30       	cpi	r18, 0x0B	; 11
    43f8:	31 05       	cpc	r19, r1
    43fa:	41 05       	cpc	r20, r1
    43fc:	51 05       	cpc	r21, r1
    43fe:	09 f4       	brne	.+2      	; 0x4402 <MP3Open+0x6d6>
    4400:	5b c0       	rjmp	.+182    	; 0x44b8 <MP3Open+0x78c>
    4402:	2c 30       	cpi	r18, 0x0C	; 12
    4404:	31 05       	cpc	r19, r1
    4406:	41 05       	cpc	r20, r1
    4408:	51 05       	cpc	r21, r1
    440a:	68 f4       	brcc	.+26     	; 0x4426 <MP3Open+0x6fa>
    440c:	29 30       	cpi	r18, 0x09	; 9
    440e:	31 05       	cpc	r19, r1
    4410:	41 05       	cpc	r20, r1
    4412:	51 05       	cpc	r21, r1
    4414:	09 f4       	brne	.+2      	; 0x4418 <MP3Open+0x6ec>
    4416:	46 c0       	rjmp	.+140    	; 0x44a4 <MP3Open+0x778>
    4418:	2a 30       	cpi	r18, 0x0A	; 10
    441a:	31 05       	cpc	r19, r1
    441c:	41 05       	cpc	r20, r1
    441e:	51 05       	cpc	r21, r1
    4420:	08 f0       	brcs	.+2      	; 0x4424 <MP3Open+0x6f8>
    4422:	45 c0       	rjmp	.+138    	; 0x44ae <MP3Open+0x782>
    4424:	3a c0       	rjmp	.+116    	; 0x449a <MP3Open+0x76e>
    4426:	2d 30       	cpi	r18, 0x0D	; 13
    4428:	31 05       	cpc	r19, r1
    442a:	41 05       	cpc	r20, r1
    442c:	51 05       	cpc	r21, r1
    442e:	e1 f0       	breq	.+56     	; 0x4468 <MP3Open+0x73c>
    4430:	2d 30       	cpi	r18, 0x0D	; 13
    4432:	31 05       	cpc	r19, r1
    4434:	41 05       	cpc	r20, r1
    4436:	51 05       	cpc	r21, r1
    4438:	08 f4       	brcc	.+2      	; 0x443c <MP3Open+0x710>
    443a:	43 c0       	rjmp	.+134    	; 0x44c2 <MP3Open+0x796>
    443c:	2e 30       	cpi	r18, 0x0E	; 14
    443e:	31 05       	cpc	r19, r1
    4440:	41 05       	cpc	r20, r1
    4442:	51 05       	cpc	r21, r1
    4444:	09 f0       	breq	.+2      	; 0x4448 <MP3Open+0x71c>
    4446:	46 c0       	rjmp	.+140    	; 0x44d4 <MP3Open+0x7a8>
    4448:	41 c0       	rjmp	.+130    	; 0x44cc <MP3Open+0x7a0>
    444a:	28 e0       	ldi	r18, 0x08	; 8
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e0       	ldi	r20, 0x00	; 0
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	40 c0       	rjmp	.+128    	; 0x44d4 <MP3Open+0x7a8>
    4454:	20 e1       	ldi	r18, 0x10	; 16
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e0       	ldi	r20, 0x00	; 0
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	3b c0       	rjmp	.+118    	; 0x44d4 <MP3Open+0x7a8>
						case 1:
							i = 8;
							break;
						case 2:
							i = 16;
							break;
    445e:	28 e1       	ldi	r18, 0x18	; 24
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e0       	ldi	r20, 0x00	; 0
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	36 c0       	rjmp	.+108    	; 0x44d4 <MP3Open+0x7a8>
						case 3:
							i = 24;
							break;
    4468:	20 e9       	ldi	r18, 0x90	; 144
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	31 c0       	rjmp	.+98     	; 0x44d4 <MP3Open+0x7a8>
						case 12:
							i = 128;
							break;
						case 13:
							i = 144;
							break;
    4472:	20 e2       	ldi	r18, 0x20	; 32
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	2c c0       	rjmp	.+88     	; 0x44d4 <MP3Open+0x7a8>
    447c:	28 e2       	ldi	r18, 0x28	; 40
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	27 c0       	rjmp	.+78     	; 0x44d4 <MP3Open+0x7a8>
    4486:	20 e3       	ldi	r18, 0x30	; 48
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	22 c0       	rjmp	.+68     	; 0x44d4 <MP3Open+0x7a8>
    4490:	28 e3       	ldi	r18, 0x38	; 56
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	1d c0       	rjmp	.+58     	; 0x44d4 <MP3Open+0x7a8>
    449a:	20 e4       	ldi	r18, 0x40	; 64
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	18 c0       	rjmp	.+48     	; 0x44d4 <MP3Open+0x7a8>
    44a4:	20 e5       	ldi	r18, 0x50	; 80
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e0       	ldi	r20, 0x00	; 0
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	13 c0       	rjmp	.+38     	; 0x44d4 <MP3Open+0x7a8>
    44ae:	20 e6       	ldi	r18, 0x60	; 96
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e0       	ldi	r20, 0x00	; 0
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	0e c0       	rjmp	.+28     	; 0x44d4 <MP3Open+0x7a8>
    44b8:	20 e7       	ldi	r18, 0x70	; 112
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	09 c0       	rjmp	.+18     	; 0x44d4 <MP3Open+0x7a8>
    44c2:	20 e8       	ldi	r18, 0x80	; 128
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e0       	ldi	r20, 0x00	; 0
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	04 c0       	rjmp	.+8      	; 0x44d4 <MP3Open+0x7a8>
    44cc:	20 ea       	ldi	r18, 0xA0	; 160
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	50 e0       	ldi	r21, 0x00	; 0
							break;
					}
				}

				// calculate duration from bit rate and file size
				i *= (1024 / 8);
    44d4:	67 e0       	ldi	r22, 0x07	; 7
    44d6:	22 0f       	add	r18, r18
    44d8:	33 1f       	adc	r19, r19
    44da:	44 1f       	adc	r20, r20
    44dc:	55 1f       	adc	r21, r21
    44de:	6a 95       	dec	r22
    44e0:	d1 f7       	brne	.-12     	; 0x44d6 <MP3Open+0x7aa>
				mf->bps = i;
    44e2:	89 ee       	ldi	r24, 0xE9	; 233
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	c8 0e       	add	r12, r24
    44e8:	d9 1e       	adc	r13, r25
    44ea:	d6 01       	movw	r26, r12
    44ec:	2d 93       	st	X+, r18
    44ee:	3d 93       	st	X+, r19
    44f0:	4d 93       	st	X+, r20
    44f2:	5c 93       	st	X, r21
    44f4:	13 97       	sbiw	r26, 0x03	; 3
    44f6:	e7 e1       	ldi	r30, 0x17	; 23
    44f8:	ff ef       	ldi	r31, 0xFF	; 255
    44fa:	ce 0e       	add	r12, r30
    44fc:	df 1e       	adc	r13, r31
				mf->duration = (mf->fh.fsize - mf->headerLoc) / mf->bps;
				mf->duration++;
    44fe:	f6 01       	movw	r30, r12
    4500:	ef 50       	subi	r30, 0x0F	; 15
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	8f ef       	ldi	r24, 0xFF	; 255
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	c8 0e       	add	r12, r24
    450a:	d9 1e       	adc	r13, r25
    450c:	d6 01       	movw	r26, r12
    450e:	6d 91       	ld	r22, X+
    4510:	7d 91       	ld	r23, X+
    4512:	8d 91       	ld	r24, X+
    4514:	9c 91       	ld	r25, X
    4516:	e0 80       	ld	r14, Z
    4518:	f1 80       	ldd	r15, Z+1	; 0x01
    451a:	02 81       	ldd	r16, Z+2	; 0x02
    451c:	13 81       	ldd	r17, Z+3	; 0x03
    451e:	6e 19       	sub	r22, r14
    4520:	7f 09       	sbc	r23, r15
    4522:	80 0b       	sbc	r24, r16
    4524:	91 0b       	sbc	r25, r17
    4526:	0e 94 76 28 	call	0x50ec	; 0x50ec <__udivmodsi4>
    452a:	2f 5f       	subi	r18, 0xFF	; 255
    452c:	3f 4f       	sbci	r19, 0xFF	; 255
    452e:	4f 4f       	sbci	r20, 0xFF	; 255
    4530:	5f 4f       	sbci	r21, 0xFF	; 255
    4532:	ee ee       	ldi	r30, 0xEE	; 238
    4534:	ff ef       	ldi	r31, 0xFF	; 255
    4536:	ce 0e       	add	r12, r30
    4538:	df 1e       	adc	r13, r31
    453a:	d6 01       	movw	r26, r12
    453c:	2d 93       	st	X+, r18
    453e:	3d 93       	st	X+, r19
    4540:	4d 93       	st	X+, r20
    4542:	5c 93       	st	X, r21
    4544:	13 97       	sbiw	r26, 0x03	; 3
			}
			else if(c[1] == 0) return 254; // end of file
		}
	}

	f_lseek(&(mf->fh), 0);
    4546:	40 e0       	ldi	r20, 0x00	; 0
    4548:	50 e0       	ldi	r21, 0x00	; 0
    454a:	60 e0       	ldi	r22, 0x00	; 0
    454c:	70 e0       	ldi	r23, 0x00	; 0
    454e:	c5 01       	movw	r24, r10
    4550:	0e 94 e7 11 	call	0x23ce	; 0x23ce <f_lseek>

	mf->open = 1;
    4554:	e2 e2       	ldi	r30, 0x22	; 34
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	ce 0e       	add	r12, r30
    455a:	df 1e       	adc	r13, r31
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	d6 01       	movw	r26, r12
    4560:	8c 93       	st	X, r24
    4562:	09 c0       	rjmp	.+18     	; 0x4576 <MP3Open+0x84a>
				mf->duration = (mf->fh.fsize - mf->headerLoc) / mf->bps;
				mf->duration++;

				break;
			}
			else if(c[1] == 0) return 254; // end of file
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
    4566:	88 23       	and	r24, r24
    4568:	09 f0       	breq	.+2      	; 0x456c <MP3Open+0x840>
    456a:	74 ce       	rjmp	.-792    	; 0x4254 <MP3Open+0x528>
    456c:	9e ef       	ldi	r25, 0xFE	; 254
    456e:	99 2e       	mov	r9, r25
    4570:	02 c0       	rjmp	.+4      	; 0x4576 <MP3Open+0x84a>
    4572:	99 24       	eor	r9, r9
    4574:	9a 94       	dec	r9

	f_lseek(&(mf->fh), 0);

	mf->open = 1;
	return 0;
}
    4576:	89 2d       	mov	r24, r9
    4578:	cd 50       	subi	r28, 0x0D	; 13
    457a:	df 4f       	sbci	r29, 0xFF	; 255
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	bf 90       	pop	r11
    4598:	af 90       	pop	r10
    459a:	9f 90       	pop	r9
    459c:	8f 90       	pop	r8
    459e:	08 95       	ret

000045a0 <serInit>:
volatile unsigned char serTxBufferTail;
volatile unsigned char serTxBusy;

/* initialize serial port */
void serInit()
{	
    45a0:	10 92 c5 00 	sts	0x00C5, r1
	UBRRH = UBRRH_VALUE;
	UBRRL = UBRRL_VALUE;
    45a4:	8c e0       	ldi	r24, 0x0C	; 12
    45a6:	80 93 c4 00 	sts	0x00C4, r24

	UCSRB = 0; // reset just to be sure
    45aa:	e1 ec       	ldi	r30, 0xC1	; 193
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	10 82       	st	Z, r1
	
	serRxBufferHead = 0; // reset
    45b0:	10 92 75 05 	sts	0x0575, r1
	serRxBufferTail = 0;
    45b4:	10 92 f7 05 	sts	0x05F7, r1
	serTxBufferHead = 0;
    45b8:	10 92 76 05 	sts	0x0576, r1
	serTxBufferTail = 0;
    45bc:	10 92 74 05 	sts	0x0574, r1
	serTxBusy = 0;
    45c0:	10 92 73 05 	sts	0x0573, r1
	
	sbi(UCSRB, TXCIE); // Rx int enable
    45c4:	80 81       	ld	r24, Z
    45c6:	80 64       	ori	r24, 0x40	; 64
    45c8:	80 83       	st	Z, r24
	sbi(UCSRB, RXCIE); // Rx int enable
    45ca:	80 81       	ld	r24, Z
    45cc:	80 68       	ori	r24, 0x80	; 128
    45ce:	80 83       	st	Z, r24
	sbi(UCSRB, RXEN); // enable rx and tx now
    45d0:	80 81       	ld	r24, Z
    45d2:	80 61       	ori	r24, 0x10	; 16
    45d4:	80 83       	st	Z, r24
	sbi(UCSRB, TXEN);
    45d6:	80 81       	ld	r24, Z
    45d8:	88 60       	ori	r24, 0x08	; 8
    45da:	80 83       	st	Z, r24
}
    45dc:	08 95       	ret

000045de <__vector_22>:

ISR(USART_TX_vect)
{
    45de:	1f 92       	push	r1
    45e0:	0f 92       	push	r0
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	0f 92       	push	r0
    45e6:	11 24       	eor	r1, r1
    45e8:	8f 93       	push	r24
    45ea:	9f 93       	push	r25
    45ec:	ef 93       	push	r30
    45ee:	ff 93       	push	r31
	if(serTxBufferHead != serTxBufferTail)
    45f0:	90 91 76 05 	lds	r25, 0x0576
    45f4:	80 91 74 05 	lds	r24, 0x0574
    45f8:	98 17       	cp	r25, r24
    45fa:	89 f0       	breq	.+34     	; 0x461e <__vector_22+0x40>
	{
		UDR0 = serTxBuffer[serTxBufferHead];
    45fc:	e0 91 76 05 	lds	r30, 0x0576
    4600:	f0 e0       	ldi	r31, 0x00	; 0
    4602:	e9 58       	subi	r30, 0x89	; 137
    4604:	fa 4f       	sbci	r31, 0xFA	; 250
    4606:	80 81       	ld	r24, Z
    4608:	80 93 c6 00 	sts	0x00C6, r24
		serTxBufferHead = (serTxBufferHead + 1) % serTxBufferSize;
    460c:	80 91 76 05 	lds	r24, 0x0576
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	01 96       	adiw	r24, 0x01	; 1
    4614:	8f 77       	andi	r24, 0x7F	; 127
    4616:	90 70       	andi	r25, 0x00	; 0
    4618:	80 93 76 05 	sts	0x0576, r24
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <__vector_22+0x44>
	}
	else
	{
		serTxBusy = 0;
    461e:	10 92 73 05 	sts	0x0573, r1
	}
}
    4622:	ff 91       	pop	r31
    4624:	ef 91       	pop	r30
    4626:	9f 91       	pop	r25
    4628:	8f 91       	pop	r24
    462a:	0f 90       	pop	r0
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	0f 90       	pop	r0
    4630:	1f 90       	pop	r1
    4632:	18 95       	reti

00004634 <__vector_20>:

/* on rx event, shift and elongate buffer, then store byte at head of buffer*/
ISR(USART_RX_vect)
{
    4634:	1f 92       	push	r1
    4636:	0f 92       	push	r0
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	0f 92       	push	r0
    463c:	11 24       	eor	r1, r1
    463e:	2f 93       	push	r18
    4640:	3f 93       	push	r19
    4642:	8f 93       	push	r24
    4644:	9f 93       	push	r25
    4646:	ef 93       	push	r30
    4648:	ff 93       	push	r31
	unsigned char data = UDR; // read
    464a:	90 91 c6 00 	lds	r25, 0x00C6
	unsigned char temp = (serRxBufferHead + 1) % serRxBufferSize; // check buffer location first
    464e:	80 91 75 05 	lds	r24, 0x0575
    4652:	28 2f       	mov	r18, r24
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	2f 5f       	subi	r18, 0xFF	; 255
    4658:	3f 4f       	sbci	r19, 0xFF	; 255
    465a:	2f 77       	andi	r18, 0x7F	; 127
    465c:	30 70       	andi	r19, 0x00	; 0
	if(temp != serRxBufferTail) // if not overflow
    465e:	80 91 f7 05 	lds	r24, 0x05F7
    4662:	82 17       	cp	r24, r18
    4664:	41 f0       	breq	.+16     	; 0x4676 <__vector_20+0x42>
	{
		serRxBuffer[serRxBufferHead] = data; // store in buffer
    4666:	e0 91 75 05 	lds	r30, 0x0575
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	ed 50       	subi	r30, 0x0D	; 13
    466e:	fb 4f       	sbci	r31, 0xFB	; 251
    4670:	90 83       	st	Z, r25
		serRxBufferHead = temp; // increase array pointer
    4672:	20 93 75 05 	sts	0x0575, r18
	}
}
    4676:	ff 91       	pop	r31
    4678:	ef 91       	pop	r30
    467a:	9f 91       	pop	r25
    467c:	8f 91       	pop	r24
    467e:	3f 91       	pop	r19
    4680:	2f 91       	pop	r18
    4682:	0f 90       	pop	r0
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	0f 90       	pop	r0
    4688:	1f 90       	pop	r1
    468a:	18 95       	reti

0000468c <serRx>:

/* read FIFO from buffer, return buffer size before reading */
unsigned char serRx(unsigned char *bufSize)
{
    468c:	fc 01       	movw	r30, r24
	if(serRxBufferHead == serRxBufferTail) // if buffer empty, return error
    468e:	90 91 75 05 	lds	r25, 0x0575
    4692:	80 91 f7 05 	lds	r24, 0x05F7
    4696:	98 17       	cp	r25, r24
    4698:	19 f4       	brne	.+6      	; 0x46a0 <serRx+0x14>
	{
		*bufSize = 0;
    469a:	10 82       	st	Z, r1
    469c:	e0 e0       	ldi	r30, 0x00	; 0
    469e:	1c c0       	rjmp	.+56     	; 0x46d8 <serRx+0x4c>
		return 0;
	}
	else
	{
		*bufSize = (serRxBufferSize + serRxBufferHead - serRxBufferTail) % serRxBufferSize;
    46a0:	80 91 75 05 	lds	r24, 0x0575
    46a4:	20 91 f7 05 	lds	r18, 0x05F7
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	80 58       	subi	r24, 0x80	; 128
    46ac:	9f 4f       	sbci	r25, 0xFF	; 255
    46ae:	82 1b       	sub	r24, r18
    46b0:	91 09       	sbc	r25, r1
    46b2:	60 e8       	ldi	r22, 0x80	; 128
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__divmodhi4>
    46ba:	80 83       	st	Z, r24
		unsigned char data = serRxBuffer[serRxBufferTail]; // read from buffer
    46bc:	e0 91 f7 05 	lds	r30, 0x05F7
    46c0:	f0 e0       	ldi	r31, 0x00	; 0
    46c2:	ed 50       	subi	r30, 0x0D	; 13
    46c4:	fb 4f       	sbci	r31, 0xFB	; 251
    46c6:	e0 81       	ld	r30, Z
		serRxBufferTail = (serRxBufferTail + 1) % serRxBufferSize; // advance buffer read pointer
    46c8:	80 91 f7 05 	lds	r24, 0x05F7
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	01 96       	adiw	r24, 0x01	; 1
    46d0:	8f 77       	andi	r24, 0x7F	; 127
    46d2:	90 70       	andi	r25, 0x00	; 0
    46d4:	80 93 f7 05 	sts	0x05F7, r24
		return data; // return
	}
}
    46d8:	8e 2f       	mov	r24, r30
    46da:	08 95       	ret

000046dc <serAvail>:

/* get buffer size, also lets you get the latest data and the next data */
unsigned char serAvail(unsigned char *nextData, unsigned char *latestData)
{
    46dc:	9c 01       	movw	r18, r24
	*nextData = serRxBuffer[serRxBufferTail];
    46de:	80 91 f7 05 	lds	r24, 0x05F7
    46e2:	a3 ef       	ldi	r26, 0xF3	; 243
    46e4:	b4 e0       	ldi	r27, 0x04	; 4
    46e6:	fd 01       	movw	r30, r26
    46e8:	e8 0f       	add	r30, r24
    46ea:	f1 1d       	adc	r31, r1
    46ec:	80 81       	ld	r24, Z
    46ee:	f9 01       	movw	r30, r18
    46f0:	80 83       	st	Z, r24
	*latestData = serRxBuffer[serRxBufferHead];
    46f2:	80 91 75 05 	lds	r24, 0x0575
    46f6:	a8 0f       	add	r26, r24
    46f8:	b1 1d       	adc	r27, r1
    46fa:	8c 91       	ld	r24, X
    46fc:	fb 01       	movw	r30, r22
    46fe:	80 83       	st	Z, r24
	// size of buffer
	return (serRxBufferSize + serRxBufferHead - serRxBufferTail) % serRxBufferSize;
    4700:	80 91 75 05 	lds	r24, 0x0575
    4704:	20 91 f7 05 	lds	r18, 0x05F7
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	80 58       	subi	r24, 0x80	; 128
    470c:	9f 4f       	sbci	r25, 0xFF	; 255
    470e:	82 1b       	sub	r24, r18
    4710:	91 09       	sbc	r25, r1
    4712:	60 e8       	ldi	r22, 0x80	; 128
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__divmodhi4>
}
    471a:	08 95       	ret

0000471c <serTx>:

/* waits for transmitter to not be busy then tx a byte */
void serTx(unsigned char data)
{
    471c:	48 2f       	mov	r20, r24
	while((serTxBufferTail + 1) % serTxBufferSize == serTxBufferHead);
    471e:	80 91 74 05 	lds	r24, 0x0574
    4722:	20 91 76 05 	lds	r18, 0x0576
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	8f 77       	andi	r24, 0x7F	; 127
    472c:	90 70       	andi	r25, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	82 17       	cp	r24, r18
    4732:	93 07       	cpc	r25, r19
    4734:	a1 f3       	breq	.-24     	; 0x471e <serTx+0x2>
	serTxBuffer[serTxBufferTail] = data;
    4736:	e0 91 74 05 	lds	r30, 0x0574
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	e9 58       	subi	r30, 0x89	; 137
    473e:	fa 4f       	sbci	r31, 0xFA	; 250
    4740:	40 83       	st	Z, r20
	serTxBufferTail = (serTxBufferTail + 1) % serTxBufferSize;
    4742:	80 91 74 05 	lds	r24, 0x0574
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	01 96       	adiw	r24, 0x01	; 1
    474a:	8f 77       	andi	r24, 0x7F	; 127
    474c:	90 70       	andi	r25, 0x00	; 0
    474e:	80 93 74 05 	sts	0x0574, r24

	if(serTxBusy == 0)
    4752:	80 91 73 05 	lds	r24, 0x0573
    4756:	88 23       	and	r24, r24
    4758:	69 f4       	brne	.+26     	; 0x4774 <serTx+0x58>
	{
		UDR0 = data;
    475a:	40 93 c6 00 	sts	0x00C6, r20
		serTxBufferHead = (serTxBufferHead + 1) % serTxBufferSize;
    475e:	80 91 76 05 	lds	r24, 0x0576
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	01 96       	adiw	r24, 0x01	; 1
    4766:	8f 77       	andi	r24, 0x7F	; 127
    4768:	90 70       	andi	r25, 0x00	; 0
    476a:	80 93 76 05 	sts	0x0576, r24
		serTxBusy = 1;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	80 93 73 05 	sts	0x0573, r24
    4774:	08 95       	ret

00004776 <serTxIsBusy>:
	}
}

unsigned char serTxIsBusy()
{
    4776:	80 91 73 05 	lds	r24, 0x0573
	return serTxBusy;
}
    477a:	08 95       	ret

0000477c <ser_putc>:

int ser_putc(unsigned char c, FILE *stream)
{
    477c:	1f 93       	push	r17
    477e:	18 2f       	mov	r17, r24
	if(c == '\n') serTx('\r');
    4780:	8a 30       	cpi	r24, 0x0A	; 10
    4782:	19 f4       	brne	.+6      	; 0x478a <ser_putc+0xe>
    4784:	8d e0       	ldi	r24, 0x0D	; 13
    4786:	0e 94 8e 23 	call	0x471c	; 0x471c <serTx>
	serTx(c);
    478a:	81 2f       	mov	r24, r17
    478c:	0e 94 8e 23 	call	0x471c	; 0x471c <serTx>
	return 0;
}
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	1f 91       	pop	r17
    4796:	08 95       	ret

00004798 <SPI_init>:
#include "spi.h"

void SPI_init()
{
    4798:	84 b1       	in	r24, 0x04	; 4
    479a:	80 6b       	ori	r24, 0xB0	; 176
    479c:	84 b9       	out	0x04, r24	; 4
	SPI_DIR |= _BV(SS) | _BV(MOSI) | _BV(SCK);
	SPI_PORT |= _BV(SS) | _BV(MOSI) | _BV(SCK) | _BV(MISO);
    479e:	85 b1       	in	r24, 0x05	; 5
    47a0:	80 6f       	ori	r24, 0xF0	; 240
    47a2:	85 b9       	out	0x05, r24	; 5

	SPCR = _BV (MSTR) | _BV (SPE);	// Master mode, SPI enable, clock speed MCU_XTAL/4
    47a4:	80 e5       	ldi	r24, 0x50	; 80
    47a6:	8c bd       	out	0x2c, r24	; 44
}
    47a8:	08 95       	ret

000047aa <SPITx>:

void SPITx(unsigned char c)
{
    47aa:	8e bd       	out	0x2e, r24	; 46
	SPDR = c;
	loop_until_bit_is_set(SPSR, SPIF);
    47ac:	0d b4       	in	r0, 0x2d	; 45
    47ae:	07 fe       	sbrs	r0, 7
    47b0:	fd cf       	rjmp	.-6      	; 0x47ac <SPITx+0x2>
}
    47b2:	08 95       	ret

000047b4 <SPIRx>:

unsigned char SPIRx(unsigned char c)
{
    47b4:	8e bd       	out	0x2e, r24	; 46
	SPDR = c;
	loop_until_bit_is_set(SPSR, SPIF);
    47b6:	0d b4       	in	r0, 0x2d	; 45
    47b8:	07 fe       	sbrs	r0, 7
    47ba:	fd cf       	rjmp	.-6      	; 0x47b6 <SPIRx+0x2>
	return SPDR;
    47bc:	8e b5       	in	r24, 0x2e	; 46
}
    47be:	08 95       	ret

000047c0 <calloc>:
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	68 9f       	mul	r22, r24
    47ca:	80 01       	movw	r16, r0
    47cc:	69 9f       	mul	r22, r25
    47ce:	10 0d       	add	r17, r0
    47d0:	78 9f       	mul	r23, r24
    47d2:	10 0d       	add	r17, r0
    47d4:	11 24       	eor	r1, r1
    47d6:	c8 01       	movw	r24, r16
    47d8:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <malloc>
    47dc:	ec 01       	movw	r28, r24
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	29 f0       	breq	.+10     	; 0x47ec <calloc+0x2c>
    47e2:	a8 01       	movw	r20, r16
    47e4:	60 e0       	ldi	r22, 0x00	; 0
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <memset>
    47ec:	ce 01       	movw	r24, r28
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	1f 91       	pop	r17
    47f4:	0f 91       	pop	r16
    47f6:	08 95       	ret

000047f8 <malloc>:
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	bc 01       	movw	r22, r24
    47fe:	82 30       	cpi	r24, 0x02	; 2
    4800:	91 05       	cpc	r25, r1
    4802:	10 f4       	brcc	.+4      	; 0x4808 <malloc+0x10>
    4804:	62 e0       	ldi	r22, 0x02	; 2
    4806:	70 e0       	ldi	r23, 0x00	; 0
    4808:	a0 91 fa 05 	lds	r26, 0x05FA
    480c:	b0 91 fb 05 	lds	r27, 0x05FB
    4810:	ed 01       	movw	r28, r26
    4812:	e0 e0       	ldi	r30, 0x00	; 0
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	21 c0       	rjmp	.+66     	; 0x485e <malloc+0x66>
    481c:	88 81       	ld	r24, Y
    481e:	99 81       	ldd	r25, Y+1	; 0x01
    4820:	86 17       	cp	r24, r22
    4822:	97 07       	cpc	r25, r23
    4824:	69 f4       	brne	.+26     	; 0x4840 <malloc+0x48>
    4826:	8a 81       	ldd	r24, Y+2	; 0x02
    4828:	9b 81       	ldd	r25, Y+3	; 0x03
    482a:	30 97       	sbiw	r30, 0x00	; 0
    482c:	19 f0       	breq	.+6      	; 0x4834 <malloc+0x3c>
    482e:	93 83       	std	Z+3, r25	; 0x03
    4830:	82 83       	std	Z+2, r24	; 0x02
    4832:	04 c0       	rjmp	.+8      	; 0x483c <malloc+0x44>
    4834:	90 93 fb 05 	sts	0x05FB, r25
    4838:	80 93 fa 05 	sts	0x05FA, r24
    483c:	fe 01       	movw	r30, r28
    483e:	34 c0       	rjmp	.+104    	; 0x48a8 <malloc+0xb0>
    4840:	68 17       	cp	r22, r24
    4842:	79 07       	cpc	r23, r25
    4844:	38 f4       	brcc	.+14     	; 0x4854 <malloc+0x5c>
    4846:	41 15       	cp	r20, r1
    4848:	51 05       	cpc	r21, r1
    484a:	19 f0       	breq	.+6      	; 0x4852 <malloc+0x5a>
    484c:	84 17       	cp	r24, r20
    484e:	95 07       	cpc	r25, r21
    4850:	08 f4       	brcc	.+2      	; 0x4854 <malloc+0x5c>
    4852:	ac 01       	movw	r20, r24
    4854:	fe 01       	movw	r30, r28
    4856:	8a 81       	ldd	r24, Y+2	; 0x02
    4858:	9b 81       	ldd	r25, Y+3	; 0x03
    485a:	9c 01       	movw	r18, r24
    485c:	e9 01       	movw	r28, r18
    485e:	20 97       	sbiw	r28, 0x00	; 0
    4860:	e9 f6       	brne	.-70     	; 0x481c <malloc+0x24>
    4862:	41 15       	cp	r20, r1
    4864:	51 05       	cpc	r21, r1
    4866:	a9 f1       	breq	.+106    	; 0x48d2 <malloc+0xda>
    4868:	ca 01       	movw	r24, r20
    486a:	86 1b       	sub	r24, r22
    486c:	97 0b       	sbc	r25, r23
    486e:	04 97       	sbiw	r24, 0x04	; 4
    4870:	08 f4       	brcc	.+2      	; 0x4874 <malloc+0x7c>
    4872:	ba 01       	movw	r22, r20
    4874:	e0 e0       	ldi	r30, 0x00	; 0
    4876:	f0 e0       	ldi	r31, 0x00	; 0
    4878:	2a c0       	rjmp	.+84     	; 0x48ce <malloc+0xd6>
    487a:	8d 91       	ld	r24, X+
    487c:	9c 91       	ld	r25, X
    487e:	11 97       	sbiw	r26, 0x01	; 1
    4880:	84 17       	cp	r24, r20
    4882:	95 07       	cpc	r25, r21
    4884:	f9 f4       	brne	.+62     	; 0x48c4 <malloc+0xcc>
    4886:	64 17       	cp	r22, r20
    4888:	75 07       	cpc	r23, r21
    488a:	81 f4       	brne	.+32     	; 0x48ac <malloc+0xb4>
    488c:	12 96       	adiw	r26, 0x02	; 2
    488e:	8d 91       	ld	r24, X+
    4890:	9c 91       	ld	r25, X
    4892:	13 97       	sbiw	r26, 0x03	; 3
    4894:	30 97       	sbiw	r30, 0x00	; 0
    4896:	19 f0       	breq	.+6      	; 0x489e <malloc+0xa6>
    4898:	93 83       	std	Z+3, r25	; 0x03
    489a:	82 83       	std	Z+2, r24	; 0x02
    489c:	04 c0       	rjmp	.+8      	; 0x48a6 <malloc+0xae>
    489e:	90 93 fb 05 	sts	0x05FB, r25
    48a2:	80 93 fa 05 	sts	0x05FA, r24
    48a6:	fd 01       	movw	r30, r26
    48a8:	32 96       	adiw	r30, 0x02	; 2
    48aa:	4c c0       	rjmp	.+152    	; 0x4944 <malloc+0x14c>
    48ac:	ca 01       	movw	r24, r20
    48ae:	86 1b       	sub	r24, r22
    48b0:	97 0b       	sbc	r25, r23
    48b2:	fd 01       	movw	r30, r26
    48b4:	e8 0f       	add	r30, r24
    48b6:	f9 1f       	adc	r31, r25
    48b8:	61 93       	st	Z+, r22
    48ba:	71 93       	st	Z+, r23
    48bc:	02 97       	sbiw	r24, 0x02	; 2
    48be:	8d 93       	st	X+, r24
    48c0:	9c 93       	st	X, r25
    48c2:	40 c0       	rjmp	.+128    	; 0x4944 <malloc+0x14c>
    48c4:	fd 01       	movw	r30, r26
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	9c 01       	movw	r18, r24
    48cc:	d9 01       	movw	r26, r18
    48ce:	10 97       	sbiw	r26, 0x00	; 0
    48d0:	a1 f6       	brne	.-88     	; 0x487a <malloc+0x82>
    48d2:	80 91 f8 05 	lds	r24, 0x05F8
    48d6:	90 91 f9 05 	lds	r25, 0x05F9
    48da:	89 2b       	or	r24, r25
    48dc:	41 f4       	brne	.+16     	; 0x48ee <malloc+0xf6>
    48de:	80 91 6b 01 	lds	r24, 0x016B
    48e2:	90 91 6c 01 	lds	r25, 0x016C
    48e6:	90 93 f9 05 	sts	0x05F9, r25
    48ea:	80 93 f8 05 	sts	0x05F8, r24
    48ee:	40 91 6d 01 	lds	r20, 0x016D
    48f2:	50 91 6e 01 	lds	r21, 0x016E
    48f6:	41 15       	cp	r20, r1
    48f8:	51 05       	cpc	r21, r1
    48fa:	41 f4       	brne	.+16     	; 0x490c <malloc+0x114>
    48fc:	4d b7       	in	r20, 0x3d	; 61
    48fe:	5e b7       	in	r21, 0x3e	; 62
    4900:	80 91 69 01 	lds	r24, 0x0169
    4904:	90 91 6a 01 	lds	r25, 0x016A
    4908:	48 1b       	sub	r20, r24
    490a:	59 0b       	sbc	r21, r25
    490c:	20 91 f8 05 	lds	r18, 0x05F8
    4910:	30 91 f9 05 	lds	r19, 0x05F9
    4914:	ca 01       	movw	r24, r20
    4916:	82 1b       	sub	r24, r18
    4918:	93 0b       	sbc	r25, r19
    491a:	86 17       	cp	r24, r22
    491c:	97 07       	cpc	r25, r23
    491e:	80 f0       	brcs	.+32     	; 0x4940 <malloc+0x148>
    4920:	ab 01       	movw	r20, r22
    4922:	4e 5f       	subi	r20, 0xFE	; 254
    4924:	5f 4f       	sbci	r21, 0xFF	; 255
    4926:	84 17       	cp	r24, r20
    4928:	95 07       	cpc	r25, r21
    492a:	50 f0       	brcs	.+20     	; 0x4940 <malloc+0x148>
    492c:	42 0f       	add	r20, r18
    492e:	53 1f       	adc	r21, r19
    4930:	50 93 f9 05 	sts	0x05F9, r21
    4934:	40 93 f8 05 	sts	0x05F8, r20
    4938:	f9 01       	movw	r30, r18
    493a:	61 93       	st	Z+, r22
    493c:	71 93       	st	Z+, r23
    493e:	02 c0       	rjmp	.+4      	; 0x4944 <malloc+0x14c>
    4940:	e0 e0       	ldi	r30, 0x00	; 0
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	cf 01       	movw	r24, r30
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	08 95       	ret

0000494c <free>:
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	00 97       	sbiw	r24, 0x00	; 0
    4952:	09 f4       	brne	.+2      	; 0x4956 <free+0xa>
    4954:	50 c0       	rjmp	.+160    	; 0x49f6 <free+0xaa>
    4956:	ec 01       	movw	r28, r24
    4958:	22 97       	sbiw	r28, 0x02	; 2
    495a:	1b 82       	std	Y+3, r1	; 0x03
    495c:	1a 82       	std	Y+2, r1	; 0x02
    495e:	a0 91 fa 05 	lds	r26, 0x05FA
    4962:	b0 91 fb 05 	lds	r27, 0x05FB
    4966:	10 97       	sbiw	r26, 0x00	; 0
    4968:	09 f1       	breq	.+66     	; 0x49ac <free+0x60>
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	50 e0       	ldi	r21, 0x00	; 0
    496e:	ac 17       	cp	r26, r28
    4970:	bd 07       	cpc	r27, r29
    4972:	08 f1       	brcs	.+66     	; 0x49b6 <free+0x6a>
    4974:	bb 83       	std	Y+3, r27	; 0x03
    4976:	aa 83       	std	Y+2, r26	; 0x02
    4978:	fe 01       	movw	r30, r28
    497a:	21 91       	ld	r18, Z+
    497c:	31 91       	ld	r19, Z+
    497e:	e2 0f       	add	r30, r18
    4980:	f3 1f       	adc	r31, r19
    4982:	ae 17       	cp	r26, r30
    4984:	bf 07       	cpc	r27, r31
    4986:	79 f4       	brne	.+30     	; 0x49a6 <free+0x5a>
    4988:	8d 91       	ld	r24, X+
    498a:	9c 91       	ld	r25, X
    498c:	11 97       	sbiw	r26, 0x01	; 1
    498e:	28 0f       	add	r18, r24
    4990:	39 1f       	adc	r19, r25
    4992:	2e 5f       	subi	r18, 0xFE	; 254
    4994:	3f 4f       	sbci	r19, 0xFF	; 255
    4996:	39 83       	std	Y+1, r19	; 0x01
    4998:	28 83       	st	Y, r18
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	8d 91       	ld	r24, X+
    499e:	9c 91       	ld	r25, X
    49a0:	13 97       	sbiw	r26, 0x03	; 3
    49a2:	9b 83       	std	Y+3, r25	; 0x03
    49a4:	8a 83       	std	Y+2, r24	; 0x02
    49a6:	41 15       	cp	r20, r1
    49a8:	51 05       	cpc	r21, r1
    49aa:	71 f4       	brne	.+28     	; 0x49c8 <free+0x7c>
    49ac:	d0 93 fb 05 	sts	0x05FB, r29
    49b0:	c0 93 fa 05 	sts	0x05FA, r28
    49b4:	20 c0       	rjmp	.+64     	; 0x49f6 <free+0xaa>
    49b6:	12 96       	adiw	r26, 0x02	; 2
    49b8:	8d 91       	ld	r24, X+
    49ba:	9c 91       	ld	r25, X
    49bc:	13 97       	sbiw	r26, 0x03	; 3
    49be:	ad 01       	movw	r20, r26
    49c0:	00 97       	sbiw	r24, 0x00	; 0
    49c2:	11 f0       	breq	.+4      	; 0x49c8 <free+0x7c>
    49c4:	dc 01       	movw	r26, r24
    49c6:	d3 cf       	rjmp	.-90     	; 0x496e <free+0x22>
    49c8:	fa 01       	movw	r30, r20
    49ca:	d3 83       	std	Z+3, r29	; 0x03
    49cc:	c2 83       	std	Z+2, r28	; 0x02
    49ce:	21 91       	ld	r18, Z+
    49d0:	31 91       	ld	r19, Z+
    49d2:	e2 0f       	add	r30, r18
    49d4:	f3 1f       	adc	r31, r19
    49d6:	ce 17       	cp	r28, r30
    49d8:	df 07       	cpc	r29, r31
    49da:	69 f4       	brne	.+26     	; 0x49f6 <free+0xaa>
    49dc:	88 81       	ld	r24, Y
    49de:	99 81       	ldd	r25, Y+1	; 0x01
    49e0:	28 0f       	add	r18, r24
    49e2:	39 1f       	adc	r19, r25
    49e4:	2e 5f       	subi	r18, 0xFE	; 254
    49e6:	3f 4f       	sbci	r19, 0xFF	; 255
    49e8:	fa 01       	movw	r30, r20
    49ea:	31 83       	std	Z+1, r19	; 0x01
    49ec:	20 83       	st	Z, r18
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	9b 81       	ldd	r25, Y+3	; 0x03
    49f2:	93 83       	std	Z+3, r25	; 0x03
    49f4:	82 83       	std	Z+2, r24	; 0x02
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <do_rand>:
    49fc:	a0 e0       	ldi	r26, 0x00	; 0
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	e4 e0       	ldi	r30, 0x04	; 4
    4a02:	f5 e2       	ldi	r31, 0x25	; 37
    4a04:	0c 94 cf 28 	jmp	0x519e	; 0x519e <__prologue_saves__+0x10>
    4a08:	ec 01       	movw	r28, r24
    4a0a:	a8 80       	ld	r10, Y
    4a0c:	b9 80       	ldd	r11, Y+1	; 0x01
    4a0e:	ca 80       	ldd	r12, Y+2	; 0x02
    4a10:	db 80       	ldd	r13, Y+3	; 0x03
    4a12:	a1 14       	cp	r10, r1
    4a14:	b1 04       	cpc	r11, r1
    4a16:	c1 04       	cpc	r12, r1
    4a18:	d1 04       	cpc	r13, r1
    4a1a:	41 f4       	brne	.+16     	; 0x4a2c <do_rand+0x30>
    4a1c:	84 e2       	ldi	r24, 0x24	; 36
    4a1e:	a8 2e       	mov	r10, r24
    4a20:	89 ed       	ldi	r24, 0xD9	; 217
    4a22:	b8 2e       	mov	r11, r24
    4a24:	8b e5       	ldi	r24, 0x5B	; 91
    4a26:	c8 2e       	mov	r12, r24
    4a28:	87 e0       	ldi	r24, 0x07	; 7
    4a2a:	d8 2e       	mov	r13, r24
    4a2c:	c6 01       	movw	r24, r12
    4a2e:	b5 01       	movw	r22, r10
    4a30:	2d e1       	ldi	r18, 0x1D	; 29
    4a32:	33 ef       	ldi	r19, 0xF3	; 243
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	50 e0       	ldi	r21, 0x00	; 0
    4a38:	0e 94 ac 28 	call	0x5158	; 0x5158 <__divmodsi4>
    4a3c:	27 ea       	ldi	r18, 0xA7	; 167
    4a3e:	31 e4       	ldi	r19, 0x41	; 65
    4a40:	40 e0       	ldi	r20, 0x00	; 0
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    4a48:	7b 01       	movw	r14, r22
    4a4a:	8c 01       	movw	r16, r24
    4a4c:	c6 01       	movw	r24, r12
    4a4e:	b5 01       	movw	r22, r10
    4a50:	2d e1       	ldi	r18, 0x1D	; 29
    4a52:	33 ef       	ldi	r19, 0xF3	; 243
    4a54:	41 e0       	ldi	r20, 0x01	; 1
    4a56:	50 e0       	ldi	r21, 0x00	; 0
    4a58:	0e 94 ac 28 	call	0x5158	; 0x5158 <__divmodsi4>
    4a5c:	ca 01       	movw	r24, r20
    4a5e:	b9 01       	movw	r22, r18
    4a60:	2c ee       	ldi	r18, 0xEC	; 236
    4a62:	34 ef       	ldi	r19, 0xF4	; 244
    4a64:	4f ef       	ldi	r20, 0xFF	; 255
    4a66:	5f ef       	ldi	r21, 0xFF	; 255
    4a68:	0e 94 38 28 	call	0x5070	; 0x5070 <__mulsi3>
    4a6c:	6e 0d       	add	r22, r14
    4a6e:	7f 1d       	adc	r23, r15
    4a70:	80 1f       	adc	r24, r16
    4a72:	91 1f       	adc	r25, r17
    4a74:	97 ff       	sbrs	r25, 7
    4a76:	04 c0       	rjmp	.+8      	; 0x4a80 <do_rand+0x84>
    4a78:	61 50       	subi	r22, 0x01	; 1
    4a7a:	70 40       	sbci	r23, 0x00	; 0
    4a7c:	80 40       	sbci	r24, 0x00	; 0
    4a7e:	90 48       	sbci	r25, 0x80	; 128
    4a80:	68 83       	st	Y, r22
    4a82:	79 83       	std	Y+1, r23	; 0x01
    4a84:	8a 83       	std	Y+2, r24	; 0x02
    4a86:	9b 83       	std	Y+3, r25	; 0x03
    4a88:	9b 01       	movw	r18, r22
    4a8a:	3f 77       	andi	r19, 0x7F	; 127
    4a8c:	c9 01       	movw	r24, r18
    4a8e:	cd b7       	in	r28, 0x3d	; 61
    4a90:	de b7       	in	r29, 0x3e	; 62
    4a92:	ea e0       	ldi	r30, 0x0A	; 10
    4a94:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__epilogue_restores__+0x10>

00004a98 <rand_r>:
    4a98:	0e 94 fe 24 	call	0x49fc	; 0x49fc <do_rand>
    4a9c:	08 95       	ret

00004a9e <rand>:
    4a9e:	8f e6       	ldi	r24, 0x6F	; 111
    4aa0:	91 e0       	ldi	r25, 0x01	; 1
    4aa2:	0e 94 fe 24 	call	0x49fc	; 0x49fc <do_rand>
    4aa6:	08 95       	ret

00004aa8 <srand>:
    4aa8:	a0 e0       	ldi	r26, 0x00	; 0
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	80 93 6f 01 	sts	0x016F, r24
    4ab0:	90 93 70 01 	sts	0x0170, r25
    4ab4:	a0 93 71 01 	sts	0x0171, r26
    4ab8:	b0 93 72 01 	sts	0x0172, r27
    4abc:	08 95       	ret

00004abe <abort>:
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	f8 94       	cli
    4ac4:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <_exit>

00004ac8 <memcmp>:
    4ac8:	fb 01       	movw	r30, r22
    4aca:	dc 01       	movw	r26, r24
    4acc:	04 c0       	rjmp	.+8      	; 0x4ad6 <memcmp+0xe>
    4ace:	8d 91       	ld	r24, X+
    4ad0:	01 90       	ld	r0, Z+
    4ad2:	80 19       	sub	r24, r0
    4ad4:	21 f4       	brne	.+8      	; 0x4ade <memcmp+0x16>
    4ad6:	41 50       	subi	r20, 0x01	; 1
    4ad8:	50 40       	sbci	r21, 0x00	; 0
    4ada:	c8 f7       	brcc	.-14     	; 0x4ace <memcmp+0x6>
    4adc:	88 1b       	sub	r24, r24
    4ade:	99 0b       	sbc	r25, r25
    4ae0:	08 95       	ret

00004ae2 <memcpy>:
    4ae2:	fb 01       	movw	r30, r22
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	02 c0       	rjmp	.+4      	; 0x4aec <memcpy+0xa>
    4ae8:	01 90       	ld	r0, Z+
    4aea:	0d 92       	st	X+, r0
    4aec:	41 50       	subi	r20, 0x01	; 1
    4aee:	50 40       	sbci	r21, 0x00	; 0
    4af0:	d8 f7       	brcc	.-10     	; 0x4ae8 <memcpy+0x6>
    4af2:	08 95       	ret

00004af4 <memset>:
    4af4:	dc 01       	movw	r26, r24
    4af6:	01 c0       	rjmp	.+2      	; 0x4afa <memset+0x6>
    4af8:	6d 93       	st	X+, r22
    4afa:	41 50       	subi	r20, 0x01	; 1
    4afc:	50 40       	sbci	r21, 0x00	; 0
    4afe:	e0 f7       	brcc	.-8      	; 0x4af8 <memset+0x4>
    4b00:	08 95       	ret

00004b02 <strchr>:
    4b02:	fc 01       	movw	r30, r24
    4b04:	81 91       	ld	r24, Z+
    4b06:	86 17       	cp	r24, r22
    4b08:	21 f0       	breq	.+8      	; 0x4b12 <strchr+0x10>
    4b0a:	88 23       	and	r24, r24
    4b0c:	d9 f7       	brne	.-10     	; 0x4b04 <strchr+0x2>
    4b0e:	99 27       	eor	r25, r25
    4b10:	08 95       	ret
    4b12:	31 97       	sbiw	r30, 0x01	; 1
    4b14:	cf 01       	movw	r24, r30
    4b16:	08 95       	ret

00004b18 <strcmp>:
    4b18:	fb 01       	movw	r30, r22
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	8d 91       	ld	r24, X+
    4b1e:	01 90       	ld	r0, Z+
    4b20:	80 19       	sub	r24, r0
    4b22:	01 10       	cpse	r0, r1
    4b24:	d9 f3       	breq	.-10     	; 0x4b1c <strcmp+0x4>
    4b26:	99 0b       	sbc	r25, r25
    4b28:	08 95       	ret

00004b2a <strcpy>:
    4b2a:	fb 01       	movw	r30, r22
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	01 90       	ld	r0, Z+
    4b30:	0d 92       	st	X+, r0
    4b32:	00 20       	and	r0, r0
    4b34:	e1 f7       	brne	.-8      	; 0x4b2e <strcpy+0x4>
    4b36:	08 95       	ret

00004b38 <fprintf_P>:
    4b38:	a0 e0       	ldi	r26, 0x00	; 0
    4b3a:	b0 e0       	ldi	r27, 0x00	; 0
    4b3c:	e2 ea       	ldi	r30, 0xA2	; 162
    4b3e:	f5 e2       	ldi	r31, 0x25	; 37
    4b40:	0c 94 d5 28 	jmp	0x51aa	; 0x51aa <__prologue_saves__+0x1c>
    4b44:	0f 81       	ldd	r16, Y+7	; 0x07
    4b46:	18 85       	ldd	r17, Y+8	; 0x08
    4b48:	9e 01       	movw	r18, r28
    4b4a:	25 5f       	subi	r18, 0xF5	; 245
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4e:	f8 01       	movw	r30, r16
    4b50:	83 81       	ldd	r24, Z+3	; 0x03
    4b52:	88 60       	ori	r24, 0x08	; 8
    4b54:	83 83       	std	Z+3, r24	; 0x03
    4b56:	a9 01       	movw	r20, r18
    4b58:	69 85       	ldd	r22, Y+9	; 0x09
    4b5a:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <vfprintf>
    4b62:	f8 01       	movw	r30, r16
    4b64:	23 81       	ldd	r18, Z+3	; 0x03
    4b66:	27 7f       	andi	r18, 0xF7	; 247
    4b68:	23 83       	std	Z+3, r18	; 0x03
    4b6a:	20 96       	adiw	r28, 0x00	; 0
    4b6c:	e4 e0       	ldi	r30, 0x04	; 4
    4b6e:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__epilogue_restores__+0x1c>

00004b72 <vfprintf>:
    4b72:	ab e0       	ldi	r26, 0x0B	; 11
    4b74:	b0 e0       	ldi	r27, 0x00	; 0
    4b76:	ef eb       	ldi	r30, 0xBF	; 191
    4b78:	f5 e2       	ldi	r31, 0x25	; 37
    4b7a:	0c 94 c7 28 	jmp	0x518e	; 0x518e <__prologue_saves__>
    4b7e:	3c 01       	movw	r6, r24
    4b80:	2b 01       	movw	r4, r22
    4b82:	5a 01       	movw	r10, r20
    4b84:	fc 01       	movw	r30, r24
    4b86:	17 82       	std	Z+7, r1	; 0x07
    4b88:	16 82       	std	Z+6, r1	; 0x06
    4b8a:	83 81       	ldd	r24, Z+3	; 0x03
    4b8c:	81 fd       	sbrc	r24, 1
    4b8e:	03 c0       	rjmp	.+6      	; 0x4b96 <vfprintf+0x24>
    4b90:	6f ef       	ldi	r22, 0xFF	; 255
    4b92:	7f ef       	ldi	r23, 0xFF	; 255
    4b94:	c8 c1       	rjmp	.+912    	; 0x4f26 <vfprintf+0x3b4>
    4b96:	9a e0       	ldi	r25, 0x0A	; 10
    4b98:	89 2e       	mov	r8, r25
    4b9a:	1e 01       	movw	r2, r28
    4b9c:	08 94       	sec
    4b9e:	21 1c       	adc	r2, r1
    4ba0:	31 1c       	adc	r3, r1
    4ba2:	f3 01       	movw	r30, r6
    4ba4:	23 81       	ldd	r18, Z+3	; 0x03
    4ba6:	f2 01       	movw	r30, r4
    4ba8:	23 fd       	sbrc	r18, 3
    4baa:	85 91       	lpm	r24, Z+
    4bac:	23 ff       	sbrs	r18, 3
    4bae:	81 91       	ld	r24, Z+
    4bb0:	2f 01       	movw	r4, r30
    4bb2:	88 23       	and	r24, r24
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <vfprintf+0x46>
    4bb6:	b4 c1       	rjmp	.+872    	; 0x4f20 <vfprintf+0x3ae>
    4bb8:	85 32       	cpi	r24, 0x25	; 37
    4bba:	39 f4       	brne	.+14     	; 0x4bca <vfprintf+0x58>
    4bbc:	23 fd       	sbrc	r18, 3
    4bbe:	85 91       	lpm	r24, Z+
    4bc0:	23 ff       	sbrs	r18, 3
    4bc2:	81 91       	ld	r24, Z+
    4bc4:	2f 01       	movw	r4, r30
    4bc6:	85 32       	cpi	r24, 0x25	; 37
    4bc8:	29 f4       	brne	.+10     	; 0x4bd4 <vfprintf+0x62>
    4bca:	b3 01       	movw	r22, r6
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4bd2:	e7 cf       	rjmp	.-50     	; 0x4ba2 <vfprintf+0x30>
    4bd4:	98 2f       	mov	r25, r24
    4bd6:	dd 24       	eor	r13, r13
    4bd8:	cc 24       	eor	r12, r12
    4bda:	99 24       	eor	r9, r9
    4bdc:	ff e1       	ldi	r31, 0x1F	; 31
    4bde:	fd 15       	cp	r31, r13
    4be0:	d0 f0       	brcs	.+52     	; 0x4c16 <vfprintf+0xa4>
    4be2:	9b 32       	cpi	r25, 0x2B	; 43
    4be4:	69 f0       	breq	.+26     	; 0x4c00 <vfprintf+0x8e>
    4be6:	9c 32       	cpi	r25, 0x2C	; 44
    4be8:	28 f4       	brcc	.+10     	; 0x4bf4 <vfprintf+0x82>
    4bea:	90 32       	cpi	r25, 0x20	; 32
    4bec:	59 f0       	breq	.+22     	; 0x4c04 <vfprintf+0x92>
    4bee:	93 32       	cpi	r25, 0x23	; 35
    4bf0:	91 f4       	brne	.+36     	; 0x4c16 <vfprintf+0xa4>
    4bf2:	0e c0       	rjmp	.+28     	; 0x4c10 <vfprintf+0x9e>
    4bf4:	9d 32       	cpi	r25, 0x2D	; 45
    4bf6:	49 f0       	breq	.+18     	; 0x4c0a <vfprintf+0x98>
    4bf8:	90 33       	cpi	r25, 0x30	; 48
    4bfa:	69 f4       	brne	.+26     	; 0x4c16 <vfprintf+0xa4>
    4bfc:	41 e0       	ldi	r20, 0x01	; 1
    4bfe:	24 c0       	rjmp	.+72     	; 0x4c48 <vfprintf+0xd6>
    4c00:	52 e0       	ldi	r21, 0x02	; 2
    4c02:	d5 2a       	or	r13, r21
    4c04:	84 e0       	ldi	r24, 0x04	; 4
    4c06:	d8 2a       	or	r13, r24
    4c08:	28 c0       	rjmp	.+80     	; 0x4c5a <vfprintf+0xe8>
    4c0a:	98 e0       	ldi	r25, 0x08	; 8
    4c0c:	d9 2a       	or	r13, r25
    4c0e:	25 c0       	rjmp	.+74     	; 0x4c5a <vfprintf+0xe8>
    4c10:	e0 e1       	ldi	r30, 0x10	; 16
    4c12:	de 2a       	or	r13, r30
    4c14:	22 c0       	rjmp	.+68     	; 0x4c5a <vfprintf+0xe8>
    4c16:	d7 fc       	sbrc	r13, 7
    4c18:	29 c0       	rjmp	.+82     	; 0x4c6c <vfprintf+0xfa>
    4c1a:	89 2f       	mov	r24, r25
    4c1c:	80 53       	subi	r24, 0x30	; 48
    4c1e:	8a 30       	cpi	r24, 0x0A	; 10
    4c20:	70 f4       	brcc	.+28     	; 0x4c3e <vfprintf+0xcc>
    4c22:	d6 fe       	sbrs	r13, 6
    4c24:	05 c0       	rjmp	.+10     	; 0x4c30 <vfprintf+0xbe>
    4c26:	98 9c       	mul	r9, r8
    4c28:	90 2c       	mov	r9, r0
    4c2a:	11 24       	eor	r1, r1
    4c2c:	98 0e       	add	r9, r24
    4c2e:	15 c0       	rjmp	.+42     	; 0x4c5a <vfprintf+0xe8>
    4c30:	c8 9c       	mul	r12, r8
    4c32:	c0 2c       	mov	r12, r0
    4c34:	11 24       	eor	r1, r1
    4c36:	c8 0e       	add	r12, r24
    4c38:	f0 e2       	ldi	r31, 0x20	; 32
    4c3a:	df 2a       	or	r13, r31
    4c3c:	0e c0       	rjmp	.+28     	; 0x4c5a <vfprintf+0xe8>
    4c3e:	9e 32       	cpi	r25, 0x2E	; 46
    4c40:	29 f4       	brne	.+10     	; 0x4c4c <vfprintf+0xda>
    4c42:	d6 fc       	sbrc	r13, 6
    4c44:	6d c1       	rjmp	.+730    	; 0x4f20 <vfprintf+0x3ae>
    4c46:	40 e4       	ldi	r20, 0x40	; 64
    4c48:	d4 2a       	or	r13, r20
    4c4a:	07 c0       	rjmp	.+14     	; 0x4c5a <vfprintf+0xe8>
    4c4c:	9c 36       	cpi	r25, 0x6C	; 108
    4c4e:	19 f4       	brne	.+6      	; 0x4c56 <vfprintf+0xe4>
    4c50:	50 e8       	ldi	r21, 0x80	; 128
    4c52:	d5 2a       	or	r13, r21
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <vfprintf+0xe8>
    4c56:	98 36       	cpi	r25, 0x68	; 104
    4c58:	49 f4       	brne	.+18     	; 0x4c6c <vfprintf+0xfa>
    4c5a:	f2 01       	movw	r30, r4
    4c5c:	23 fd       	sbrc	r18, 3
    4c5e:	95 91       	lpm	r25, Z+
    4c60:	23 ff       	sbrs	r18, 3
    4c62:	91 91       	ld	r25, Z+
    4c64:	2f 01       	movw	r4, r30
    4c66:	99 23       	and	r25, r25
    4c68:	09 f0       	breq	.+2      	; 0x4c6c <vfprintf+0xfa>
    4c6a:	b8 cf       	rjmp	.-144    	; 0x4bdc <vfprintf+0x6a>
    4c6c:	89 2f       	mov	r24, r25
    4c6e:	85 54       	subi	r24, 0x45	; 69
    4c70:	83 30       	cpi	r24, 0x03	; 3
    4c72:	18 f0       	brcs	.+6      	; 0x4c7a <vfprintf+0x108>
    4c74:	80 52       	subi	r24, 0x20	; 32
    4c76:	83 30       	cpi	r24, 0x03	; 3
    4c78:	38 f4       	brcc	.+14     	; 0x4c88 <vfprintf+0x116>
    4c7a:	44 e0       	ldi	r20, 0x04	; 4
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	a4 0e       	add	r10, r20
    4c80:	b5 1e       	adc	r11, r21
    4c82:	5f e3       	ldi	r21, 0x3F	; 63
    4c84:	59 83       	std	Y+1, r21	; 0x01
    4c86:	0f c0       	rjmp	.+30     	; 0x4ca6 <vfprintf+0x134>
    4c88:	93 36       	cpi	r25, 0x63	; 99
    4c8a:	31 f0       	breq	.+12     	; 0x4c98 <vfprintf+0x126>
    4c8c:	93 37       	cpi	r25, 0x73	; 115
    4c8e:	79 f0       	breq	.+30     	; 0x4cae <vfprintf+0x13c>
    4c90:	93 35       	cpi	r25, 0x53	; 83
    4c92:	09 f0       	breq	.+2      	; 0x4c96 <vfprintf+0x124>
    4c94:	56 c0       	rjmp	.+172    	; 0x4d42 <vfprintf+0x1d0>
    4c96:	20 c0       	rjmp	.+64     	; 0x4cd8 <vfprintf+0x166>
    4c98:	f5 01       	movw	r30, r10
    4c9a:	80 81       	ld	r24, Z
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    4c9e:	42 e0       	ldi	r20, 0x02	; 2
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	a4 0e       	add	r10, r20
    4ca4:	b5 1e       	adc	r11, r21
    4ca6:	71 01       	movw	r14, r2
    4ca8:	01 e0       	ldi	r16, 0x01	; 1
    4caa:	10 e0       	ldi	r17, 0x00	; 0
    4cac:	12 c0       	rjmp	.+36     	; 0x4cd2 <vfprintf+0x160>
    4cae:	f5 01       	movw	r30, r10
    4cb0:	e0 80       	ld	r14, Z
    4cb2:	f1 80       	ldd	r15, Z+1	; 0x01
    4cb4:	d6 fc       	sbrc	r13, 6
    4cb6:	03 c0       	rjmp	.+6      	; 0x4cbe <vfprintf+0x14c>
    4cb8:	6f ef       	ldi	r22, 0xFF	; 255
    4cba:	7f ef       	ldi	r23, 0xFF	; 255
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <vfprintf+0x150>
    4cbe:	69 2d       	mov	r22, r9
    4cc0:	70 e0       	ldi	r23, 0x00	; 0
    4cc2:	42 e0       	ldi	r20, 0x02	; 2
    4cc4:	50 e0       	ldi	r21, 0x00	; 0
    4cc6:	a4 0e       	add	r10, r20
    4cc8:	b5 1e       	adc	r11, r21
    4cca:	c7 01       	movw	r24, r14
    4ccc:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <strnlen>
    4cd0:	8c 01       	movw	r16, r24
    4cd2:	5f e7       	ldi	r21, 0x7F	; 127
    4cd4:	d5 22       	and	r13, r21
    4cd6:	14 c0       	rjmp	.+40     	; 0x4d00 <vfprintf+0x18e>
    4cd8:	f5 01       	movw	r30, r10
    4cda:	e0 80       	ld	r14, Z
    4cdc:	f1 80       	ldd	r15, Z+1	; 0x01
    4cde:	d6 fc       	sbrc	r13, 6
    4ce0:	03 c0       	rjmp	.+6      	; 0x4ce8 <vfprintf+0x176>
    4ce2:	6f ef       	ldi	r22, 0xFF	; 255
    4ce4:	7f ef       	ldi	r23, 0xFF	; 255
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <vfprintf+0x17a>
    4ce8:	69 2d       	mov	r22, r9
    4cea:	70 e0       	ldi	r23, 0x00	; 0
    4cec:	42 e0       	ldi	r20, 0x02	; 2
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	a4 0e       	add	r10, r20
    4cf2:	b5 1e       	adc	r11, r21
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	0e 94 98 27 	call	0x4f30	; 0x4f30 <strnlen_P>
    4cfa:	8c 01       	movw	r16, r24
    4cfc:	50 e8       	ldi	r21, 0x80	; 128
    4cfe:	d5 2a       	or	r13, r21
    4d00:	d3 fe       	sbrs	r13, 3
    4d02:	07 c0       	rjmp	.+14     	; 0x4d12 <vfprintf+0x1a0>
    4d04:	1a c0       	rjmp	.+52     	; 0x4d3a <vfprintf+0x1c8>
    4d06:	b3 01       	movw	r22, r6
    4d08:	80 e2       	ldi	r24, 0x20	; 32
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4d10:	ca 94       	dec	r12
    4d12:	8c 2d       	mov	r24, r12
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	08 17       	cp	r16, r24
    4d18:	19 07       	cpc	r17, r25
    4d1a:	a8 f3       	brcs	.-22     	; 0x4d06 <vfprintf+0x194>
    4d1c:	0e c0       	rjmp	.+28     	; 0x4d3a <vfprintf+0x1c8>
    4d1e:	f7 01       	movw	r30, r14
    4d20:	d7 fc       	sbrc	r13, 7
    4d22:	85 91       	lpm	r24, Z+
    4d24:	d7 fe       	sbrs	r13, 7
    4d26:	81 91       	ld	r24, Z+
    4d28:	7f 01       	movw	r14, r30
    4d2a:	b3 01       	movw	r22, r6
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4d32:	c1 10       	cpse	r12, r1
    4d34:	ca 94       	dec	r12
    4d36:	01 50       	subi	r16, 0x01	; 1
    4d38:	10 40       	sbci	r17, 0x00	; 0
    4d3a:	01 15       	cp	r16, r1
    4d3c:	11 05       	cpc	r17, r1
    4d3e:	79 f7       	brne	.-34     	; 0x4d1e <vfprintf+0x1ac>
    4d40:	ec c0       	rjmp	.+472    	; 0x4f1a <vfprintf+0x3a8>
    4d42:	94 36       	cpi	r25, 0x64	; 100
    4d44:	11 f0       	breq	.+4      	; 0x4d4a <vfprintf+0x1d8>
    4d46:	99 36       	cpi	r25, 0x69	; 105
    4d48:	71 f5       	brne	.+92     	; 0x4da6 <vfprintf+0x234>
    4d4a:	d7 fe       	sbrs	r13, 7
    4d4c:	08 c0       	rjmp	.+16     	; 0x4d5e <vfprintf+0x1ec>
    4d4e:	f5 01       	movw	r30, r10
    4d50:	e0 80       	ld	r14, Z
    4d52:	f1 80       	ldd	r15, Z+1	; 0x01
    4d54:	02 81       	ldd	r16, Z+2	; 0x02
    4d56:	13 81       	ldd	r17, Z+3	; 0x03
    4d58:	44 e0       	ldi	r20, 0x04	; 4
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	0a c0       	rjmp	.+20     	; 0x4d72 <vfprintf+0x200>
    4d5e:	f5 01       	movw	r30, r10
    4d60:	80 81       	ld	r24, Z
    4d62:	91 81       	ldd	r25, Z+1	; 0x01
    4d64:	7c 01       	movw	r14, r24
    4d66:	00 27       	eor	r16, r16
    4d68:	f7 fc       	sbrc	r15, 7
    4d6a:	00 95       	com	r16
    4d6c:	10 2f       	mov	r17, r16
    4d6e:	42 e0       	ldi	r20, 0x02	; 2
    4d70:	50 e0       	ldi	r21, 0x00	; 0
    4d72:	a4 0e       	add	r10, r20
    4d74:	b5 1e       	adc	r11, r21
    4d76:	5f e6       	ldi	r21, 0x6F	; 111
    4d78:	d5 22       	and	r13, r21
    4d7a:	17 ff       	sbrs	r17, 7
    4d7c:	0a c0       	rjmp	.+20     	; 0x4d92 <vfprintf+0x220>
    4d7e:	10 95       	com	r17
    4d80:	00 95       	com	r16
    4d82:	f0 94       	com	r15
    4d84:	e0 94       	com	r14
    4d86:	e1 1c       	adc	r14, r1
    4d88:	f1 1c       	adc	r15, r1
    4d8a:	01 1d       	adc	r16, r1
    4d8c:	11 1d       	adc	r17, r1
    4d8e:	80 e8       	ldi	r24, 0x80	; 128
    4d90:	d8 2a       	or	r13, r24
    4d92:	2a e0       	ldi	r18, 0x0A	; 10
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	a1 01       	movw	r20, r2
    4d98:	c8 01       	movw	r24, r16
    4d9a:	b7 01       	movw	r22, r14
    4d9c:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <__ultoa_invert>
    4da0:	f8 2e       	mov	r15, r24
    4da2:	f2 18       	sub	r15, r2
    4da4:	40 c0       	rjmp	.+128    	; 0x4e26 <vfprintf+0x2b4>
    4da6:	95 37       	cpi	r25, 0x75	; 117
    4da8:	29 f4       	brne	.+10     	; 0x4db4 <vfprintf+0x242>
    4daa:	1d 2d       	mov	r17, r13
    4dac:	1f 7e       	andi	r17, 0xEF	; 239
    4dae:	2a e0       	ldi	r18, 0x0A	; 10
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	1d c0       	rjmp	.+58     	; 0x4dee <vfprintf+0x27c>
    4db4:	1d 2d       	mov	r17, r13
    4db6:	19 7f       	andi	r17, 0xF9	; 249
    4db8:	9f 36       	cpi	r25, 0x6F	; 111
    4dba:	61 f0       	breq	.+24     	; 0x4dd4 <vfprintf+0x262>
    4dbc:	90 37       	cpi	r25, 0x70	; 112
    4dbe:	20 f4       	brcc	.+8      	; 0x4dc8 <vfprintf+0x256>
    4dc0:	98 35       	cpi	r25, 0x58	; 88
    4dc2:	09 f0       	breq	.+2      	; 0x4dc6 <vfprintf+0x254>
    4dc4:	ad c0       	rjmp	.+346    	; 0x4f20 <vfprintf+0x3ae>
    4dc6:	0f c0       	rjmp	.+30     	; 0x4de6 <vfprintf+0x274>
    4dc8:	90 37       	cpi	r25, 0x70	; 112
    4dca:	39 f0       	breq	.+14     	; 0x4dda <vfprintf+0x268>
    4dcc:	98 37       	cpi	r25, 0x78	; 120
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <vfprintf+0x260>
    4dd0:	a7 c0       	rjmp	.+334    	; 0x4f20 <vfprintf+0x3ae>
    4dd2:	04 c0       	rjmp	.+8      	; 0x4ddc <vfprintf+0x26a>
    4dd4:	28 e0       	ldi	r18, 0x08	; 8
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	0a c0       	rjmp	.+20     	; 0x4dee <vfprintf+0x27c>
    4dda:	10 61       	ori	r17, 0x10	; 16
    4ddc:	14 fd       	sbrc	r17, 4
    4dde:	14 60       	ori	r17, 0x04	; 4
    4de0:	20 e1       	ldi	r18, 0x10	; 16
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	04 c0       	rjmp	.+8      	; 0x4dee <vfprintf+0x27c>
    4de6:	14 fd       	sbrc	r17, 4
    4de8:	16 60       	ori	r17, 0x06	; 6
    4dea:	20 e1       	ldi	r18, 0x10	; 16
    4dec:	32 e0       	ldi	r19, 0x02	; 2
    4dee:	17 ff       	sbrs	r17, 7
    4df0:	08 c0       	rjmp	.+16     	; 0x4e02 <vfprintf+0x290>
    4df2:	f5 01       	movw	r30, r10
    4df4:	60 81       	ld	r22, Z
    4df6:	71 81       	ldd	r23, Z+1	; 0x01
    4df8:	82 81       	ldd	r24, Z+2	; 0x02
    4dfa:	93 81       	ldd	r25, Z+3	; 0x03
    4dfc:	44 e0       	ldi	r20, 0x04	; 4
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	08 c0       	rjmp	.+16     	; 0x4e12 <vfprintf+0x2a0>
    4e02:	f5 01       	movw	r30, r10
    4e04:	80 81       	ld	r24, Z
    4e06:	91 81       	ldd	r25, Z+1	; 0x01
    4e08:	bc 01       	movw	r22, r24
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	42 e0       	ldi	r20, 0x02	; 2
    4e10:	50 e0       	ldi	r21, 0x00	; 0
    4e12:	a4 0e       	add	r10, r20
    4e14:	b5 1e       	adc	r11, r21
    4e16:	a1 01       	movw	r20, r2
    4e18:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <__ultoa_invert>
    4e1c:	f8 2e       	mov	r15, r24
    4e1e:	f2 18       	sub	r15, r2
    4e20:	8f e7       	ldi	r24, 0x7F	; 127
    4e22:	d8 2e       	mov	r13, r24
    4e24:	d1 22       	and	r13, r17
    4e26:	d6 fe       	sbrs	r13, 6
    4e28:	0b c0       	rjmp	.+22     	; 0x4e40 <vfprintf+0x2ce>
    4e2a:	5e ef       	ldi	r21, 0xFE	; 254
    4e2c:	d5 22       	and	r13, r21
    4e2e:	f9 14       	cp	r15, r9
    4e30:	38 f4       	brcc	.+14     	; 0x4e40 <vfprintf+0x2ce>
    4e32:	d4 fe       	sbrs	r13, 4
    4e34:	07 c0       	rjmp	.+14     	; 0x4e44 <vfprintf+0x2d2>
    4e36:	d2 fc       	sbrc	r13, 2
    4e38:	05 c0       	rjmp	.+10     	; 0x4e44 <vfprintf+0x2d2>
    4e3a:	8f ee       	ldi	r24, 0xEF	; 239
    4e3c:	d8 22       	and	r13, r24
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <vfprintf+0x2d2>
    4e40:	1f 2d       	mov	r17, r15
    4e42:	01 c0       	rjmp	.+2      	; 0x4e46 <vfprintf+0x2d4>
    4e44:	19 2d       	mov	r17, r9
    4e46:	d4 fe       	sbrs	r13, 4
    4e48:	0d c0       	rjmp	.+26     	; 0x4e64 <vfprintf+0x2f2>
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	ef 0d       	add	r30, r15
    4e4e:	f1 1d       	adc	r31, r1
    4e50:	80 81       	ld	r24, Z
    4e52:	80 33       	cpi	r24, 0x30	; 48
    4e54:	19 f4       	brne	.+6      	; 0x4e5c <vfprintf+0x2ea>
    4e56:	99 ee       	ldi	r25, 0xE9	; 233
    4e58:	d9 22       	and	r13, r25
    4e5a:	08 c0       	rjmp	.+16     	; 0x4e6c <vfprintf+0x2fa>
    4e5c:	1f 5f       	subi	r17, 0xFF	; 255
    4e5e:	d2 fe       	sbrs	r13, 2
    4e60:	05 c0       	rjmp	.+10     	; 0x4e6c <vfprintf+0x2fa>
    4e62:	03 c0       	rjmp	.+6      	; 0x4e6a <vfprintf+0x2f8>
    4e64:	8d 2d       	mov	r24, r13
    4e66:	86 78       	andi	r24, 0x86	; 134
    4e68:	09 f0       	breq	.+2      	; 0x4e6c <vfprintf+0x2fa>
    4e6a:	1f 5f       	subi	r17, 0xFF	; 255
    4e6c:	0d 2d       	mov	r16, r13
    4e6e:	d3 fc       	sbrc	r13, 3
    4e70:	14 c0       	rjmp	.+40     	; 0x4e9a <vfprintf+0x328>
    4e72:	d0 fe       	sbrs	r13, 0
    4e74:	0f c0       	rjmp	.+30     	; 0x4e94 <vfprintf+0x322>
    4e76:	1c 15       	cp	r17, r12
    4e78:	10 f0       	brcs	.+4      	; 0x4e7e <vfprintf+0x30c>
    4e7a:	9f 2c       	mov	r9, r15
    4e7c:	0b c0       	rjmp	.+22     	; 0x4e94 <vfprintf+0x322>
    4e7e:	9f 2c       	mov	r9, r15
    4e80:	9c 0c       	add	r9, r12
    4e82:	91 1a       	sub	r9, r17
    4e84:	1c 2d       	mov	r17, r12
    4e86:	06 c0       	rjmp	.+12     	; 0x4e94 <vfprintf+0x322>
    4e88:	b3 01       	movw	r22, r6
    4e8a:	80 e2       	ldi	r24, 0x20	; 32
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4e92:	1f 5f       	subi	r17, 0xFF	; 255
    4e94:	1c 15       	cp	r17, r12
    4e96:	c0 f3       	brcs	.-16     	; 0x4e88 <vfprintf+0x316>
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <vfprintf+0x330>
    4e9a:	1c 15       	cp	r17, r12
    4e9c:	10 f4       	brcc	.+4      	; 0x4ea2 <vfprintf+0x330>
    4e9e:	c1 1a       	sub	r12, r17
    4ea0:	01 c0       	rjmp	.+2      	; 0x4ea4 <vfprintf+0x332>
    4ea2:	cc 24       	eor	r12, r12
    4ea4:	04 ff       	sbrs	r16, 4
    4ea6:	10 c0       	rjmp	.+32     	; 0x4ec8 <vfprintf+0x356>
    4ea8:	b3 01       	movw	r22, r6
    4eaa:	80 e3       	ldi	r24, 0x30	; 48
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4eb2:	02 ff       	sbrs	r16, 2
    4eb4:	1e c0       	rjmp	.+60     	; 0x4ef2 <vfprintf+0x380>
    4eb6:	01 fd       	sbrc	r16, 1
    4eb8:	03 c0       	rjmp	.+6      	; 0x4ec0 <vfprintf+0x34e>
    4eba:	88 e7       	ldi	r24, 0x78	; 120
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	02 c0       	rjmp	.+4      	; 0x4ec4 <vfprintf+0x352>
    4ec0:	88 e5       	ldi	r24, 0x58	; 88
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	b3 01       	movw	r22, r6
    4ec6:	0c c0       	rjmp	.+24     	; 0x4ee0 <vfprintf+0x36e>
    4ec8:	80 2f       	mov	r24, r16
    4eca:	86 78       	andi	r24, 0x86	; 134
    4ecc:	91 f0       	breq	.+36     	; 0x4ef2 <vfprintf+0x380>
    4ece:	01 ff       	sbrs	r16, 1
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <vfprintf+0x364>
    4ed2:	8b e2       	ldi	r24, 0x2B	; 43
    4ed4:	01 c0       	rjmp	.+2      	; 0x4ed8 <vfprintf+0x366>
    4ed6:	80 e2       	ldi	r24, 0x20	; 32
    4ed8:	d7 fc       	sbrc	r13, 7
    4eda:	8d e2       	ldi	r24, 0x2D	; 45
    4edc:	b3 01       	movw	r22, r6
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4ee4:	06 c0       	rjmp	.+12     	; 0x4ef2 <vfprintf+0x380>
    4ee6:	b3 01       	movw	r22, r6
    4ee8:	80 e3       	ldi	r24, 0x30	; 48
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4ef0:	9a 94       	dec	r9
    4ef2:	f9 14       	cp	r15, r9
    4ef4:	c0 f3       	brcs	.-16     	; 0x4ee6 <vfprintf+0x374>
    4ef6:	fa 94       	dec	r15
    4ef8:	f1 01       	movw	r30, r2
    4efa:	ef 0d       	add	r30, r15
    4efc:	f1 1d       	adc	r31, r1
    4efe:	b3 01       	movw	r22, r6
    4f00:	80 81       	ld	r24, Z
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4f08:	ff 20       	and	r15, r15
    4f0a:	a9 f7       	brne	.-22     	; 0x4ef6 <vfprintf+0x384>
    4f0c:	06 c0       	rjmp	.+12     	; 0x4f1a <vfprintf+0x3a8>
    4f0e:	b3 01       	movw	r22, r6
    4f10:	80 e2       	ldi	r24, 0x20	; 32
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <fputc>
    4f18:	ca 94       	dec	r12
    4f1a:	cc 20       	and	r12, r12
    4f1c:	c1 f7       	brne	.-16     	; 0x4f0e <vfprintf+0x39c>
    4f1e:	41 ce       	rjmp	.-894    	; 0x4ba2 <vfprintf+0x30>
    4f20:	f3 01       	movw	r30, r6
    4f22:	66 81       	ldd	r22, Z+6	; 0x06
    4f24:	77 81       	ldd	r23, Z+7	; 0x07
    4f26:	cb 01       	movw	r24, r22
    4f28:	2b 96       	adiw	r28, 0x0b	; 11
    4f2a:	e2 e1       	ldi	r30, 0x12	; 18
    4f2c:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__epilogue_restores__>

00004f30 <strnlen_P>:
    4f30:	fc 01       	movw	r30, r24
    4f32:	05 90       	lpm	r0, Z+
    4f34:	61 50       	subi	r22, 0x01	; 1
    4f36:	70 40       	sbci	r23, 0x00	; 0
    4f38:	01 10       	cpse	r0, r1
    4f3a:	d8 f7       	brcc	.-10     	; 0x4f32 <strnlen_P+0x2>
    4f3c:	80 95       	com	r24
    4f3e:	90 95       	com	r25
    4f40:	8e 0f       	add	r24, r30
    4f42:	9f 1f       	adc	r25, r31
    4f44:	08 95       	ret

00004f46 <strnlen>:
    4f46:	fc 01       	movw	r30, r24
    4f48:	61 50       	subi	r22, 0x01	; 1
    4f4a:	70 40       	sbci	r23, 0x00	; 0
    4f4c:	01 90       	ld	r0, Z+
    4f4e:	01 10       	cpse	r0, r1
    4f50:	d8 f7       	brcc	.-10     	; 0x4f48 <strnlen+0x2>
    4f52:	80 95       	com	r24
    4f54:	90 95       	com	r25
    4f56:	8e 0f       	add	r24, r30
    4f58:	9f 1f       	adc	r25, r31
    4f5a:	08 95       	ret

00004f5c <fputc>:
    4f5c:	0f 93       	push	r16
    4f5e:	1f 93       	push	r17
    4f60:	cf 93       	push	r28
    4f62:	df 93       	push	r29
    4f64:	8c 01       	movw	r16, r24
    4f66:	eb 01       	movw	r28, r22
    4f68:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6a:	81 ff       	sbrs	r24, 1
    4f6c:	1b c0       	rjmp	.+54     	; 0x4fa4 <fputc+0x48>
    4f6e:	82 ff       	sbrs	r24, 2
    4f70:	0d c0       	rjmp	.+26     	; 0x4f8c <fputc+0x30>
    4f72:	2e 81       	ldd	r18, Y+6	; 0x06
    4f74:	3f 81       	ldd	r19, Y+7	; 0x07
    4f76:	8c 81       	ldd	r24, Y+4	; 0x04
    4f78:	9d 81       	ldd	r25, Y+5	; 0x05
    4f7a:	28 17       	cp	r18, r24
    4f7c:	39 07       	cpc	r19, r25
    4f7e:	64 f4       	brge	.+24     	; 0x4f98 <fputc+0x3c>
    4f80:	e8 81       	ld	r30, Y
    4f82:	f9 81       	ldd	r31, Y+1	; 0x01
    4f84:	01 93       	st	Z+, r16
    4f86:	f9 83       	std	Y+1, r31	; 0x01
    4f88:	e8 83       	st	Y, r30
    4f8a:	06 c0       	rjmp	.+12     	; 0x4f98 <fputc+0x3c>
    4f8c:	e8 85       	ldd	r30, Y+8	; 0x08
    4f8e:	f9 85       	ldd	r31, Y+9	; 0x09
    4f90:	80 2f       	mov	r24, r16
    4f92:	09 95       	icall
    4f94:	89 2b       	or	r24, r25
    4f96:	31 f4       	brne	.+12     	; 0x4fa4 <fputc+0x48>
    4f98:	8e 81       	ldd	r24, Y+6	; 0x06
    4f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f9c:	01 96       	adiw	r24, 0x01	; 1
    4f9e:	9f 83       	std	Y+7, r25	; 0x07
    4fa0:	8e 83       	std	Y+6, r24	; 0x06
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <fputc+0x4c>
    4fa4:	0f ef       	ldi	r16, 0xFF	; 255
    4fa6:	1f ef       	ldi	r17, 0xFF	; 255
    4fa8:	c8 01       	movw	r24, r16
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	08 95       	ret

00004fb4 <__ultoa_invert>:
    4fb4:	fa 01       	movw	r30, r20
    4fb6:	aa 27       	eor	r26, r26
    4fb8:	28 30       	cpi	r18, 0x08	; 8
    4fba:	51 f1       	breq	.+84     	; 0x5010 <__ultoa_invert+0x5c>
    4fbc:	20 31       	cpi	r18, 0x10	; 16
    4fbe:	81 f1       	breq	.+96     	; 0x5020 <__ultoa_invert+0x6c>
    4fc0:	e8 94       	clt
    4fc2:	6f 93       	push	r22
    4fc4:	6e 7f       	andi	r22, 0xFE	; 254
    4fc6:	6e 5f       	subi	r22, 0xFE	; 254
    4fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fca:	8f 4f       	sbci	r24, 0xFF	; 255
    4fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fce:	af 4f       	sbci	r26, 0xFF	; 255
    4fd0:	b1 e0       	ldi	r27, 0x01	; 1
    4fd2:	3e d0       	rcall	.+124    	; 0x5050 <__ultoa_invert+0x9c>
    4fd4:	b4 e0       	ldi	r27, 0x04	; 4
    4fd6:	3c d0       	rcall	.+120    	; 0x5050 <__ultoa_invert+0x9c>
    4fd8:	67 0f       	add	r22, r23
    4fda:	78 1f       	adc	r23, r24
    4fdc:	89 1f       	adc	r24, r25
    4fde:	9a 1f       	adc	r25, r26
    4fe0:	a1 1d       	adc	r26, r1
    4fe2:	68 0f       	add	r22, r24
    4fe4:	79 1f       	adc	r23, r25
    4fe6:	8a 1f       	adc	r24, r26
    4fe8:	91 1d       	adc	r25, r1
    4fea:	a1 1d       	adc	r26, r1
    4fec:	6a 0f       	add	r22, r26
    4fee:	71 1d       	adc	r23, r1
    4ff0:	81 1d       	adc	r24, r1
    4ff2:	91 1d       	adc	r25, r1
    4ff4:	a1 1d       	adc	r26, r1
    4ff6:	20 d0       	rcall	.+64     	; 0x5038 <__ultoa_invert+0x84>
    4ff8:	09 f4       	brne	.+2      	; 0x4ffc <__ultoa_invert+0x48>
    4ffa:	68 94       	set
    4ffc:	3f 91       	pop	r19
    4ffe:	2a e0       	ldi	r18, 0x0A	; 10
    5000:	26 9f       	mul	r18, r22
    5002:	11 24       	eor	r1, r1
    5004:	30 19       	sub	r19, r0
    5006:	30 5d       	subi	r19, 0xD0	; 208
    5008:	31 93       	st	Z+, r19
    500a:	de f6       	brtc	.-74     	; 0x4fc2 <__ultoa_invert+0xe>
    500c:	cf 01       	movw	r24, r30
    500e:	08 95       	ret
    5010:	46 2f       	mov	r20, r22
    5012:	47 70       	andi	r20, 0x07	; 7
    5014:	40 5d       	subi	r20, 0xD0	; 208
    5016:	41 93       	st	Z+, r20
    5018:	b3 e0       	ldi	r27, 0x03	; 3
    501a:	0f d0       	rcall	.+30     	; 0x503a <__ultoa_invert+0x86>
    501c:	c9 f7       	brne	.-14     	; 0x5010 <__ultoa_invert+0x5c>
    501e:	f6 cf       	rjmp	.-20     	; 0x500c <__ultoa_invert+0x58>
    5020:	46 2f       	mov	r20, r22
    5022:	4f 70       	andi	r20, 0x0F	; 15
    5024:	40 5d       	subi	r20, 0xD0	; 208
    5026:	4a 33       	cpi	r20, 0x3A	; 58
    5028:	18 f0       	brcs	.+6      	; 0x5030 <__ultoa_invert+0x7c>
    502a:	49 5d       	subi	r20, 0xD9	; 217
    502c:	31 fd       	sbrc	r19, 1
    502e:	40 52       	subi	r20, 0x20	; 32
    5030:	41 93       	st	Z+, r20
    5032:	02 d0       	rcall	.+4      	; 0x5038 <__ultoa_invert+0x84>
    5034:	a9 f7       	brne	.-22     	; 0x5020 <__ultoa_invert+0x6c>
    5036:	ea cf       	rjmp	.-44     	; 0x500c <__ultoa_invert+0x58>
    5038:	b4 e0       	ldi	r27, 0x04	; 4
    503a:	a6 95       	lsr	r26
    503c:	97 95       	ror	r25
    503e:	87 95       	ror	r24
    5040:	77 95       	ror	r23
    5042:	67 95       	ror	r22
    5044:	ba 95       	dec	r27
    5046:	c9 f7       	brne	.-14     	; 0x503a <__ultoa_invert+0x86>
    5048:	00 97       	sbiw	r24, 0x00	; 0
    504a:	61 05       	cpc	r22, r1
    504c:	71 05       	cpc	r23, r1
    504e:	08 95       	ret
    5050:	9b 01       	movw	r18, r22
    5052:	ac 01       	movw	r20, r24
    5054:	0a 2e       	mov	r0, r26
    5056:	06 94       	lsr	r0
    5058:	57 95       	ror	r21
    505a:	47 95       	ror	r20
    505c:	37 95       	ror	r19
    505e:	27 95       	ror	r18
    5060:	ba 95       	dec	r27
    5062:	c9 f7       	brne	.-14     	; 0x5056 <__ultoa_invert+0xa2>
    5064:	62 0f       	add	r22, r18
    5066:	73 1f       	adc	r23, r19
    5068:	84 1f       	adc	r24, r20
    506a:	95 1f       	adc	r25, r21
    506c:	a0 1d       	adc	r26, r0
    506e:	08 95       	ret

00005070 <__mulsi3>:
    5070:	62 9f       	mul	r22, r18
    5072:	d0 01       	movw	r26, r0
    5074:	73 9f       	mul	r23, r19
    5076:	f0 01       	movw	r30, r0
    5078:	82 9f       	mul	r24, r18
    507a:	e0 0d       	add	r30, r0
    507c:	f1 1d       	adc	r31, r1
    507e:	64 9f       	mul	r22, r20
    5080:	e0 0d       	add	r30, r0
    5082:	f1 1d       	adc	r31, r1
    5084:	92 9f       	mul	r25, r18
    5086:	f0 0d       	add	r31, r0
    5088:	83 9f       	mul	r24, r19
    508a:	f0 0d       	add	r31, r0
    508c:	74 9f       	mul	r23, r20
    508e:	f0 0d       	add	r31, r0
    5090:	65 9f       	mul	r22, r21
    5092:	f0 0d       	add	r31, r0
    5094:	99 27       	eor	r25, r25
    5096:	72 9f       	mul	r23, r18
    5098:	b0 0d       	add	r27, r0
    509a:	e1 1d       	adc	r30, r1
    509c:	f9 1f       	adc	r31, r25
    509e:	63 9f       	mul	r22, r19
    50a0:	b0 0d       	add	r27, r0
    50a2:	e1 1d       	adc	r30, r1
    50a4:	f9 1f       	adc	r31, r25
    50a6:	bd 01       	movw	r22, r26
    50a8:	cf 01       	movw	r24, r30
    50aa:	11 24       	eor	r1, r1
    50ac:	08 95       	ret

000050ae <__udivmodqi4>:
    50ae:	99 1b       	sub	r25, r25
    50b0:	79 e0       	ldi	r23, 0x09	; 9
    50b2:	04 c0       	rjmp	.+8      	; 0x50bc <__udivmodqi4_ep>

000050b4 <__udivmodqi4_loop>:
    50b4:	99 1f       	adc	r25, r25
    50b6:	96 17       	cp	r25, r22
    50b8:	08 f0       	brcs	.+2      	; 0x50bc <__udivmodqi4_ep>
    50ba:	96 1b       	sub	r25, r22

000050bc <__udivmodqi4_ep>:
    50bc:	88 1f       	adc	r24, r24
    50be:	7a 95       	dec	r23
    50c0:	c9 f7       	brne	.-14     	; 0x50b4 <__udivmodqi4_loop>
    50c2:	80 95       	com	r24
    50c4:	08 95       	ret

000050c6 <__divmodhi4>:
    50c6:	97 fb       	bst	r25, 7
    50c8:	09 2e       	mov	r0, r25
    50ca:	07 26       	eor	r0, r23
    50cc:	0a d0       	rcall	.+20     	; 0x50e2 <__divmodhi4_neg1>
    50ce:	77 fd       	sbrc	r23, 7
    50d0:	04 d0       	rcall	.+8      	; 0x50da <__divmodhi4_neg2>
    50d2:	2e d0       	rcall	.+92     	; 0x5130 <__udivmodhi4>
    50d4:	06 d0       	rcall	.+12     	; 0x50e2 <__divmodhi4_neg1>
    50d6:	00 20       	and	r0, r0
    50d8:	1a f4       	brpl	.+6      	; 0x50e0 <__divmodhi4_exit>

000050da <__divmodhi4_neg2>:
    50da:	70 95       	com	r23
    50dc:	61 95       	neg	r22
    50de:	7f 4f       	sbci	r23, 0xFF	; 255

000050e0 <__divmodhi4_exit>:
    50e0:	08 95       	ret

000050e2 <__divmodhi4_neg1>:
    50e2:	f6 f7       	brtc	.-4      	; 0x50e0 <__divmodhi4_exit>
    50e4:	90 95       	com	r25
    50e6:	81 95       	neg	r24
    50e8:	9f 4f       	sbci	r25, 0xFF	; 255
    50ea:	08 95       	ret

000050ec <__udivmodsi4>:
    50ec:	a1 e2       	ldi	r26, 0x21	; 33
    50ee:	1a 2e       	mov	r1, r26
    50f0:	aa 1b       	sub	r26, r26
    50f2:	bb 1b       	sub	r27, r27
    50f4:	fd 01       	movw	r30, r26
    50f6:	0d c0       	rjmp	.+26     	; 0x5112 <__udivmodsi4_ep>

000050f8 <__udivmodsi4_loop>:
    50f8:	aa 1f       	adc	r26, r26
    50fa:	bb 1f       	adc	r27, r27
    50fc:	ee 1f       	adc	r30, r30
    50fe:	ff 1f       	adc	r31, r31
    5100:	a2 17       	cp	r26, r18
    5102:	b3 07       	cpc	r27, r19
    5104:	e4 07       	cpc	r30, r20
    5106:	f5 07       	cpc	r31, r21
    5108:	20 f0       	brcs	.+8      	; 0x5112 <__udivmodsi4_ep>
    510a:	a2 1b       	sub	r26, r18
    510c:	b3 0b       	sbc	r27, r19
    510e:	e4 0b       	sbc	r30, r20
    5110:	f5 0b       	sbc	r31, r21

00005112 <__udivmodsi4_ep>:
    5112:	66 1f       	adc	r22, r22
    5114:	77 1f       	adc	r23, r23
    5116:	88 1f       	adc	r24, r24
    5118:	99 1f       	adc	r25, r25
    511a:	1a 94       	dec	r1
    511c:	69 f7       	brne	.-38     	; 0x50f8 <__udivmodsi4_loop>
    511e:	60 95       	com	r22
    5120:	70 95       	com	r23
    5122:	80 95       	com	r24
    5124:	90 95       	com	r25
    5126:	9b 01       	movw	r18, r22
    5128:	ac 01       	movw	r20, r24
    512a:	bd 01       	movw	r22, r26
    512c:	cf 01       	movw	r24, r30
    512e:	08 95       	ret

00005130 <__udivmodhi4>:
    5130:	aa 1b       	sub	r26, r26
    5132:	bb 1b       	sub	r27, r27
    5134:	51 e1       	ldi	r21, 0x11	; 17
    5136:	07 c0       	rjmp	.+14     	; 0x5146 <__udivmodhi4_ep>

00005138 <__udivmodhi4_loop>:
    5138:	aa 1f       	adc	r26, r26
    513a:	bb 1f       	adc	r27, r27
    513c:	a6 17       	cp	r26, r22
    513e:	b7 07       	cpc	r27, r23
    5140:	10 f0       	brcs	.+4      	; 0x5146 <__udivmodhi4_ep>
    5142:	a6 1b       	sub	r26, r22
    5144:	b7 0b       	sbc	r27, r23

00005146 <__udivmodhi4_ep>:
    5146:	88 1f       	adc	r24, r24
    5148:	99 1f       	adc	r25, r25
    514a:	5a 95       	dec	r21
    514c:	a9 f7       	brne	.-22     	; 0x5138 <__udivmodhi4_loop>
    514e:	80 95       	com	r24
    5150:	90 95       	com	r25
    5152:	bc 01       	movw	r22, r24
    5154:	cd 01       	movw	r24, r26
    5156:	08 95       	ret

00005158 <__divmodsi4>:
    5158:	97 fb       	bst	r25, 7
    515a:	09 2e       	mov	r0, r25
    515c:	05 26       	eor	r0, r21
    515e:	0e d0       	rcall	.+28     	; 0x517c <__divmodsi4_neg1>
    5160:	57 fd       	sbrc	r21, 7
    5162:	04 d0       	rcall	.+8      	; 0x516c <__divmodsi4_neg2>
    5164:	c3 df       	rcall	.-122    	; 0x50ec <__udivmodsi4>
    5166:	0a d0       	rcall	.+20     	; 0x517c <__divmodsi4_neg1>
    5168:	00 1c       	adc	r0, r0
    516a:	38 f4       	brcc	.+14     	; 0x517a <__divmodsi4_exit>

0000516c <__divmodsi4_neg2>:
    516c:	50 95       	com	r21
    516e:	40 95       	com	r20
    5170:	30 95       	com	r19
    5172:	21 95       	neg	r18
    5174:	3f 4f       	sbci	r19, 0xFF	; 255
    5176:	4f 4f       	sbci	r20, 0xFF	; 255
    5178:	5f 4f       	sbci	r21, 0xFF	; 255

0000517a <__divmodsi4_exit>:
    517a:	08 95       	ret

0000517c <__divmodsi4_neg1>:
    517c:	f6 f7       	brtc	.-4      	; 0x517a <__divmodsi4_exit>
    517e:	90 95       	com	r25
    5180:	80 95       	com	r24
    5182:	70 95       	com	r23
    5184:	61 95       	neg	r22
    5186:	7f 4f       	sbci	r23, 0xFF	; 255
    5188:	8f 4f       	sbci	r24, 0xFF	; 255
    518a:	9f 4f       	sbci	r25, 0xFF	; 255
    518c:	08 95       	ret

0000518e <__prologue_saves__>:
    518e:	2f 92       	push	r2
    5190:	3f 92       	push	r3
    5192:	4f 92       	push	r4
    5194:	5f 92       	push	r5
    5196:	6f 92       	push	r6
    5198:	7f 92       	push	r7
    519a:	8f 92       	push	r8
    519c:	9f 92       	push	r9
    519e:	af 92       	push	r10
    51a0:	bf 92       	push	r11
    51a2:	cf 92       	push	r12
    51a4:	df 92       	push	r13
    51a6:	ef 92       	push	r14
    51a8:	ff 92       	push	r15
    51aa:	0f 93       	push	r16
    51ac:	1f 93       	push	r17
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	cd b7       	in	r28, 0x3d	; 61
    51b4:	de b7       	in	r29, 0x3e	; 62
    51b6:	ca 1b       	sub	r28, r26
    51b8:	db 0b       	sbc	r29, r27
    51ba:	0f b6       	in	r0, 0x3f	; 63
    51bc:	f8 94       	cli
    51be:	de bf       	out	0x3e, r29	; 62
    51c0:	0f be       	out	0x3f, r0	; 63
    51c2:	cd bf       	out	0x3d, r28	; 61
    51c4:	09 94       	ijmp

000051c6 <__epilogue_restores__>:
    51c6:	2a 88       	ldd	r2, Y+18	; 0x12
    51c8:	39 88       	ldd	r3, Y+17	; 0x11
    51ca:	48 88       	ldd	r4, Y+16	; 0x10
    51cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    51ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    51d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    51d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    51d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    51d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    51d8:	b9 84       	ldd	r11, Y+9	; 0x09
    51da:	c8 84       	ldd	r12, Y+8	; 0x08
    51dc:	df 80       	ldd	r13, Y+7	; 0x07
    51de:	ee 80       	ldd	r14, Y+6	; 0x06
    51e0:	fd 80       	ldd	r15, Y+5	; 0x05
    51e2:	0c 81       	ldd	r16, Y+4	; 0x04
    51e4:	1b 81       	ldd	r17, Y+3	; 0x03
    51e6:	aa 81       	ldd	r26, Y+2	; 0x02
    51e8:	b9 81       	ldd	r27, Y+1	; 0x01
    51ea:	ce 0f       	add	r28, r30
    51ec:	d1 1d       	adc	r29, r1
    51ee:	0f b6       	in	r0, 0x3f	; 63
    51f0:	f8 94       	cli
    51f2:	de bf       	out	0x3e, r29	; 62
    51f4:	0f be       	out	0x3f, r0	; 63
    51f6:	cd bf       	out	0x3d, r28	; 61
    51f8:	ed 01       	movw	r28, r26
    51fa:	08 95       	ret

000051fc <_exit>:
    51fc:	f8 94       	cli

000051fe <__stop_program>:
    51fe:	ff cf       	rjmp	.-2      	; 0x51fe <__stop_program>
